// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestfffgromServiceClient is the client API for TestfffgromService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestfffgromServiceClient interface {
	// PostTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*PostTAuthorRpcResponse, error)
	// GetTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorIdRpc(ctx context.Context, in *GetTAuthorIdRpcRequest, opts ...grpc.CallOption) (*TAuthor, error)
	// PutTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTAuthorIdRpc(ctx context.Context, in *DeleteTAuthorIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTAuthors mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*PostTClientRpcResponse, error)
	// GetTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientIdRpc(ctx context.Context, in *GetTClientIdRpcRequest, opts ...grpc.CallOption) (*TClient, error)
	// PutTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTClientIdRpc(ctx context.Context, in *DeleteTClientIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTClients mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*PostTDeptRpcResponse, error)
	// GetTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptIdRpc(ctx context.Context, in *GetTDeptIdRpcRequest, opts ...grpc.CallOption) (*TDept, error)
	// PutTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTDeptIdRpc(ctx context.Context, in *DeleteTDeptIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTDepts mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*PostTInvalidTokenRpcResponse, error)
	// GetTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokenIdRpc(ctx context.Context, in *GetTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*TInvalidToken, error)
	// PutTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTInvalidTokenIdRpc(ctx context.Context, in *DeleteTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTInvalidTokens mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokensRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*PostTPostRpcResponse, error)
	// GetTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostIdRpc(ctx context.Context, in *GetTPostIdRpcRequest, opts ...grpc.CallOption) (*TPost, error)
	// PutTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTPostIdRpc(ctx context.Context, in *DeleteTPostIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTPosts mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*PostTUserRpcResponse, error)
	// GetTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUserIdRpc(ctx context.Context, in *GetTUserIdRpcRequest, opts ...grpc.CallOption) (*TUser, error)
	// PutTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTUserIdRpc(ctx context.Context, in *DeleteTUserIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTUsers mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*PostTWordCloudTaskRpcResponse, error)
	// GetTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTaskIdRpc(ctx context.Context, in *GetTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*TWordCloudTask, error)
	// PutTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTWordCloudTaskIdRpc(ctx context.Context, in *DeleteTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTWordCloudTasks mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTasksRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*PostTJjjRpcResponse, error)
	// GetTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjIdRpc(ctx context.Context, in *GetTJjjIdRpcRequest, opts ...grpc.CallOption) (*TJjj, error)
	// PutTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTJjjIdRpc(ctx context.Context, in *DeleteTJjjIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTJjjs mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
}

type testfffgromServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestfffgromServiceClient(cc grpc.ClientConnInterface) TestfffgromServiceClient {
	return &testfffgromServiceClient{cc}
}

func (c *testfffgromServiceClient) PostTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*PostTAuthorRpcResponse, error) {
	out := new(PostTAuthorRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTAuthorRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTAuthorIdRpc(ctx context.Context, in *GetTAuthorIdRpcRequest, opts ...grpc.CallOption) (*TAuthor, error) {
	out := new(TAuthor)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTAuthorIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTAuthorRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTAuthorIdRpc(ctx context.Context, in *DeleteTAuthorIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTAuthorIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTAuthorsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTAuthorsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PostTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*PostTClientRpcResponse, error) {
	out := new(PostTClientRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTClientRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTClientIdRpc(ctx context.Context, in *GetTClientIdRpcRequest, opts ...grpc.CallOption) (*TClient, error) {
	out := new(TClient)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTClientIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTClientRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTClientIdRpc(ctx context.Context, in *DeleteTClientIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTClientIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTClientsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTClientsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PostTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*PostTDeptRpcResponse, error) {
	out := new(PostTDeptRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTDeptRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTDeptIdRpc(ctx context.Context, in *GetTDeptIdRpcRequest, opts ...grpc.CallOption) (*TDept, error) {
	out := new(TDept)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTDeptIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTDeptRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTDeptIdRpc(ctx context.Context, in *DeleteTDeptIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTDeptIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTDeptsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTDeptsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PostTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*PostTInvalidTokenRpcResponse, error) {
	out := new(PostTInvalidTokenRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTInvalidTokenRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTInvalidTokenIdRpc(ctx context.Context, in *GetTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*TInvalidToken, error) {
	out := new(TInvalidToken)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTInvalidTokenIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTInvalidTokenRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTInvalidTokenIdRpc(ctx context.Context, in *DeleteTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTInvalidTokenIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTInvalidTokensRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTInvalidTokensRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PostTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*PostTPostRpcResponse, error) {
	out := new(PostTPostRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTPostRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTPostIdRpc(ctx context.Context, in *GetTPostIdRpcRequest, opts ...grpc.CallOption) (*TPost, error) {
	out := new(TPost)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTPostIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTPostRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTPostIdRpc(ctx context.Context, in *DeleteTPostIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTPostIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTPostsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTPostsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PostTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*PostTUserRpcResponse, error) {
	out := new(PostTUserRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTUserIdRpc(ctx context.Context, in *GetTUserIdRpcRequest, opts ...grpc.CallOption) (*TUser, error) {
	out := new(TUser)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTUserIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTUserIdRpc(ctx context.Context, in *DeleteTUserIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTUserIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTUsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PostTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*PostTWordCloudTaskRpcResponse, error) {
	out := new(PostTWordCloudTaskRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTWordCloudTaskRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTWordCloudTaskIdRpc(ctx context.Context, in *GetTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*TWordCloudTask, error) {
	out := new(TWordCloudTask)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTWordCloudTaskIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTWordCloudTaskRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTWordCloudTaskIdRpc(ctx context.Context, in *DeleteTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTWordCloudTaskIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTWordCloudTasksRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTWordCloudTasksRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PostTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*PostTJjjRpcResponse, error) {
	out := new(PostTJjjRpcResponse)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PostTJjjRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTJjjIdRpc(ctx context.Context, in *GetTJjjIdRpcRequest, opts ...grpc.CallOption) (*TJjj, error) {
	out := new(TJjj)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTJjjIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) PutTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/PutTJjjRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) DeleteTJjjIdRpc(ctx context.Context, in *DeleteTJjjIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/DeleteTJjjIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testfffgromServiceClient) GetTJjjsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testfffgrom.TestfffgromService/GetTJjjsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestfffgromServiceServer is the server API for TestfffgromService service.
// All implementations must embed UnimplementedTestfffgromServiceServer
// for forward compatibility
type TestfffgromServiceServer interface {
	// PostTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTAuthorRpc(context.Context, *TAuthor) (*PostTAuthorRpcResponse, error)
	// GetTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorIdRpc(context.Context, *GetTAuthorIdRpcRequest) (*TAuthor, error)
	// PutTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTAuthorRpc(context.Context, *TAuthor) (*emptypb.Empty, error)
	// DeleteTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTAuthorIdRpc(context.Context, *DeleteTAuthorIdRpcRequest) (*emptypb.Empty, error)
	// GetTAuthors mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorsRpc(context.Context, *Parameter) (*Page, error)
	// PostTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTClientRpc(context.Context, *TClient) (*PostTClientRpcResponse, error)
	// GetTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientIdRpc(context.Context, *GetTClientIdRpcRequest) (*TClient, error)
	// PutTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTClientRpc(context.Context, *TClient) (*emptypb.Empty, error)
	// DeleteTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTClientIdRpc(context.Context, *DeleteTClientIdRpcRequest) (*emptypb.Empty, error)
	// GetTClients mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientsRpc(context.Context, *Parameter) (*Page, error)
	// PostTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTDeptRpc(context.Context, *TDept) (*PostTDeptRpcResponse, error)
	// GetTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptIdRpc(context.Context, *GetTDeptIdRpcRequest) (*TDept, error)
	// PutTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTDeptRpc(context.Context, *TDept) (*emptypb.Empty, error)
	// DeleteTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTDeptIdRpc(context.Context, *DeleteTDeptIdRpcRequest) (*emptypb.Empty, error)
	// GetTDepts mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptsRpc(context.Context, *Parameter) (*Page, error)
	// PostTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTInvalidTokenRpc(context.Context, *TInvalidToken) (*PostTInvalidTokenRpcResponse, error)
	// GetTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokenIdRpc(context.Context, *GetTInvalidTokenIdRpcRequest) (*TInvalidToken, error)
	// PutTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTInvalidTokenRpc(context.Context, *TInvalidToken) (*emptypb.Empty, error)
	// DeleteTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTInvalidTokenIdRpc(context.Context, *DeleteTInvalidTokenIdRpcRequest) (*emptypb.Empty, error)
	// GetTInvalidTokens mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokensRpc(context.Context, *Parameter) (*Page, error)
	// PostTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTPostRpc(context.Context, *TPost) (*PostTPostRpcResponse, error)
	// GetTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostIdRpc(context.Context, *GetTPostIdRpcRequest) (*TPost, error)
	// PutTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTPostRpc(context.Context, *TPost) (*emptypb.Empty, error)
	// DeleteTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTPostIdRpc(context.Context, *DeleteTPostIdRpcRequest) (*emptypb.Empty, error)
	// GetTPosts mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostsRpc(context.Context, *Parameter) (*Page, error)
	// PostTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTUserRpc(context.Context, *TUser) (*PostTUserRpcResponse, error)
	// GetTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUserIdRpc(context.Context, *GetTUserIdRpcRequest) (*TUser, error)
	// PutTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTUserRpc(context.Context, *TUser) (*emptypb.Empty, error)
	// DeleteTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTUserIdRpc(context.Context, *DeleteTUserIdRpcRequest) (*emptypb.Empty, error)
	// GetTUsers mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUsersRpc(context.Context, *Parameter) (*Page, error)
	// PostTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*PostTWordCloudTaskRpcResponse, error)
	// GetTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTaskIdRpc(context.Context, *GetTWordCloudTaskIdRpcRequest) (*TWordCloudTask, error)
	// PutTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*emptypb.Empty, error)
	// DeleteTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTWordCloudTaskIdRpc(context.Context, *DeleteTWordCloudTaskIdRpcRequest) (*emptypb.Empty, error)
	// GetTWordCloudTasks mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTasksRpc(context.Context, *Parameter) (*Page, error)
	// PostTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTJjjRpc(context.Context, *TJjj) (*PostTJjjRpcResponse, error)
	// GetTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjIdRpc(context.Context, *GetTJjjIdRpcRequest) (*TJjj, error)
	// PutTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTJjjRpc(context.Context, *TJjj) (*emptypb.Empty, error)
	// DeleteTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTJjjIdRpc(context.Context, *DeleteTJjjIdRpcRequest) (*emptypb.Empty, error)
	// GetTJjjs mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjsRpc(context.Context, *Parameter) (*Page, error)
	mustEmbedUnimplementedTestfffgromServiceServer()
}

// UnimplementedTestfffgromServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestfffgromServiceServer struct {
}

func (UnimplementedTestfffgromServiceServer) PostTAuthorRpc(context.Context, *TAuthor) (*PostTAuthorRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTAuthorRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTAuthorIdRpc(context.Context, *GetTAuthorIdRpcRequest) (*TAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTAuthorIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTAuthorRpc(context.Context, *TAuthor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTAuthorRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTAuthorIdRpc(context.Context, *DeleteTAuthorIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTAuthorIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTAuthorsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTAuthorsRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PostTClientRpc(context.Context, *TClient) (*PostTClientRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTClientRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTClientIdRpc(context.Context, *GetTClientIdRpcRequest) (*TClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTClientIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTClientRpc(context.Context, *TClient) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTClientRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTClientIdRpc(context.Context, *DeleteTClientIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTClientIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTClientsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTClientsRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PostTDeptRpc(context.Context, *TDept) (*PostTDeptRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTDeptRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTDeptIdRpc(context.Context, *GetTDeptIdRpcRequest) (*TDept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTDeptIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTDeptRpc(context.Context, *TDept) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTDeptRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTDeptIdRpc(context.Context, *DeleteTDeptIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTDeptIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTDeptsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTDeptsRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PostTInvalidTokenRpc(context.Context, *TInvalidToken) (*PostTInvalidTokenRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTInvalidTokenRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTInvalidTokenIdRpc(context.Context, *GetTInvalidTokenIdRpcRequest) (*TInvalidToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTInvalidTokenIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTInvalidTokenRpc(context.Context, *TInvalidToken) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTInvalidTokenRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTInvalidTokenIdRpc(context.Context, *DeleteTInvalidTokenIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTInvalidTokenIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTInvalidTokensRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTInvalidTokensRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PostTPostRpc(context.Context, *TPost) (*PostTPostRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTPostRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTPostIdRpc(context.Context, *GetTPostIdRpcRequest) (*TPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTPostIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTPostRpc(context.Context, *TPost) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTPostRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTPostIdRpc(context.Context, *DeleteTPostIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTPostIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTPostsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTPostsRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PostTUserRpc(context.Context, *TUser) (*PostTUserRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTUserRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTUserIdRpc(context.Context, *GetTUserIdRpcRequest) (*TUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTUserIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTUserRpc(context.Context, *TUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTUserRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTUserIdRpc(context.Context, *DeleteTUserIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTUserIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTUsersRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTUsersRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PostTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*PostTWordCloudTaskRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTWordCloudTaskRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTWordCloudTaskIdRpc(context.Context, *GetTWordCloudTaskIdRpcRequest) (*TWordCloudTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTWordCloudTaskIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTWordCloudTaskRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTWordCloudTaskIdRpc(context.Context, *DeleteTWordCloudTaskIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTWordCloudTaskIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTWordCloudTasksRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTWordCloudTasksRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PostTJjjRpc(context.Context, *TJjj) (*PostTJjjRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTJjjRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTJjjIdRpc(context.Context, *GetTJjjIdRpcRequest) (*TJjj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTJjjIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) PutTJjjRpc(context.Context, *TJjj) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTJjjRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) DeleteTJjjIdRpc(context.Context, *DeleteTJjjIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTJjjIdRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) GetTJjjsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTJjjsRpc not implemented")
}
func (UnimplementedTestfffgromServiceServer) mustEmbedUnimplementedTestfffgromServiceServer() {}

// UnsafeTestfffgromServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestfffgromServiceServer will
// result in compilation errors.
type UnsafeTestfffgromServiceServer interface {
	mustEmbedUnimplementedTestfffgromServiceServer()
}

func RegisterTestfffgromServiceServer(s grpc.ServiceRegistrar, srv TestfffgromServiceServer) {
	s.RegisterService(&TestfffgromService_ServiceDesc, srv)
}

func _TestfffgromService_PostTAuthorRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTAuthorRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTAuthorRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTAuthorRpc(ctx, req.(*TAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTAuthorIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTAuthorIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTAuthorIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTAuthorIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTAuthorIdRpc(ctx, req.(*GetTAuthorIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTAuthorRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTAuthorRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTAuthorRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTAuthorRpc(ctx, req.(*TAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTAuthorIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTAuthorIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTAuthorIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTAuthorIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTAuthorIdRpc(ctx, req.(*DeleteTAuthorIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTAuthorsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTAuthorsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTAuthorsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTAuthorsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PostTClientRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTClientRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTClientRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTClientRpc(ctx, req.(*TClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTClientIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTClientIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTClientIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTClientIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTClientIdRpc(ctx, req.(*GetTClientIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTClientRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTClientRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTClientRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTClientRpc(ctx, req.(*TClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTClientIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTClientIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTClientIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTClientIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTClientIdRpc(ctx, req.(*DeleteTClientIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTClientsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTClientsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTClientsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTClientsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PostTDeptRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TDept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTDeptRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTDeptRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTDeptRpc(ctx, req.(*TDept))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTDeptIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTDeptIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTDeptIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTDeptIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTDeptIdRpc(ctx, req.(*GetTDeptIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTDeptRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TDept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTDeptRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTDeptRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTDeptRpc(ctx, req.(*TDept))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTDeptIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTDeptIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTDeptIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTDeptIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTDeptIdRpc(ctx, req.(*DeleteTDeptIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTDeptsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTDeptsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTDeptsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTDeptsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PostTInvalidTokenRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TInvalidToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTInvalidTokenRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTInvalidTokenRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTInvalidTokenRpc(ctx, req.(*TInvalidToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTInvalidTokenIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTInvalidTokenIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTInvalidTokenIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTInvalidTokenIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTInvalidTokenIdRpc(ctx, req.(*GetTInvalidTokenIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTInvalidTokenRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TInvalidToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTInvalidTokenRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTInvalidTokenRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTInvalidTokenRpc(ctx, req.(*TInvalidToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTInvalidTokenIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTInvalidTokenIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTInvalidTokenIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTInvalidTokenIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTInvalidTokenIdRpc(ctx, req.(*DeleteTInvalidTokenIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTInvalidTokensRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTInvalidTokensRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTInvalidTokensRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTInvalidTokensRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PostTPostRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTPostRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTPostRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTPostRpc(ctx, req.(*TPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTPostIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTPostIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTPostIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTPostIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTPostIdRpc(ctx, req.(*GetTPostIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTPostRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTPostRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTPostRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTPostRpc(ctx, req.(*TPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTPostIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTPostIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTPostIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTPostIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTPostIdRpc(ctx, req.(*DeleteTPostIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTPostsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTPostsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTPostsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTPostsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PostTUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTUserRpc(ctx, req.(*TUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTUserIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTUserIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTUserIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTUserIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTUserIdRpc(ctx, req.(*GetTUserIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTUserRpc(ctx, req.(*TUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTUserIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTUserIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTUserIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTUserIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTUserIdRpc(ctx, req.(*DeleteTUserIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTUsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTUsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTUsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTUsersRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PostTWordCloudTaskRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TWordCloudTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTWordCloudTaskRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTWordCloudTaskRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTWordCloudTaskRpc(ctx, req.(*TWordCloudTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTWordCloudTaskIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTWordCloudTaskIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTWordCloudTaskIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTWordCloudTaskIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTWordCloudTaskIdRpc(ctx, req.(*GetTWordCloudTaskIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTWordCloudTaskRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TWordCloudTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTWordCloudTaskRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTWordCloudTaskRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTWordCloudTaskRpc(ctx, req.(*TWordCloudTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTWordCloudTaskIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTWordCloudTaskIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTWordCloudTaskIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTWordCloudTaskIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTWordCloudTaskIdRpc(ctx, req.(*DeleteTWordCloudTaskIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTWordCloudTasksRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTWordCloudTasksRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTWordCloudTasksRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTWordCloudTasksRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PostTJjjRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TJjj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PostTJjjRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PostTJjjRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PostTJjjRpc(ctx, req.(*TJjj))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTJjjIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTJjjIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTJjjIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTJjjIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTJjjIdRpc(ctx, req.(*GetTJjjIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_PutTJjjRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TJjj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).PutTJjjRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/PutTJjjRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).PutTJjjRpc(ctx, req.(*TJjj))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_DeleteTJjjIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTJjjIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).DeleteTJjjIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/DeleteTJjjIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).DeleteTJjjIdRpc(ctx, req.(*DeleteTJjjIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestfffgromService_GetTJjjsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestfffgromServiceServer).GetTJjjsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testfffgrom.TestfffgromService/GetTJjjsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestfffgromServiceServer).GetTJjjsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

// TestfffgromService_ServiceDesc is the grpc.ServiceDesc for TestfffgromService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestfffgromService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testfffgrom.TestfffgromService",
	HandlerType: (*TestfffgromServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTAuthorRpc",
			Handler:    _TestfffgromService_PostTAuthorRpc_Handler,
		},
		{
			MethodName: "GetTAuthorIdRpc",
			Handler:    _TestfffgromService_GetTAuthorIdRpc_Handler,
		},
		{
			MethodName: "PutTAuthorRpc",
			Handler:    _TestfffgromService_PutTAuthorRpc_Handler,
		},
		{
			MethodName: "DeleteTAuthorIdRpc",
			Handler:    _TestfffgromService_DeleteTAuthorIdRpc_Handler,
		},
		{
			MethodName: "GetTAuthorsRpc",
			Handler:    _TestfffgromService_GetTAuthorsRpc_Handler,
		},
		{
			MethodName: "PostTClientRpc",
			Handler:    _TestfffgromService_PostTClientRpc_Handler,
		},
		{
			MethodName: "GetTClientIdRpc",
			Handler:    _TestfffgromService_GetTClientIdRpc_Handler,
		},
		{
			MethodName: "PutTClientRpc",
			Handler:    _TestfffgromService_PutTClientRpc_Handler,
		},
		{
			MethodName: "DeleteTClientIdRpc",
			Handler:    _TestfffgromService_DeleteTClientIdRpc_Handler,
		},
		{
			MethodName: "GetTClientsRpc",
			Handler:    _TestfffgromService_GetTClientsRpc_Handler,
		},
		{
			MethodName: "PostTDeptRpc",
			Handler:    _TestfffgromService_PostTDeptRpc_Handler,
		},
		{
			MethodName: "GetTDeptIdRpc",
			Handler:    _TestfffgromService_GetTDeptIdRpc_Handler,
		},
		{
			MethodName: "PutTDeptRpc",
			Handler:    _TestfffgromService_PutTDeptRpc_Handler,
		},
		{
			MethodName: "DeleteTDeptIdRpc",
			Handler:    _TestfffgromService_DeleteTDeptIdRpc_Handler,
		},
		{
			MethodName: "GetTDeptsRpc",
			Handler:    _TestfffgromService_GetTDeptsRpc_Handler,
		},
		{
			MethodName: "PostTInvalidTokenRpc",
			Handler:    _TestfffgromService_PostTInvalidTokenRpc_Handler,
		},
		{
			MethodName: "GetTInvalidTokenIdRpc",
			Handler:    _TestfffgromService_GetTInvalidTokenIdRpc_Handler,
		},
		{
			MethodName: "PutTInvalidTokenRpc",
			Handler:    _TestfffgromService_PutTInvalidTokenRpc_Handler,
		},
		{
			MethodName: "DeleteTInvalidTokenIdRpc",
			Handler:    _TestfffgromService_DeleteTInvalidTokenIdRpc_Handler,
		},
		{
			MethodName: "GetTInvalidTokensRpc",
			Handler:    _TestfffgromService_GetTInvalidTokensRpc_Handler,
		},
		{
			MethodName: "PostTPostRpc",
			Handler:    _TestfffgromService_PostTPostRpc_Handler,
		},
		{
			MethodName: "GetTPostIdRpc",
			Handler:    _TestfffgromService_GetTPostIdRpc_Handler,
		},
		{
			MethodName: "PutTPostRpc",
			Handler:    _TestfffgromService_PutTPostRpc_Handler,
		},
		{
			MethodName: "DeleteTPostIdRpc",
			Handler:    _TestfffgromService_DeleteTPostIdRpc_Handler,
		},
		{
			MethodName: "GetTPostsRpc",
			Handler:    _TestfffgromService_GetTPostsRpc_Handler,
		},
		{
			MethodName: "PostTUserRpc",
			Handler:    _TestfffgromService_PostTUserRpc_Handler,
		},
		{
			MethodName: "GetTUserIdRpc",
			Handler:    _TestfffgromService_GetTUserIdRpc_Handler,
		},
		{
			MethodName: "PutTUserRpc",
			Handler:    _TestfffgromService_PutTUserRpc_Handler,
		},
		{
			MethodName: "DeleteTUserIdRpc",
			Handler:    _TestfffgromService_DeleteTUserIdRpc_Handler,
		},
		{
			MethodName: "GetTUsersRpc",
			Handler:    _TestfffgromService_GetTUsersRpc_Handler,
		},
		{
			MethodName: "PostTWordCloudTaskRpc",
			Handler:    _TestfffgromService_PostTWordCloudTaskRpc_Handler,
		},
		{
			MethodName: "GetTWordCloudTaskIdRpc",
			Handler:    _TestfffgromService_GetTWordCloudTaskIdRpc_Handler,
		},
		{
			MethodName: "PutTWordCloudTaskRpc",
			Handler:    _TestfffgromService_PutTWordCloudTaskRpc_Handler,
		},
		{
			MethodName: "DeleteTWordCloudTaskIdRpc",
			Handler:    _TestfffgromService_DeleteTWordCloudTaskIdRpc_Handler,
		},
		{
			MethodName: "GetTWordCloudTasksRpc",
			Handler:    _TestfffgromService_GetTWordCloudTasksRpc_Handler,
		},
		{
			MethodName: "PostTJjjRpc",
			Handler:    _TestfffgromService_PostTJjjRpc_Handler,
		},
		{
			MethodName: "GetTJjjIdRpc",
			Handler:    _TestfffgromService_GetTJjjIdRpc_Handler,
		},
		{
			MethodName: "PutTJjjRpc",
			Handler:    _TestfffgromService_PutTJjjRpc_Handler,
		},
		{
			MethodName: "DeleteTJjjIdRpc",
			Handler:    _TestfffgromService_DeleteTJjjIdRpc_Handler,
		},
		{
			MethodName: "GetTJjjsRpc",
			Handler:    _TestfffgromService_GetTJjjsRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/testfffgrom.proto",
}
