/**
* Generated by go-doudou v2.1.0.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	"net/http"
	service "testfffgrom"
	"testfffgrom/dto"

	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest/httprouter"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"
)

type TestfffgromHandlerImpl struct {
	testfffgrom service.Testfffgrom
}

func (receiver *TestfffgromHandlerImpl) PostTAuthor(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TAuthor
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTAuthor(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTAuthor_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TAuthor
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTAuthor_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TAuthor `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTAuthor(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TAuthor
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTAuthor(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTAuthor_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTAuthor_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTAuthors(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTAuthors(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PostTClient(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TClient
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTClient(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTClient_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TClient
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTClient_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TClient `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTClient(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TClient
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTClient(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTClient_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTClient_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTClients(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTClients(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PostTDept(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TDept
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTDept(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTDept_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TDept
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTDept_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TDept `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTDept(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TDept
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTDept(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTDept_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTDept_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTDepts(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTDepts(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PostTInvalidToken(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TInvalidToken
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTInvalidToken(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTInvalidToken_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TInvalidToken
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTInvalidToken_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TInvalidToken `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTInvalidToken(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TInvalidToken
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTInvalidToken(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTInvalidToken_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTInvalidToken_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTInvalidTokens(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTInvalidTokens(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PostTPost(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TPost
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTPost(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTPost_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TPost
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTPost_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TPost `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTPost(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TPost
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTPost(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTPost_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTPost_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTPosts(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTPosts(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PostTUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TUser
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTUser(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TUser
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTUser_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TUser `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TUser
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTUser(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTUser_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTUsers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTUsers(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PostTWordCloudTask(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TWordCloudTask
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTWordCloudTask(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTWordCloudTask_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TWordCloudTask
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTWordCloudTask_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TWordCloudTask `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTWordCloudTask(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TWordCloudTask
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTWordCloudTask(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTWordCloudTask_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTWordCloudTask_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTWordCloudTasks(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTWordCloudTasks(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewTestfffgromHandler(testfffgrom service.Testfffgrom) TestfffgromHandler {
	return &TestfffgromHandlerImpl{
		testfffgrom,
	}
}

func (receiver *TestfffgromHandlerImpl) PostTJjj(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TJjj
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.PostTJjj(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTJjj_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TJjj
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testfffgrom.GetTJjj_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TJjj `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) PutTJjj(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TJjj
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testfffgrom.PutTJjj(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) DeleteTJjj_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testfffgrom.DeleteTJjj_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestfffgromHandlerImpl) GetTJjjs(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testfffgrom.GetTJjjs(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
