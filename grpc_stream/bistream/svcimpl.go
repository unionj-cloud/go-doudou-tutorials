/**
* Generated by go-doudou v2.0.3.
* You can edit it as your need.
 */
package service

import (
	"go-doudou-tutorials/bistream/config"
	"io"
	"time"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/zlogger"

	pb "go-doudou-tutorials/bistream/transport/grpc"
)

var _ pb.BistreamServiceServer = (*BistreamImpl)(nil)

type BistreamImpl struct {
	pb.UnimplementedBistreamServiceServer

	conf *config.Config
}

func NewBistream(conf *config.Config) *BistreamImpl {
	return &BistreamImpl{
		conf: conf,
	}
}

func (receiver *BistreamImpl) RegisterRpc(server pb.BistreamService_RegisterRpcServer) error {
	zlogger.Info().Msg("CreateUser Function")

	for {
		// Receive the request and possible error from the stream object
		req, err := server.Recv()

		// If there are no more requests, we return
		if err == io.EOF {
			return nil
		}

		// Handle error from the stream object
		if err != nil {
			zlogger.Error().Msgf("Error when reading client request stream: %v", err)
			return nil
		}
		zlogger.Info().Msgf("%#v", req)

		time.Sleep(6 * time.Second)

		// Build and send response to the client
		res := server.Send(&pb.Service{
			Name:     "",
			RpcAddr:  "",
			RestAddr: "",
			Weight:   0,
		})

		// Handle any possible error, when sending the response
		if res != nil {
			zlogger.Error().Msgf("Error when response was sent to the client: %v", res)
			return nil
		}
	}
}
