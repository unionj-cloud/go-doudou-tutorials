// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordcloudMakerServiceClient is the client API for WordcloudMakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordcloudMakerServiceClient interface {
	// Make 生成词云图接口
	// make word cloud image
	MakeRpc(ctx context.Context, in *MakePayload, opts ...grpc.CallOption) (*MakeRpcResponse, error)
}

type wordcloudMakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordcloudMakerServiceClient(cc grpc.ClientConnInterface) WordcloudMakerServiceClient {
	return &wordcloudMakerServiceClient{cc}
}

func (c *wordcloudMakerServiceClient) MakeRpc(ctx context.Context, in *MakePayload, opts ...grpc.CallOption) (*MakeRpcResponse, error) {
	out := new(MakeRpcResponse)
	err := c.cc.Invoke(ctx, "/wordcloud_maker.WordcloudMakerService/MakeRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordcloudMakerServiceServer is the server API for WordcloudMakerService service.
// All implementations must embed UnimplementedWordcloudMakerServiceServer
// for forward compatibility
type WordcloudMakerServiceServer interface {
	// Make 生成词云图接口
	// make word cloud image
	MakeRpc(context.Context, *MakePayload) (*MakeRpcResponse, error)
	mustEmbedUnimplementedWordcloudMakerServiceServer()
}

// UnimplementedWordcloudMakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWordcloudMakerServiceServer struct {
}

func (UnimplementedWordcloudMakerServiceServer) MakeRpc(context.Context, *MakePayload) (*MakeRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeRpc not implemented")
}
func (UnimplementedWordcloudMakerServiceServer) mustEmbedUnimplementedWordcloudMakerServiceServer() {}

// UnsafeWordcloudMakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordcloudMakerServiceServer will
// result in compilation errors.
type UnsafeWordcloudMakerServiceServer interface {
	mustEmbedUnimplementedWordcloudMakerServiceServer()
}

func RegisterWordcloudMakerServiceServer(s grpc.ServiceRegistrar, srv WordcloudMakerServiceServer) {
	s.RegisterService(&WordcloudMakerService_ServiceDesc, srv)
}

func _WordcloudMakerService_MakeRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordcloudMakerServiceServer).MakeRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordcloud_maker.WordcloudMakerService/MakeRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordcloudMakerServiceServer).MakeRpc(ctx, req.(*MakePayload))
	}
	return interceptor(ctx, in, info, handler)
}

// WordcloudMakerService_ServiceDesc is the grpc.ServiceDesc for WordcloudMakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordcloudMakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wordcloud_maker.WordcloudMakerService",
	HandlerType: (*WordcloudMakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeRpc",
			Handler:    _WordcloudMakerService_MakeRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/wordcloudmaker.proto",
}
