/**
* Generated by go-doudou v2.0.8.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	"net/http"
	service "testgorm"
	"testgorm/dto"

	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest/httprouter"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"
)

type TestgormHandlerImpl struct {
	testgorm service.Testgorm
}

func (receiver *TestgormHandlerImpl) PostCadCommonComment(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonComment
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostCadCommonComment(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonComment_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.CadCommonComment
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetCadCommonComment_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.CadCommonComment `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutCadCommonComment(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonComment
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutCadCommonComment(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteCadCommonComment_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteCadCommonComment_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonComments(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetCadCommonComments(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostCadCommonLike(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonLike
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostCadCommonLike(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonLike_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.CadCommonLike
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetCadCommonLike_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.CadCommonLike `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutCadCommonLike(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonLike
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutCadCommonLike(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteCadCommonLike_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteCadCommonLike_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonLikes(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetCadCommonLikes(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostQrtzJobDetail(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzJobDetail
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostQrtzJobDetail(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzJobDetail_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.QrtzJobDetail
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetQrtzJobDetail_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.QrtzJobDetail `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutQrtzJobDetail(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzJobDetail
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutQrtzJobDetail(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteQrtzJobDetail_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteQrtzJobDetail_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzJobDetails(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetQrtzJobDetails(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostTInvalidToken(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TInvalidToken
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostTInvalidToken(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTInvalidToken_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TInvalidToken
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetTInvalidToken_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TInvalidToken `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutTInvalidToken(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TInvalidToken
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutTInvalidToken(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteTInvalidToken_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteTInvalidToken_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTInvalidTokens(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetTInvalidTokens(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostCadCommonConfig(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonConfig
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostCadCommonConfig(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonConfig_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.CadCommonConfig
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetCadCommonConfig_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.CadCommonConfig `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutCadCommonConfig(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonConfig
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutCadCommonConfig(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteCadCommonConfig_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteCadCommonConfig_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonConfigs(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetCadCommonConfigs(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostQrtzBlobTrigger(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzBlobTrigger
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostQrtzBlobTrigger(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzBlobTrigger_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.QrtzBlobTrigger
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetQrtzBlobTrigger_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.QrtzBlobTrigger `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutQrtzBlobTrigger(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzBlobTrigger
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutQrtzBlobTrigger(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteQrtzBlobTrigger_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteQrtzBlobTrigger_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzBlobTriggers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetQrtzBlobTriggers(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostQrtzCalendar(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzCalendar
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostQrtzCalendar(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzCalendar_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.QrtzCalendar
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetQrtzCalendar_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.QrtzCalendar `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutQrtzCalendar(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzCalendar
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutQrtzCalendar(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteQrtzCalendar_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteQrtzCalendar_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzCalendars(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetQrtzCalendars(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostTUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TUser
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostTUser(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TUser
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetTUser_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TUser `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutTUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TUser
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutTUser(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteTUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteTUser_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTUsers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetTUsers(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostTWordCloudTask(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TWordCloudTask
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostTWordCloudTask(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTWordCloudTask_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TWordCloudTask
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetTWordCloudTask_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TWordCloudTask `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutTWordCloudTask(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TWordCloudTask
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutTWordCloudTask(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteTWordCloudTask_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteTWordCloudTask_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTWordCloudTasks(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetTWordCloudTasks(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostCadCommonFile(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonFile
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostCadCommonFile(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonFile_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.CadCommonFile
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetCadCommonFile_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.CadCommonFile `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutCadCommonFile(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonFile
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutCadCommonFile(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteCadCommonFile_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteCadCommonFile_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonFiles(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetCadCommonFiles(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostCadCommonFollow(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonFollow
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostCadCommonFollow(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonFollow_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.CadCommonFollow
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetCadCommonFollow_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.CadCommonFollow `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutCadCommonFollow(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.CadCommonFollow
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutCadCommonFollow(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteCadCommonFollow_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteCadCommonFollow_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetCadCommonFollows(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetCadCommonFollows(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostQrtzFiredTrigger(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzFiredTrigger
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostQrtzFiredTrigger(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzFiredTrigger_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.QrtzFiredTrigger
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetQrtzFiredTrigger_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.QrtzFiredTrigger `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutQrtzFiredTrigger(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzFiredTrigger
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutQrtzFiredTrigger(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteQrtzFiredTrigger_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteQrtzFiredTrigger_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzFiredTriggers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetQrtzFiredTriggers(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostTClient(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TClient
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostTClient(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTClient_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.TClient
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetTClient_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.TClient `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutTClient(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.TClient
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutTClient(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteTClient_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteTClient_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetTClients(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetTClients(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PostQrtzCronTrigger(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzCronTrigger
		data string
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.PostQrtzCronTrigger(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzCronTrigger_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   string
		data dto.QrtzCronTrigger
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgorm.GetQrtzCronTrigger_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.QrtzCronTrigger `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) PutQrtzCronTrigger(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.QrtzCronTrigger
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgorm.PutQrtzCronTrigger(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) DeleteQrtzCronTrigger_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  string
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	id = paramsFromCtx.ByName("id")
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgorm.DeleteQrtzCronTrigger_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *TestgormHandlerImpl) GetQrtzCronTriggers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `form:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgorm.GetQrtzCronTriggers(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewTestgormHandler(testgorm service.Testgorm) TestgormHandler {
	return &TestgormHandlerImpl{
		testgorm,
	}
}
