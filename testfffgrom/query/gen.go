// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	TAuthor        *tAuthor
	TClient        *tClient
	TDept          *tDept
	TInvalidToken  *tInvalidToken
	TJjj           *tJjj
	TPost          *tPost
	TUser          *tUser
	TWordCloudTask *tWordCloudTask
)

func SetDefault(db *gorm.DB, opts ...gormgen.DOOption) {
	*Q = *Use(db, opts...)
	TAuthor = &Q.TAuthor
	TClient = &Q.TClient
	TDept = &Q.TDept
	TInvalidToken = &Q.TInvalidToken
	TJjj = &Q.TJjj
	TPost = &Q.TPost
	TUser = &Q.TUser
	TWordCloudTask = &Q.TWordCloudTask
}

func Use(db *gorm.DB, opts ...gormgen.DOOption) *Query {
	return &Query{
		db:             db,
		TAuthor:        newTAuthor(db, opts...),
		TClient:        newTClient(db, opts...),
		TDept:          newTDept(db, opts...),
		TInvalidToken:  newTInvalidToken(db, opts...),
		TJjj:           newTJjj(db, opts...),
		TPost:          newTPost(db, opts...),
		TUser:          newTUser(db, opts...),
		TWordCloudTask: newTWordCloudTask(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	TAuthor        tAuthor
	TClient        tClient
	TDept          tDept
	TInvalidToken  tInvalidToken
	TJjj           tJjj
	TPost          tPost
	TUser          tUser
	TWordCloudTask tWordCloudTask
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		TAuthor:        q.TAuthor.clone(db),
		TClient:        q.TClient.clone(db),
		TDept:          q.TDept.clone(db),
		TInvalidToken:  q.TInvalidToken.clone(db),
		TJjj:           q.TJjj.clone(db),
		TPost:          q.TPost.clone(db),
		TUser:          q.TUser.clone(db),
		TWordCloudTask: q.TWordCloudTask.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		TAuthor:        q.TAuthor.replaceDB(db),
		TClient:        q.TClient.replaceDB(db),
		TDept:          q.TDept.replaceDB(db),
		TInvalidToken:  q.TInvalidToken.replaceDB(db),
		TJjj:           q.TJjj.replaceDB(db),
		TPost:          q.TPost.replaceDB(db),
		TUser:          q.TUser.replaceDB(db),
		TWordCloudTask: q.TWordCloudTask.replaceDB(db),
	}
}

type queryCtx struct {
	TAuthor        ITAuthorDo
	TClient        ITClientDo
	TDept          ITDeptDo
	TInvalidToken  ITInvalidTokenDo
	TJjj           ITJjjDo
	TPost          ITPostDo
	TUser          ITUserDo
	TWordCloudTask ITWordCloudTaskDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TAuthor:        q.TAuthor.WithContext(ctx),
		TClient:        q.TClient.WithContext(ctx),
		TDept:          q.TDept.WithContext(ctx),
		TInvalidToken:  q.TInvalidToken.WithContext(ctx),
		TJjj:           q.TJjj.WithContext(ctx),
		TPost:          q.TPost.WithContext(ctx),
		TUser:          q.TUser.WithContext(ctx),
		TWordCloudTask: q.TWordCloudTask.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
