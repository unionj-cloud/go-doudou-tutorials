// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"testgorm/model"
)

func newQrtzJobDetail(db *gorm.DB, opts ...gen.DOOption) qrtzJobDetail {
	_qrtzJobDetail := qrtzJobDetail{}

	_qrtzJobDetail.qrtzJobDetailDo.UseDB(db, opts...)
	_qrtzJobDetail.qrtzJobDetailDo.UseModel(&model.QrtzJobDetail{})

	tableName := _qrtzJobDetail.qrtzJobDetailDo.TableName()
	_qrtzJobDetail.ALL = field.NewAsterisk(tableName)
	_qrtzJobDetail.SCHEDNAME = field.NewString(tableName, "SCHED_NAME")
	_qrtzJobDetail.JOBNAME = field.NewString(tableName, "JOB_NAME")
	_qrtzJobDetail.JOBGROUP = field.NewString(tableName, "JOB_GROUP")
	_qrtzJobDetail.DESCRIPTION = field.NewString(tableName, "DESCRIPTION")
	_qrtzJobDetail.JOBCLASSNAME = field.NewString(tableName, "JOB_CLASS_NAME")
	_qrtzJobDetail.ISDURABLE = field.NewString(tableName, "IS_DURABLE")
	_qrtzJobDetail.ISNONCONCURRENT = field.NewString(tableName, "IS_NONCONCURRENT")
	_qrtzJobDetail.ISUPDATEDATA = field.NewString(tableName, "IS_UPDATE_DATA")
	_qrtzJobDetail.REQUESTSRECOVERY = field.NewString(tableName, "REQUESTS_RECOVERY")
	_qrtzJobDetail.JOBDATA = field.NewBytes(tableName, "JOB_DATA")

	_qrtzJobDetail.fillFieldMap()

	return _qrtzJobDetail
}

type qrtzJobDetail struct {
	qrtzJobDetailDo qrtzJobDetailDo

	ALL              field.Asterisk
	SCHEDNAME        field.String
	JOBNAME          field.String
	JOBGROUP         field.String
	DESCRIPTION      field.String
	JOBCLASSNAME     field.String
	ISDURABLE        field.String
	ISNONCONCURRENT  field.String
	ISUPDATEDATA     field.String
	REQUESTSRECOVERY field.String
	JOBDATA          field.Bytes

	fieldMap map[string]field.Expr
}

func (q qrtzJobDetail) Table(newTableName string) *qrtzJobDetail {
	q.qrtzJobDetailDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrtzJobDetail) As(alias string) *qrtzJobDetail {
	q.qrtzJobDetailDo.DO = *(q.qrtzJobDetailDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrtzJobDetail) updateTableName(table string) *qrtzJobDetail {
	q.ALL = field.NewAsterisk(table)
	q.SCHEDNAME = field.NewString(table, "SCHED_NAME")
	q.JOBNAME = field.NewString(table, "JOB_NAME")
	q.JOBGROUP = field.NewString(table, "JOB_GROUP")
	q.DESCRIPTION = field.NewString(table, "DESCRIPTION")
	q.JOBCLASSNAME = field.NewString(table, "JOB_CLASS_NAME")
	q.ISDURABLE = field.NewString(table, "IS_DURABLE")
	q.ISNONCONCURRENT = field.NewString(table, "IS_NONCONCURRENT")
	q.ISUPDATEDATA = field.NewString(table, "IS_UPDATE_DATA")
	q.REQUESTSRECOVERY = field.NewString(table, "REQUESTS_RECOVERY")
	q.JOBDATA = field.NewBytes(table, "JOB_DATA")

	q.fillFieldMap()

	return q
}

func (q *qrtzJobDetail) WithContext(ctx context.Context) IQrtzJobDetailDo {
	return q.qrtzJobDetailDo.WithContext(ctx)
}

func (q qrtzJobDetail) TableName() string { return q.qrtzJobDetailDo.TableName() }

func (q qrtzJobDetail) Alias() string { return q.qrtzJobDetailDo.Alias() }

func (q qrtzJobDetail) Columns(cols ...field.Expr) gen.Columns {
	return q.qrtzJobDetailDo.Columns(cols...)
}

func (q *qrtzJobDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrtzJobDetail) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 10)
	q.fieldMap["SCHED_NAME"] = q.SCHEDNAME
	q.fieldMap["JOB_NAME"] = q.JOBNAME
	q.fieldMap["JOB_GROUP"] = q.JOBGROUP
	q.fieldMap["DESCRIPTION"] = q.DESCRIPTION
	q.fieldMap["JOB_CLASS_NAME"] = q.JOBCLASSNAME
	q.fieldMap["IS_DURABLE"] = q.ISDURABLE
	q.fieldMap["IS_NONCONCURRENT"] = q.ISNONCONCURRENT
	q.fieldMap["IS_UPDATE_DATA"] = q.ISUPDATEDATA
	q.fieldMap["REQUESTS_RECOVERY"] = q.REQUESTSRECOVERY
	q.fieldMap["JOB_DATA"] = q.JOBDATA
}

func (q qrtzJobDetail) clone(db *gorm.DB) qrtzJobDetail {
	q.qrtzJobDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrtzJobDetail) replaceDB(db *gorm.DB) qrtzJobDetail {
	q.qrtzJobDetailDo.ReplaceDB(db)
	return q
}

type qrtzJobDetailDo struct{ gen.DO }

type IQrtzJobDetailDo interface {
	gen.SubQuery
	Debug() IQrtzJobDetailDo
	WithContext(ctx context.Context) IQrtzJobDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrtzJobDetailDo
	WriteDB() IQrtzJobDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrtzJobDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrtzJobDetailDo
	Not(conds ...gen.Condition) IQrtzJobDetailDo
	Or(conds ...gen.Condition) IQrtzJobDetailDo
	Select(conds ...field.Expr) IQrtzJobDetailDo
	Where(conds ...gen.Condition) IQrtzJobDetailDo
	Order(conds ...field.Expr) IQrtzJobDetailDo
	Distinct(cols ...field.Expr) IQrtzJobDetailDo
	Omit(cols ...field.Expr) IQrtzJobDetailDo
	Join(table schema.Tabler, on ...field.Expr) IQrtzJobDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzJobDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrtzJobDetailDo
	Group(cols ...field.Expr) IQrtzJobDetailDo
	Having(conds ...gen.Condition) IQrtzJobDetailDo
	Limit(limit int) IQrtzJobDetailDo
	Offset(offset int) IQrtzJobDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzJobDetailDo
	Unscoped() IQrtzJobDetailDo
	Create(values ...*model.QrtzJobDetail) error
	CreateInBatches(values []*model.QrtzJobDetail, batchSize int) error
	Save(values ...*model.QrtzJobDetail) error
	First() (*model.QrtzJobDetail, error)
	Take() (*model.QrtzJobDetail, error)
	Last() (*model.QrtzJobDetail, error)
	Find() ([]*model.QrtzJobDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzJobDetail, err error)
	FindInBatches(result *[]*model.QrtzJobDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrtzJobDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrtzJobDetailDo
	Assign(attrs ...field.AssignExpr) IQrtzJobDetailDo
	Joins(fields ...field.RelationField) IQrtzJobDetailDo
	Preload(fields ...field.RelationField) IQrtzJobDetailDo
	FirstOrInit() (*model.QrtzJobDetail, error)
	FirstOrCreate() (*model.QrtzJobDetail, error)
	FindByPage(offset int, limit int) (result []*model.QrtzJobDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrtzJobDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrtzJobDetailDo) Debug() IQrtzJobDetailDo {
	return q.withDO(q.DO.Debug())
}

func (q qrtzJobDetailDo) WithContext(ctx context.Context) IQrtzJobDetailDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrtzJobDetailDo) ReadDB() IQrtzJobDetailDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrtzJobDetailDo) WriteDB() IQrtzJobDetailDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrtzJobDetailDo) Session(config *gorm.Session) IQrtzJobDetailDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrtzJobDetailDo) Clauses(conds ...clause.Expression) IQrtzJobDetailDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrtzJobDetailDo) Returning(value interface{}, columns ...string) IQrtzJobDetailDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrtzJobDetailDo) Not(conds ...gen.Condition) IQrtzJobDetailDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrtzJobDetailDo) Or(conds ...gen.Condition) IQrtzJobDetailDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrtzJobDetailDo) Select(conds ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrtzJobDetailDo) Where(conds ...gen.Condition) IQrtzJobDetailDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrtzJobDetailDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IQrtzJobDetailDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q qrtzJobDetailDo) Order(conds ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrtzJobDetailDo) Distinct(cols ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrtzJobDetailDo) Omit(cols ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrtzJobDetailDo) Join(table schema.Tabler, on ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrtzJobDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrtzJobDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrtzJobDetailDo) Group(cols ...field.Expr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrtzJobDetailDo) Having(conds ...gen.Condition) IQrtzJobDetailDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrtzJobDetailDo) Limit(limit int) IQrtzJobDetailDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrtzJobDetailDo) Offset(offset int) IQrtzJobDetailDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrtzJobDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzJobDetailDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrtzJobDetailDo) Unscoped() IQrtzJobDetailDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrtzJobDetailDo) Create(values ...*model.QrtzJobDetail) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrtzJobDetailDo) CreateInBatches(values []*model.QrtzJobDetail, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrtzJobDetailDo) Save(values ...*model.QrtzJobDetail) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrtzJobDetailDo) First() (*model.QrtzJobDetail, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzJobDetail), nil
	}
}

func (q qrtzJobDetailDo) Take() (*model.QrtzJobDetail, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzJobDetail), nil
	}
}

func (q qrtzJobDetailDo) Last() (*model.QrtzJobDetail, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzJobDetail), nil
	}
}

func (q qrtzJobDetailDo) Find() ([]*model.QrtzJobDetail, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrtzJobDetail), err
}

func (q qrtzJobDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzJobDetail, err error) {
	buf := make([]*model.QrtzJobDetail, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrtzJobDetailDo) FindInBatches(result *[]*model.QrtzJobDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrtzJobDetailDo) Attrs(attrs ...field.AssignExpr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrtzJobDetailDo) Assign(attrs ...field.AssignExpr) IQrtzJobDetailDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrtzJobDetailDo) Joins(fields ...field.RelationField) IQrtzJobDetailDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrtzJobDetailDo) Preload(fields ...field.RelationField) IQrtzJobDetailDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrtzJobDetailDo) FirstOrInit() (*model.QrtzJobDetail, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzJobDetail), nil
	}
}

func (q qrtzJobDetailDo) FirstOrCreate() (*model.QrtzJobDetail, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzJobDetail), nil
	}
}

func (q qrtzJobDetailDo) FindByPage(offset int, limit int) (result []*model.QrtzJobDetail, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrtzJobDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrtzJobDetailDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrtzJobDetailDo) Delete(models ...*model.QrtzJobDetail) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrtzJobDetailDo) withDO(do gen.Dao) *qrtzJobDetailDo {
	q.DO = *do.(*gen.DO)
	return q
}
