// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.

package service

import (
	"context"
	"testgggorm/config"
	"testgggorm/dto"
	"testgggorm/model"
	"testgggorm/query"

	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/database"
	paginate "github.com/unionj-cloud/go-doudou/v2/toolkit/pagination/gorm"

	pb "testgggorm/transport/grpc"

	"github.com/golang/protobuf/ptypes/wrappers"
	jsoncopier "github.com/unionj-cloud/go-doudou/v2/toolkit/copier"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/emptypb"
)

func init() {
	query.SetDefault(database.Db)
}

var _ Testgggorm = (*TestgggormImpl)(nil)

var _ pb.TestgggormServiceServer = (*TestgggormImpl)(nil)

type TestgggormImpl struct {
	pb.UnimplementedTestgggormServiceServer

	conf *config.Config
	pg   *paginate.Pagination
	q    *query.Query
}

func NewTestgggorm(conf *config.Config) *TestgggormImpl {
	pg := paginate.New(&paginate.Config{
		FieldSelectorEnabled: true,
	})
	return &TestgggormImpl{
		conf: conf,
		pg:   pg,
		q:    query.Q,
	}
}

func (receiver TestgggormImpl) clone(q *query.Query) *TestgggormImpl {
	receiver.q = q
	return &receiver
}

// PostTJjj mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTJjj(ctx context.Context, body dto.TJjj) (data int32, err error) {
	m := model.TJjj(body)
	u := receiver.q.TJjj
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTJjjs mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTJjjs(ctx context.Context, body []dto.TJjj) (data []int32, err error) {
	list := make([]*model.TJjj, 0, len(body))
	for _, item := range body {
		m := model.TJjj(item)
		list = append(list, &m)
	}
	u := receiver.q.TJjj
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTJjj_Id mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTJjj_Id(ctx context.Context, id int32) (data dto.TJjj, err error) {
	u := receiver.q.TJjj
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TJjj{}, errors.WithStack(err)
	}
	return dto.TJjj(*m), nil
}

// PutTJjj mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTJjj(ctx context.Context, body dto.TJjj) (err error) {
	m := model.TJjj(body)
	u := receiver.q.TJjj
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTJjj_Id mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTJjj_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TJjj
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTJjjs mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTJjjs(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TJjj{})).Request(paginate.Parameter(parameter)).Response(&[]model.TJjj{})
	data = dto.Page(paginated)
	return
}

// PostTPost mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTPost(ctx context.Context, body dto.TPost) (data int32, err error) {
	m := model.TPost(body)
	u := receiver.q.TPost
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTPosts mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTPosts(ctx context.Context, body []dto.TPost) (data []int32, err error) {
	list := make([]*model.TPost, 0, len(body))
	for _, item := range body {
		m := model.TPost(item)
		list = append(list, &m)
	}
	u := receiver.q.TPost
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTPost_Id mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTPost_Id(ctx context.Context, id int32) (data dto.TPost, err error) {
	u := receiver.q.TPost
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TPost{}, errors.WithStack(err)
	}
	return dto.TPost(*m), nil
}

// PutTPost mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTPost(ctx context.Context, body dto.TPost) (err error) {
	m := model.TPost(body)
	u := receiver.q.TPost
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTPost_Id mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTPost_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TPost
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTPosts mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTPosts(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TPost{})).Request(paginate.Parameter(parameter)).Response(&[]model.TPost{})
	data = dto.Page(paginated)
	return
}

// PostTUser mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTUser(ctx context.Context, body dto.TUser) (data int32, err error) {
	m := model.TUser(body)
	u := receiver.q.TUser
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTUsers mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTUsers(ctx context.Context, body []dto.TUser) (data []int32, err error) {
	list := make([]*model.TUser, 0, len(body))
	for _, item := range body {
		m := model.TUser(item)
		list = append(list, &m)
	}
	u := receiver.q.TUser
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTUser_Id mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTUser_Id(ctx context.Context, id int32) (data dto.TUser, err error) {
	u := receiver.q.TUser
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TUser{}, errors.WithStack(err)
	}
	return dto.TUser(*m), nil
}

// PutTUser mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTUser(ctx context.Context, body dto.TUser) (err error) {
	m := model.TUser(body)
	u := receiver.q.TUser
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTUser_Id mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTUser_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TUser
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTUsers mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTUsers(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TUser{})).Request(paginate.Parameter(parameter)).Response(&[]model.TUser{})
	data = dto.Page(paginated)
	return
}

// PostTWordCloudTask mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTWordCloudTask(ctx context.Context, body dto.TWordCloudTask) (data int32, err error) {
	m := model.TWordCloudTask(body)
	u := receiver.q.TWordCloudTask
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTWordCloudTasks mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTWordCloudTasks(ctx context.Context, body []dto.TWordCloudTask) (data []int32, err error) {
	list := make([]*model.TWordCloudTask, 0, len(body))
	for _, item := range body {
		m := model.TWordCloudTask(item)
		list = append(list, &m)
	}
	u := receiver.q.TWordCloudTask
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTWordCloudTask_Id mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTWordCloudTask_Id(ctx context.Context, id int32) (data dto.TWordCloudTask, err error) {
	u := receiver.q.TWordCloudTask
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TWordCloudTask{}, errors.WithStack(err)
	}
	return dto.TWordCloudTask(*m), nil
}

// PutTWordCloudTask mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTWordCloudTask(ctx context.Context, body dto.TWordCloudTask) (err error) {
	m := model.TWordCloudTask(body)
	u := receiver.q.TWordCloudTask
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTWordCloudTask_Id mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTWordCloudTask_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TWordCloudTask
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTWordCloudTasks mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTWordCloudTasks(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TWordCloudTask{})).Request(paginate.Parameter(parameter)).Response(&[]model.TWordCloudTask{})
	data = dto.Page(paginated)
	return
}

// PostTAuthor mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTAuthor(ctx context.Context, body dto.TAuthor) (data int32, err error) {
	m := model.TAuthor(body)
	u := receiver.q.TAuthor
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTAuthors mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTAuthors(ctx context.Context, body []dto.TAuthor) (data []int32, err error) {
	list := make([]*model.TAuthor, 0, len(body))
	for _, item := range body {
		m := model.TAuthor(item)
		list = append(list, &m)
	}
	u := receiver.q.TAuthor
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTAuthor_Id mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTAuthor_Id(ctx context.Context, id int32) (data dto.TAuthor, err error) {
	u := receiver.q.TAuthor
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TAuthor{}, errors.WithStack(err)
	}
	return dto.TAuthor(*m), nil
}

// PutTAuthor mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTAuthor(ctx context.Context, body dto.TAuthor) (err error) {
	m := model.TAuthor(body)
	u := receiver.q.TAuthor
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTAuthor_Id mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTAuthor_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TAuthor
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTAuthors mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTAuthors(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TAuthor{})).Request(paginate.Parameter(parameter)).Response(&[]model.TAuthor{})
	data = dto.Page(paginated)
	return
}

// PostTClient mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTClient(ctx context.Context, body dto.TClient) (data int32, err error) {
	m := model.TClient(body)
	u := receiver.q.TClient
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTClients mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTClients(ctx context.Context, body []dto.TClient) (data []int32, err error) {
	list := make([]*model.TClient, 0, len(body))
	for _, item := range body {
		m := model.TClient(item)
		list = append(list, &m)
	}
	u := receiver.q.TClient
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTClient_Id mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTClient_Id(ctx context.Context, id int32) (data dto.TClient, err error) {
	u := receiver.q.TClient
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TClient{}, errors.WithStack(err)
	}
	return dto.TClient(*m), nil
}

// PutTClient mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTClient(ctx context.Context, body dto.TClient) (err error) {
	m := model.TClient(body)
	u := receiver.q.TClient
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTClient_Id mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTClient_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TClient
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTClients mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTClients(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TClient{})).Request(paginate.Parameter(parameter)).Response(&[]model.TClient{})
	data = dto.Page(paginated)
	return
}

// PostTDept mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTDept(ctx context.Context, body dto.TDept) (data int32, err error) {
	m := model.TDept(body)
	u := receiver.q.TDept
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTDepts mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTDepts(ctx context.Context, body []dto.TDept) (data []int32, err error) {
	list := make([]*model.TDept, 0, len(body))
	for _, item := range body {
		m := model.TDept(item)
		list = append(list, &m)
	}
	u := receiver.q.TDept
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTDept_Id mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTDept_Id(ctx context.Context, id int32) (data dto.TDept, err error) {
	u := receiver.q.TDept
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TDept{}, errors.WithStack(err)
	}
	return dto.TDept(*m), nil
}

// PutTDept mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTDept(ctx context.Context, body dto.TDept) (err error) {
	m := model.TDept(body)
	u := receiver.q.TDept
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTDept_Id mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTDept_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TDept
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTDepts mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTDepts(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TDept{})).Request(paginate.Parameter(parameter)).Response(&[]model.TDept{})
	data = dto.Page(paginated)
	return
}

// PostTInvalidToken mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTInvalidToken(ctx context.Context, body dto.TInvalidToken) (data int32, err error) {
	m := model.TInvalidToken(body)
	u := receiver.q.TInvalidToken
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostTInvalidTokens mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTInvalidTokens(ctx context.Context, body []dto.TInvalidToken) (data []int32, err error) {
	list := make([]*model.TInvalidToken, 0, len(body))
	for _, item := range body {
		m := model.TInvalidToken(item)
		list = append(list, &m)
	}
	u := receiver.q.TInvalidToken
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetTInvalidToken_Id mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTInvalidToken_Id(ctx context.Context, id int32) (data dto.TInvalidToken, err error) {
	u := receiver.q.TInvalidToken
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.TInvalidToken{}, errors.WithStack(err)
	}
	return dto.TInvalidToken(*m), nil
}

// PutTInvalidToken mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTInvalidToken(ctx context.Context, body dto.TInvalidToken) (err error) {
	m := model.TInvalidToken(body)
	u := receiver.q.TInvalidToken
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteTInvalidToken_Id mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTInvalidToken_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.TInvalidToken
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetTInvalidTokens mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTInvalidTokens(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TInvalidToken{})).Request(paginate.Parameter(parameter)).Response(&[]model.TInvalidToken{})
	data = dto.Page(paginated)
	return
}

// TODO gorm数据库事务用法示例
func (receiver *TestgggormImpl) TAuthorPosts(ctx context.Context, body dto.SaveAuthorReqDTO) (err error) {
	err = errors.WithStack(receiver.q.Transaction(func(tx *query.Query) error {
		instance := receiver.clone(tx)
		_, err1 := instance.PostTAuthor(ctx, body.TAuthor)
		if err1 != nil {
			return err1
		}
		_, err1 = instance.PostTPosts(ctx, body.Posts)
		if err1 != nil {
			return err1
		}
		return nil
	}))
	return
}

// PostTDeptRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTDeptRpc(ctx context.Context, request *pb.TDept) (*pb.PostTDeptRpcResponse, error) {
	var body dto.TDept
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTDept(ctx, body)
	return &pb.PostTDeptRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTDeptsRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTDeptsRpc(ctx context.Context, request *pb.PostTDeptsRpcRequest) (*pb.PostTDeptsRpcResponse, error) {
	list := make([]dto.TDept, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TDept
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTDepts(ctx, list)
	return &pb.PostTDeptsRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTDeptIdRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTDeptIdRpc(ctx context.Context, request *pb.GetTDeptIdRpcRequest) (*pb.TDept, error) {
	data, err := receiver.GetTDept_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TDept
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTDeptRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTDeptRpc(ctx context.Context, request *pb.TDept) (*emptypb.Empty, error) {
	var body dto.TDept
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTDept(ctx, body))
}

// DeleteTDeptIdRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTDeptIdRpc(ctx context.Context, request *pb.DeleteTDeptIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTDept_Id(ctx, request.Id))
}

// GetTDeptsRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTDeptsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTDepts(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TDept(item.(model.TDept))
		var msg pb.TDept
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTInvalidTokenRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTInvalidTokenRpc(ctx context.Context, request *pb.TInvalidToken) (*pb.PostTInvalidTokenRpcResponse, error) {
	var body dto.TInvalidToken
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTInvalidToken(ctx, body)
	return &pb.PostTInvalidTokenRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTInvalidTokensRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTInvalidTokensRpc(ctx context.Context, request *pb.PostTInvalidTokensRpcRequest) (*pb.PostTInvalidTokensRpcResponse, error) {
	list := make([]dto.TInvalidToken, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TInvalidToken
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTInvalidTokens(ctx, list)
	return &pb.PostTInvalidTokensRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTInvalidTokenIdRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTInvalidTokenIdRpc(ctx context.Context, request *pb.GetTInvalidTokenIdRpcRequest) (*pb.TInvalidToken, error) {
	data, err := receiver.GetTInvalidToken_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TInvalidToken
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTInvalidTokenRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTInvalidTokenRpc(ctx context.Context, request *pb.TInvalidToken) (*emptypb.Empty, error) {
	var body dto.TInvalidToken
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTInvalidToken(ctx, body))
}

// DeleteTInvalidTokenIdRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTInvalidTokenIdRpc(ctx context.Context, request *pb.DeleteTInvalidTokenIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTInvalidToken_Id(ctx, request.Id))
}

// GetTInvalidTokensRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTInvalidTokensRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTInvalidTokens(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TInvalidToken(item.(model.TInvalidToken))
		var msg pb.TInvalidToken
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTJjjRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTJjjRpc(ctx context.Context, request *pb.TJjj) (*pb.PostTJjjRpcResponse, error) {
	var body dto.TJjj
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTJjj(ctx, body)
	return &pb.PostTJjjRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTJjjsRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTJjjsRpc(ctx context.Context, request *pb.PostTJjjsRpcRequest) (*pb.PostTJjjsRpcResponse, error) {
	list := make([]dto.TJjj, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TJjj
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTJjjs(ctx, list)
	return &pb.PostTJjjsRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTJjjIdRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTJjjIdRpc(ctx context.Context, request *pb.GetTJjjIdRpcRequest) (*pb.TJjj, error) {
	data, err := receiver.GetTJjj_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TJjj
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTJjjRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTJjjRpc(ctx context.Context, request *pb.TJjj) (*emptypb.Empty, error) {
	var body dto.TJjj
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTJjj(ctx, body))
}

// DeleteTJjjIdRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTJjjIdRpc(ctx context.Context, request *pb.DeleteTJjjIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTJjj_Id(ctx, request.Id))
}

// GetTJjjsRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTJjjsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTJjjs(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TJjj(item.(model.TJjj))
		var msg pb.TJjj
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTPostRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTPostRpc(ctx context.Context, request *pb.TPost) (*pb.PostTPostRpcResponse, error) {
	var body dto.TPost
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTPost(ctx, body)
	return &pb.PostTPostRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTPostsRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTPostsRpc(ctx context.Context, request *pb.PostTPostsRpcRequest) (*pb.PostTPostsRpcResponse, error) {
	list := make([]dto.TPost, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TPost
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTPosts(ctx, list)
	return &pb.PostTPostsRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTPostIdRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTPostIdRpc(ctx context.Context, request *pb.GetTPostIdRpcRequest) (*pb.TPost, error) {
	data, err := receiver.GetTPost_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TPost
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTPostRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTPostRpc(ctx context.Context, request *pb.TPost) (*emptypb.Empty, error) {
	var body dto.TPost
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTPost(ctx, body))
}

// DeleteTPostIdRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTPostIdRpc(ctx context.Context, request *pb.DeleteTPostIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTPost_Id(ctx, request.Id))
}

// GetTPostsRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTPostsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTPosts(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TPost(item.(model.TPost))
		var msg pb.TPost
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTUserRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTUserRpc(ctx context.Context, request *pb.TUser) (*pb.PostTUserRpcResponse, error) {
	var body dto.TUser
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTUser(ctx, body)
	return &pb.PostTUserRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTUsersRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTUsersRpc(ctx context.Context, request *pb.PostTUsersRpcRequest) (*pb.PostTUsersRpcResponse, error) {
	list := make([]dto.TUser, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TUser
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTUsers(ctx, list)
	return &pb.PostTUsersRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTUserIdRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTUserIdRpc(ctx context.Context, request *pb.GetTUserIdRpcRequest) (*pb.TUser, error) {
	data, err := receiver.GetTUser_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TUser
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTUserRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTUserRpc(ctx context.Context, request *pb.TUser) (*emptypb.Empty, error) {
	var body dto.TUser
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTUser(ctx, body))
}

// DeleteTUserIdRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTUserIdRpc(ctx context.Context, request *pb.DeleteTUserIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTUser_Id(ctx, request.Id))
}

// GetTUsersRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTUsersRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTUsers(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TUser(item.(model.TUser))
		var msg pb.TUser
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTWordCloudTaskRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTWordCloudTaskRpc(ctx context.Context, request *pb.TWordCloudTask) (*pb.PostTWordCloudTaskRpcResponse, error) {
	var body dto.TWordCloudTask
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTWordCloudTask(ctx, body)
	return &pb.PostTWordCloudTaskRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTWordCloudTasksRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTWordCloudTasksRpc(ctx context.Context, request *pb.PostTWordCloudTasksRpcRequest) (*pb.PostTWordCloudTasksRpcResponse, error) {
	list := make([]dto.TWordCloudTask, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TWordCloudTask
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTWordCloudTasks(ctx, list)
	return &pb.PostTWordCloudTasksRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTWordCloudTaskIdRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTWordCloudTaskIdRpc(ctx context.Context, request *pb.GetTWordCloudTaskIdRpcRequest) (*pb.TWordCloudTask, error) {
	data, err := receiver.GetTWordCloudTask_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TWordCloudTask
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTWordCloudTaskRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTWordCloudTaskRpc(ctx context.Context, request *pb.TWordCloudTask) (*emptypb.Empty, error) {
	var body dto.TWordCloudTask
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTWordCloudTask(ctx, body))
}

// DeleteTWordCloudTaskIdRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTWordCloudTaskIdRpc(ctx context.Context, request *pb.DeleteTWordCloudTaskIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTWordCloudTask_Id(ctx, request.Id))
}

// GetTWordCloudTasksRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTWordCloudTasksRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTWordCloudTasks(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TWordCloudTask(item.(model.TWordCloudTask))
		var msg pb.TWordCloudTask
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTAuthorRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTAuthorRpc(ctx context.Context, request *pb.TAuthor) (*pb.PostTAuthorRpcResponse, error) {
	var body dto.TAuthor
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTAuthor(ctx, body)
	return &pb.PostTAuthorRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTAuthorsRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTAuthorsRpc(ctx context.Context, request *pb.PostTAuthorsRpcRequest) (*pb.PostTAuthorsRpcResponse, error) {
	list := make([]dto.TAuthor, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TAuthor
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTAuthors(ctx, list)
	return &pb.PostTAuthorsRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTAuthorIdRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTAuthorIdRpc(ctx context.Context, request *pb.GetTAuthorIdRpcRequest) (*pb.TAuthor, error) {
	data, err := receiver.GetTAuthor_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TAuthor
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTAuthorRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTAuthorRpc(ctx context.Context, request *pb.TAuthor) (*emptypb.Empty, error) {
	var body dto.TAuthor
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTAuthor(ctx, body))
}

// DeleteTAuthorIdRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTAuthorIdRpc(ctx context.Context, request *pb.DeleteTAuthorIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTAuthor_Id(ctx, request.Id))
}

// GetTAuthorsRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTAuthorsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTAuthors(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TAuthor(item.(model.TAuthor))
		var msg pb.TAuthor
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTClientRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTClientRpc(ctx context.Context, request *pb.TClient) (*pb.PostTClientRpcResponse, error) {
	var body dto.TClient
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTClient(ctx, body)
	return &pb.PostTClientRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// PostTClientsRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PostTClientsRpc(ctx context.Context, request *pb.PostTClientsRpcRequest) (*pb.PostTClientsRpcResponse, error) {
	list := make([]dto.TClient, 0, len(request.Body))
	for _, item := range request.Body {
		var d dto.TClient
		jsoncopier.DeepCopy(item, &d)
		list = append(list, d)
	}
	data, err := receiver.PostTClients(ctx, list)
	return &pb.PostTClientsRpcResponse{
		Data: data,
	}, errors.WithStack(err)
}

// GetTClientIdRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTClientIdRpc(ctx context.Context, request *pb.GetTClientIdRpcRequest) (*pb.TClient, error) {
	data, err := receiver.GetTClient_Id(ctx, request.Id)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	var ret pb.TClient
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTClientRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) PutTClientRpc(ctx context.Context, request *pb.TClient) (*emptypb.Empty, error) {
	var body dto.TClient
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errors.WithStack(receiver.PutTClient(ctx, body))
}

// DeleteTClientIdRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) DeleteTClientIdRpc(ctx context.Context, request *pb.DeleteTClientIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errors.WithStack(receiver.DeleteTClient_Id(ctx, request.Id))
}

// GetTClientsRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestgggormImpl) GetTClientsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errors.WithStack(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTClients(ctx, parameter)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		d := dto.TClient(item.(model.TClient))
		var msg pb.TClient
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errors.WithStack(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}
