/**
* Generated by go-doudou v2.0.3.
* You can edit it as your need.
 */
package main

import (
	"context"
	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/registry/utils"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/zlogger"
	pb "go-doudou-tutorials/bistream/transport/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials/insecure"
	"google.golang.org/grpc/status"
	"math/rand"
	"os"
	"time"
)

func main() {
	serverAddr := "localhost:50051"
	clientName := "client"
	port := "50051"
	if len(os.Args) > 2 {
		clientName = os.Args[1]
		port = os.Args[2]
	}
	var stream pb.BistreamService_RegisterRpcClient
	connected := false
	handleErr := func(err error) {
		s, ok := status.FromError(err)
		if !ok {
			if !errors.Is(err, context.DeadlineExceeded) {
				zlogger.Panic().Err(err).Msg("")
			}
		} else {
			if s.Code() != codes.Unavailable {
				zlogger.Panic().Err(err).Msg("")
			}
		}
		connected = false
		zlogger.Error().Err(err).Msg(s.Code().String())
		time.Sleep(3 * time.Second)
	}
	var err error
	rand.Seed(time.Now().UnixNano())
	for {
		time.Sleep(time.Duration(200+rand.Intn(100)) * time.Millisecond)
		if !connected {
			var grpcConn *grpc.ClientConn
			err = func() error {
				ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
				defer cancel()
				grpcConn, err = grpc.DialContext(ctx, serverAddr, grpc.WithTransportCredentials(insecure.NewCredentials()))
				if err != nil {
					handleErr(err)
				}
				return err
			}()
			if err != nil {
				continue
			}
			client := pb.NewBistreamServiceClient(grpcConn)
			stream, err = client.RegisterRpc(context.Background())
			if err != nil {
				handleErr(err)
				continue
			}
			connected = true
			zlogger.Info().Msgf("connect to surveyor server:", serverAddr, " ok!")
		}

		err := stream.Send(&pb.Service{
			Name:     clientName,
			RpcAddr:  utils.GetRegisterHost() + ":" + port,
			RestAddr: "",
			Weight:   1,
		})
		if err != nil {
			handleErr(err)
			continue
		}

		_, err = stream.Recv()
		if err != nil {
			handleErr(err)
			continue
		}
		//zlogger.Info().Msgf("%#v", service)
	}
}
