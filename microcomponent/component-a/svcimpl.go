/**
* Generated by go-doudou v2.1.4.
* You can edit it as your need.
 */
package service

import (
	"context"
	"fmt"
	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/zlogger"

	"github.com/brianvoe/gofakeit/v6"
	"github.com/wubin1989/microcomponent/component-a/config"
	"github.com/wubin1989/microcomponent/component-a/dto"
	"google.golang.org/protobuf/types/known/emptypb"

	pb "github.com/wubin1989/microcomponent/component-a/transport/grpc"
	bpb "github.com/wubin1989/microcomponent/component-b/transport/grpc"
)

var _ ComponentA = (*ComponentAImpl)(nil)

var _ pb.ComponentAServiceServer = (*ComponentAImpl)(nil)

type ComponentAImpl struct {
	pb.UnimplementedComponentAServiceServer

	conf             *config.Config
	componentBClient bpb.ComponentBServiceClient
}

func (receiver *ComponentAImpl) PostUser(ctx context.Context, user dto.GddUser) (data int32, err error) {
	var _result struct {
		Data int32
	}
	_ = gofakeit.Struct(&_result)
	return _result.Data, nil
}
func (receiver *ComponentAImpl) GetUser_Id(ctx context.Context, id int32) (data dto.GddUser, err error) {
	resp, err := receiver.componentBClient.GreetingRpc(ctx, &bpb.GreetingRpcRequest{
		Msg: fmt.Sprint(id),
	})
	if err != nil {
		return dto.GddUser{}, errors.WithStack(err)
	}
	zlogger.Info().Msg(resp.Reply)
	return
}
func (receiver *ComponentAImpl) PutUser(ctx context.Context, user dto.GddUser) (re error) {
	var _result struct {
	}
	_ = gofakeit.Struct(&_result)
	return nil
}
func (receiver *ComponentAImpl) DeleteUser_Id(ctx context.Context, id int32) (re error) {
	var _result struct {
	}
	_ = gofakeit.Struct(&_result)
	return nil
}
func (receiver *ComponentAImpl) GetUsers(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	var _result struct {
		Data dto.Page
	}
	_ = gofakeit.Struct(&_result)
	return _result.Data, nil
}

func NewComponentA(conf *config.Config, componentBClient bpb.ComponentBServiceClient) *ComponentAImpl {
	return &ComponentAImpl{
		conf:             conf,
		componentBClient: componentBClient,
	}
}

func (receiver *ComponentAImpl) PostUserRpc(ctx context.Context, request *pb.GddUser) (*pb.PostUserRpcResponse, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentAImpl) GetUserIdRpc(ctx context.Context, request *pb.GetUserIdRpcRequest) (*pb.GddUser, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentAImpl) PutUserRpc(ctx context.Context, request *pb.GddUser) (*emptypb.Empty, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentAImpl) DeleteUserIdRpc(ctx context.Context, request *pb.DeleteUserIdRpcRequest) (*emptypb.Empty, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentAImpl) GetUsersRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	//TODO implement me
	panic("implement me")
}
