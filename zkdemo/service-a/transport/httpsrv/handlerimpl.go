/**
* Generated by go-doudou v2.0.6.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	"net/http"
	service "service-a"
	"service-a/dto"

	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"
)

type ServiceAHandlerImpl struct {
	serviceA service.ServiceA
}

func (receiver *ServiceAHandlerImpl) GetUserById(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx    context.Context
		userId int
		user   dto.UserDto
		err    error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _, exists := _req.Form["userId"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("userId")); _err != nil {
			rest.HandleBadRequestErr(_err)
		} else {
			userId = casted
		}
		if _err := rest.ValidateVar(userId, "", "userId"); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	} else {
		rest.HandleBadRequestErr(errors.New("missing parameter userId"))
	}
	user, err = receiver.serviceA.GetUserById(
		ctx,
		userId,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		User dto.UserDto `json:"user"`
	}{
		User: user,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewServiceAHandler(serviceA service.ServiceA) ServiceAHandler {
	return &ServiceAHandlerImpl{
		serviceA,
	}
}

func (receiver *ServiceAHandlerImpl) GetRpcUserById(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx    context.Context
		userId int
		user   dto.UserDto
		err    error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _, exists := _req.Form["userId"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("userId")); _err != nil {
			rest.HandleBadRequestErr(_err)
		} else {
			userId = casted
		}
		if _err := rest.ValidateVar(userId, "", "userId"); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	} else {
		rest.HandleBadRequestErr(errors.New("missing parameter userId"))
	}
	user, err = receiver.serviceA.GetRpcUserById(
		ctx,
		userId,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		User dto.UserDto `json:"user"`
	}{
		User: user,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
