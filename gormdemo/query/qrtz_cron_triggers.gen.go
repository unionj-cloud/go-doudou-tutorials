// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormdemo/model"
)

func newQrtzCronTrigger(db *gorm.DB, opts ...gen.DOOption) qrtzCronTrigger {
	_qrtzCronTrigger := qrtzCronTrigger{}

	_qrtzCronTrigger.qrtzCronTriggerDo.UseDB(db, opts...)
	_qrtzCronTrigger.qrtzCronTriggerDo.UseModel(&model.QrtzCronTrigger{})

	tableName := _qrtzCronTrigger.qrtzCronTriggerDo.TableName()
	_qrtzCronTrigger.ALL = field.NewAsterisk(tableName)
	_qrtzCronTrigger.SCHEDNAME = field.NewString(tableName, "SCHED_NAME")
	_qrtzCronTrigger.TRIGGERNAME = field.NewString(tableName, "TRIGGER_NAME")
	_qrtzCronTrigger.TRIGGERGROUP = field.NewString(tableName, "TRIGGER_GROUP")
	_qrtzCronTrigger.CRONEXPRESSION = field.NewString(tableName, "CRON_EXPRESSION")
	_qrtzCronTrigger.TIMEZONEID = field.NewString(tableName, "TIME_ZONE_ID")

	_qrtzCronTrigger.fillFieldMap()

	return _qrtzCronTrigger
}

type qrtzCronTrigger struct {
	qrtzCronTriggerDo qrtzCronTriggerDo

	ALL            field.Asterisk
	SCHEDNAME      field.String
	TRIGGERNAME    field.String
	TRIGGERGROUP   field.String
	CRONEXPRESSION field.String
	TIMEZONEID     field.String

	fieldMap map[string]field.Expr
}

func (q qrtzCronTrigger) Table(newTableName string) *qrtzCronTrigger {
	q.qrtzCronTriggerDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrtzCronTrigger) As(alias string) *qrtzCronTrigger {
	q.qrtzCronTriggerDo.DO = *(q.qrtzCronTriggerDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrtzCronTrigger) updateTableName(table string) *qrtzCronTrigger {
	q.ALL = field.NewAsterisk(table)
	q.SCHEDNAME = field.NewString(table, "SCHED_NAME")
	q.TRIGGERNAME = field.NewString(table, "TRIGGER_NAME")
	q.TRIGGERGROUP = field.NewString(table, "TRIGGER_GROUP")
	q.CRONEXPRESSION = field.NewString(table, "CRON_EXPRESSION")
	q.TIMEZONEID = field.NewString(table, "TIME_ZONE_ID")

	q.fillFieldMap()

	return q
}

func (q *qrtzCronTrigger) WithContext(ctx context.Context) IQrtzCronTriggerDo {
	return q.qrtzCronTriggerDo.WithContext(ctx)
}

func (q qrtzCronTrigger) TableName() string { return q.qrtzCronTriggerDo.TableName() }

func (q qrtzCronTrigger) Alias() string { return q.qrtzCronTriggerDo.Alias() }

func (q qrtzCronTrigger) Columns(cols ...field.Expr) gen.Columns {
	return q.qrtzCronTriggerDo.Columns(cols...)
}

func (q *qrtzCronTrigger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrtzCronTrigger) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["SCHED_NAME"] = q.SCHEDNAME
	q.fieldMap["TRIGGER_NAME"] = q.TRIGGERNAME
	q.fieldMap["TRIGGER_GROUP"] = q.TRIGGERGROUP
	q.fieldMap["CRON_EXPRESSION"] = q.CRONEXPRESSION
	q.fieldMap["TIME_ZONE_ID"] = q.TIMEZONEID
}

func (q qrtzCronTrigger) clone(db *gorm.DB) qrtzCronTrigger {
	q.qrtzCronTriggerDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrtzCronTrigger) replaceDB(db *gorm.DB) qrtzCronTrigger {
	q.qrtzCronTriggerDo.ReplaceDB(db)
	return q
}

type qrtzCronTriggerDo struct{ gen.DO }

type IQrtzCronTriggerDo interface {
	gen.SubQuery
	Debug() IQrtzCronTriggerDo
	WithContext(ctx context.Context) IQrtzCronTriggerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrtzCronTriggerDo
	WriteDB() IQrtzCronTriggerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrtzCronTriggerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrtzCronTriggerDo
	Not(conds ...gen.Condition) IQrtzCronTriggerDo
	Or(conds ...gen.Condition) IQrtzCronTriggerDo
	Select(conds ...field.Expr) IQrtzCronTriggerDo
	Where(conds ...gen.Condition) IQrtzCronTriggerDo
	Order(conds ...field.Expr) IQrtzCronTriggerDo
	Distinct(cols ...field.Expr) IQrtzCronTriggerDo
	Omit(cols ...field.Expr) IQrtzCronTriggerDo
	Join(table schema.Tabler, on ...field.Expr) IQrtzCronTriggerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzCronTriggerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrtzCronTriggerDo
	Group(cols ...field.Expr) IQrtzCronTriggerDo
	Having(conds ...gen.Condition) IQrtzCronTriggerDo
	Limit(limit int) IQrtzCronTriggerDo
	Offset(offset int) IQrtzCronTriggerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzCronTriggerDo
	Unscoped() IQrtzCronTriggerDo
	Create(values ...*model.QrtzCronTrigger) error
	CreateInBatches(values []*model.QrtzCronTrigger, batchSize int) error
	Save(values ...*model.QrtzCronTrigger) error
	First() (*model.QrtzCronTrigger, error)
	Take() (*model.QrtzCronTrigger, error)
	Last() (*model.QrtzCronTrigger, error)
	Find() ([]*model.QrtzCronTrigger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzCronTrigger, err error)
	FindInBatches(result *[]*model.QrtzCronTrigger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrtzCronTrigger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrtzCronTriggerDo
	Assign(attrs ...field.AssignExpr) IQrtzCronTriggerDo
	Joins(fields ...field.RelationField) IQrtzCronTriggerDo
	Preload(fields ...field.RelationField) IQrtzCronTriggerDo
	FirstOrInit() (*model.QrtzCronTrigger, error)
	FirstOrCreate() (*model.QrtzCronTrigger, error)
	FindByPage(offset int, limit int) (result []*model.QrtzCronTrigger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrtzCronTriggerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrtzCronTriggerDo) Debug() IQrtzCronTriggerDo {
	return q.withDO(q.DO.Debug())
}

func (q qrtzCronTriggerDo) WithContext(ctx context.Context) IQrtzCronTriggerDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrtzCronTriggerDo) ReadDB() IQrtzCronTriggerDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrtzCronTriggerDo) WriteDB() IQrtzCronTriggerDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrtzCronTriggerDo) Session(config *gorm.Session) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrtzCronTriggerDo) Clauses(conds ...clause.Expression) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrtzCronTriggerDo) Returning(value interface{}, columns ...string) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrtzCronTriggerDo) Not(conds ...gen.Condition) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrtzCronTriggerDo) Or(conds ...gen.Condition) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrtzCronTriggerDo) Select(conds ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrtzCronTriggerDo) Where(conds ...gen.Condition) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrtzCronTriggerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IQrtzCronTriggerDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q qrtzCronTriggerDo) Order(conds ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrtzCronTriggerDo) Distinct(cols ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrtzCronTriggerDo) Omit(cols ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrtzCronTriggerDo) Join(table schema.Tabler, on ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrtzCronTriggerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrtzCronTriggerDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrtzCronTriggerDo) Group(cols ...field.Expr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrtzCronTriggerDo) Having(conds ...gen.Condition) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrtzCronTriggerDo) Limit(limit int) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrtzCronTriggerDo) Offset(offset int) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrtzCronTriggerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrtzCronTriggerDo) Unscoped() IQrtzCronTriggerDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrtzCronTriggerDo) Create(values ...*model.QrtzCronTrigger) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrtzCronTriggerDo) CreateInBatches(values []*model.QrtzCronTrigger, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrtzCronTriggerDo) Save(values ...*model.QrtzCronTrigger) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrtzCronTriggerDo) First() (*model.QrtzCronTrigger, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCronTrigger), nil
	}
}

func (q qrtzCronTriggerDo) Take() (*model.QrtzCronTrigger, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCronTrigger), nil
	}
}

func (q qrtzCronTriggerDo) Last() (*model.QrtzCronTrigger, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCronTrigger), nil
	}
}

func (q qrtzCronTriggerDo) Find() ([]*model.QrtzCronTrigger, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrtzCronTrigger), err
}

func (q qrtzCronTriggerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzCronTrigger, err error) {
	buf := make([]*model.QrtzCronTrigger, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrtzCronTriggerDo) FindInBatches(result *[]*model.QrtzCronTrigger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrtzCronTriggerDo) Attrs(attrs ...field.AssignExpr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrtzCronTriggerDo) Assign(attrs ...field.AssignExpr) IQrtzCronTriggerDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrtzCronTriggerDo) Joins(fields ...field.RelationField) IQrtzCronTriggerDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrtzCronTriggerDo) Preload(fields ...field.RelationField) IQrtzCronTriggerDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrtzCronTriggerDo) FirstOrInit() (*model.QrtzCronTrigger, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCronTrigger), nil
	}
}

func (q qrtzCronTriggerDo) FirstOrCreate() (*model.QrtzCronTrigger, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCronTrigger), nil
	}
}

func (q qrtzCronTriggerDo) FindByPage(offset int, limit int) (result []*model.QrtzCronTrigger, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrtzCronTriggerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrtzCronTriggerDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrtzCronTriggerDo) Delete(models ...*model.QrtzCronTrigger) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrtzCronTriggerDo) withDO(do gen.Dao) *qrtzCronTriggerDo {
	q.DO = *do.(*gen.DO)
	return q
}
