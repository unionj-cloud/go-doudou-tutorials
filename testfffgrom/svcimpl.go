// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.

package service

import (
	"context"
	"testfffgrom/config"
	"testfffgrom/dto"
	"testfffgrom/model"
	"testfffgrom/query"

	"github.com/jinzhu/copier"
	"github.com/unionj-cloud/go-doudou/v2/framework/database"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/errorx"
	paginate "github.com/unionj-cloud/go-doudou/v2/toolkit/pagination/gorm"

	pb "testfffgrom/transport/grpc"

	"github.com/golang/protobuf/ptypes/wrappers"
	jsoncopier "github.com/unionj-cloud/go-doudou/v2/toolkit/copier"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/emptypb"
)

func init() {
	query.SetDefault(database.Db)
}

var _ Testfffgrom = (*TestfffgromImpl)(nil)

var _ pb.TestfffgromServiceServer = (*TestfffgromImpl)(nil)

type TestfffgromImpl struct {
	pb.UnimplementedTestfffgromServiceServer

	conf *config.Config
	pg   *paginate.Pagination
}

func NewTestfffgrom(conf *config.Config) *TestfffgromImpl {
	pg := paginate.New(&paginate.Config{
		FieldSelectorEnabled: true,
	})
	return &TestfffgromImpl{
		conf: conf,
		pg:   pg,
	}
}

// PostTAuthor mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTAuthor(ctx context.Context, body dto.TAuthor) (data int32, err error) {
	m := &model.TAuthor{}
	copier.Copy(m, body)
	u := query.TAuthor
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTAuthor_Id mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTAuthor_Id(ctx context.Context, id int32) (data dto.TAuthor, err error) {
	u := query.TAuthor
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTAuthor mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTAuthor(ctx context.Context, body dto.TAuthor) (err error) {
	m := &model.TAuthor{}
	copier.Copy(m, body)
	u := query.TAuthor
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTAuthor_Id mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTAuthor_Id(ctx context.Context, id int32) (err error) {
	u := query.TAuthor
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTAuthors mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTAuthors(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TAuthor{})).Request(paginate.Parameter(parameter)).Response(&[]model.TAuthor{})
	data = dto.Page(paginated)
	return
}

// PostTClient mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTClient(ctx context.Context, body dto.TClient) (data int32, err error) {
	m := &model.TClient{}
	copier.Copy(m, body)
	u := query.TClient
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTClient_Id mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTClient_Id(ctx context.Context, id int32) (data dto.TClient, err error) {
	u := query.TClient
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTClient mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTClient(ctx context.Context, body dto.TClient) (err error) {
	m := &model.TClient{}
	copier.Copy(m, body)
	u := query.TClient
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTClient_Id mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTClient_Id(ctx context.Context, id int32) (err error) {
	u := query.TClient
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTClients mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTClients(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TClient{})).Request(paginate.Parameter(parameter)).Response(&[]model.TClient{})
	data = dto.Page(paginated)
	return
}

// PostTDept mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTDept(ctx context.Context, body dto.TDept) (data int32, err error) {
	m := &model.TDept{}
	copier.Copy(m, body)
	u := query.TDept
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTDept_Id mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTDept_Id(ctx context.Context, id int32) (data dto.TDept, err error) {
	u := query.TDept
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTDept mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTDept(ctx context.Context, body dto.TDept) (err error) {
	m := &model.TDept{}
	copier.Copy(m, body)
	u := query.TDept
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTDept_Id mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTDept_Id(ctx context.Context, id int32) (err error) {
	u := query.TDept
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTDepts mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTDepts(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TDept{})).Request(paginate.Parameter(parameter)).Response(&[]model.TDept{})
	data = dto.Page(paginated)
	return
}

// PostTInvalidToken mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTInvalidToken(ctx context.Context, body dto.TInvalidToken) (data int32, err error) {
	m := &model.TInvalidToken{}
	copier.Copy(m, body)
	u := query.TInvalidToken
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTInvalidToken_Id mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTInvalidToken_Id(ctx context.Context, id int32) (data dto.TInvalidToken, err error) {
	u := query.TInvalidToken
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTInvalidToken mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTInvalidToken(ctx context.Context, body dto.TInvalidToken) (err error) {
	m := &model.TInvalidToken{}
	copier.Copy(m, body)
	u := query.TInvalidToken
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTInvalidToken_Id mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTInvalidToken_Id(ctx context.Context, id int32) (err error) {
	u := query.TInvalidToken
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTInvalidTokens mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTInvalidTokens(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TInvalidToken{})).Request(paginate.Parameter(parameter)).Response(&[]model.TInvalidToken{})
	data = dto.Page(paginated)
	return
}

// PostTPost mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTPost(ctx context.Context, body dto.TPost) (data int32, err error) {
	m := &model.TPost{}
	copier.Copy(m, body)
	u := query.TPost
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTPost_Id mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTPost_Id(ctx context.Context, id int32) (data dto.TPost, err error) {
	u := query.TPost
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTPost mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTPost(ctx context.Context, body dto.TPost) (err error) {
	m := &model.TPost{}
	copier.Copy(m, body)
	u := query.TPost
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTPost_Id mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTPost_Id(ctx context.Context, id int32) (err error) {
	u := query.TPost
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTPosts mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTPosts(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TPost{})).Request(paginate.Parameter(parameter)).Response(&[]model.TPost{})
	data = dto.Page(paginated)
	return
}

// PostTUser mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTUser(ctx context.Context, body dto.TUser) (data int32, err error) {
	m := &model.TUser{}
	copier.Copy(m, body)
	u := query.TUser
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTUser_Id mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTUser_Id(ctx context.Context, id int32) (data dto.TUser, err error) {
	u := query.TUser
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTUser mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTUser(ctx context.Context, body dto.TUser) (err error) {
	m := &model.TUser{}
	copier.Copy(m, body)
	u := query.TUser
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTUser_Id mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTUser_Id(ctx context.Context, id int32) (err error) {
	u := query.TUser
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTUsers mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTUsers(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TUser{})).Request(paginate.Parameter(parameter)).Response(&[]model.TUser{})
	data = dto.Page(paginated)
	return
}

// PostTWordCloudTask mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTWordCloudTask(ctx context.Context, body dto.TWordCloudTask) (data int32, err error) {
	m := &model.TWordCloudTask{}
	copier.Copy(m, body)
	u := query.TWordCloudTask
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTWordCloudTask_Id mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTWordCloudTask_Id(ctx context.Context, id int32) (data dto.TWordCloudTask, err error) {
	u := query.TWordCloudTask
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTWordCloudTask mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTWordCloudTask(ctx context.Context, body dto.TWordCloudTask) (err error) {
	m := &model.TWordCloudTask{}
	copier.Copy(m, body)
	u := query.TWordCloudTask
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTWordCloudTask_Id mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTWordCloudTask_Id(ctx context.Context, id int32) (err error) {
	u := query.TWordCloudTask
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTWordCloudTasks mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTWordCloudTasks(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TWordCloudTask{})).Request(paginate.Parameter(parameter)).Response(&[]model.TWordCloudTask{})
	data = dto.Page(paginated)
	return
}

// PostTClientRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTClientRpc(ctx context.Context, request *pb.TClient) (*pb.PostTClientRpcResponse, error) {
	var body dto.TClient
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTClient(ctx, body)
	return &pb.PostTClientRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTClientIdRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTClientIdRpc(ctx context.Context, request *pb.GetTClientIdRpcRequest) (*pb.TClient, error) {
	data, err := receiver.GetTClient_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TClient
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTClientRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTClientRpc(ctx context.Context, request *pb.TClient) (*emptypb.Empty, error) {
	var body dto.TClient
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTClient(ctx, body))
}

// DeleteTClientIdRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTClientIdRpc(ctx context.Context, request *pb.DeleteTClientIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTClient_Id(ctx, request.Id))
}

// GetTClientsRpc mapped from table <t_client>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTClientsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTClients(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TClient
		copier.Copy(&d, item)
		var msg pb.TClient
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTDeptRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTDeptRpc(ctx context.Context, request *pb.TDept) (*pb.PostTDeptRpcResponse, error) {
	var body dto.TDept
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTDept(ctx, body)
	return &pb.PostTDeptRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTDeptIdRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTDeptIdRpc(ctx context.Context, request *pb.GetTDeptIdRpcRequest) (*pb.TDept, error) {
	data, err := receiver.GetTDept_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TDept
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTDeptRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTDeptRpc(ctx context.Context, request *pb.TDept) (*emptypb.Empty, error) {
	var body dto.TDept
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTDept(ctx, body))
}

// DeleteTDeptIdRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTDeptIdRpc(ctx context.Context, request *pb.DeleteTDeptIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTDept_Id(ctx, request.Id))
}

// GetTDeptsRpc mapped from table <t_dept>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTDeptsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTDepts(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TDept
		copier.Copy(&d, item)
		var msg pb.TDept
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTInvalidTokenRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTInvalidTokenRpc(ctx context.Context, request *pb.TInvalidToken) (*pb.PostTInvalidTokenRpcResponse, error) {
	var body dto.TInvalidToken
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTInvalidToken(ctx, body)
	return &pb.PostTInvalidTokenRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTInvalidTokenIdRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTInvalidTokenIdRpc(ctx context.Context, request *pb.GetTInvalidTokenIdRpcRequest) (*pb.TInvalidToken, error) {
	data, err := receiver.GetTInvalidToken_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TInvalidToken
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTInvalidTokenRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTInvalidTokenRpc(ctx context.Context, request *pb.TInvalidToken) (*emptypb.Empty, error) {
	var body dto.TInvalidToken
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTInvalidToken(ctx, body))
}

// DeleteTInvalidTokenIdRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTInvalidTokenIdRpc(ctx context.Context, request *pb.DeleteTInvalidTokenIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTInvalidToken_Id(ctx, request.Id))
}

// GetTInvalidTokensRpc mapped from table <t_invalid_token>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTInvalidTokensRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTInvalidTokens(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TInvalidToken
		copier.Copy(&d, item)
		var msg pb.TInvalidToken
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTPostRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTPostRpc(ctx context.Context, request *pb.TPost) (*pb.PostTPostRpcResponse, error) {
	var body dto.TPost
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTPost(ctx, body)
	return &pb.PostTPostRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTPostIdRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTPostIdRpc(ctx context.Context, request *pb.GetTPostIdRpcRequest) (*pb.TPost, error) {
	data, err := receiver.GetTPost_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TPost
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTPostRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTPostRpc(ctx context.Context, request *pb.TPost) (*emptypb.Empty, error) {
	var body dto.TPost
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTPost(ctx, body))
}

// DeleteTPostIdRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTPostIdRpc(ctx context.Context, request *pb.DeleteTPostIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTPost_Id(ctx, request.Id))
}

// GetTPostsRpc mapped from table <t_post>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTPostsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTPosts(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TPost
		copier.Copy(&d, item)
		var msg pb.TPost
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTUserRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTUserRpc(ctx context.Context, request *pb.TUser) (*pb.PostTUserRpcResponse, error) {
	var body dto.TUser
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTUser(ctx, body)
	return &pb.PostTUserRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTUserIdRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTUserIdRpc(ctx context.Context, request *pb.GetTUserIdRpcRequest) (*pb.TUser, error) {
	data, err := receiver.GetTUser_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TUser
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTUserRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTUserRpc(ctx context.Context, request *pb.TUser) (*emptypb.Empty, error) {
	var body dto.TUser
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTUser(ctx, body))
}

// DeleteTUserIdRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTUserIdRpc(ctx context.Context, request *pb.DeleteTUserIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTUser_Id(ctx, request.Id))
}

// GetTUsersRpc mapped from table <t_user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTUsersRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTUsers(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TUser
		copier.Copy(&d, item)
		var msg pb.TUser
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTWordCloudTaskRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTWordCloudTaskRpc(ctx context.Context, request *pb.TWordCloudTask) (*pb.PostTWordCloudTaskRpcResponse, error) {
	var body dto.TWordCloudTask
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTWordCloudTask(ctx, body)
	return &pb.PostTWordCloudTaskRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTWordCloudTaskIdRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTWordCloudTaskIdRpc(ctx context.Context, request *pb.GetTWordCloudTaskIdRpcRequest) (*pb.TWordCloudTask, error) {
	data, err := receiver.GetTWordCloudTask_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TWordCloudTask
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTWordCloudTaskRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTWordCloudTaskRpc(ctx context.Context, request *pb.TWordCloudTask) (*emptypb.Empty, error) {
	var body dto.TWordCloudTask
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTWordCloudTask(ctx, body))
}

// DeleteTWordCloudTaskIdRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTWordCloudTaskIdRpc(ctx context.Context, request *pb.DeleteTWordCloudTaskIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTWordCloudTask_Id(ctx, request.Id))
}

// GetTWordCloudTasksRpc mapped from table <t_word_cloud_task>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTWordCloudTasksRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTWordCloudTasks(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TWordCloudTask
		copier.Copy(&d, item)
		var msg pb.TWordCloudTask
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTAuthorRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTAuthorRpc(ctx context.Context, request *pb.TAuthor) (*pb.PostTAuthorRpcResponse, error) {
	var body dto.TAuthor
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTAuthor(ctx, body)
	return &pb.PostTAuthorRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTAuthorIdRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTAuthorIdRpc(ctx context.Context, request *pb.GetTAuthorIdRpcRequest) (*pb.TAuthor, error) {
	data, err := receiver.GetTAuthor_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TAuthor
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTAuthorRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTAuthorRpc(ctx context.Context, request *pb.TAuthor) (*emptypb.Empty, error) {
	var body dto.TAuthor
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTAuthor(ctx, body))
}

// DeleteTAuthorIdRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTAuthorIdRpc(ctx context.Context, request *pb.DeleteTAuthorIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTAuthor_Id(ctx, request.Id))
}

// GetTAuthorsRpc mapped from table <t_author>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTAuthorsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTAuthors(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TAuthor
		copier.Copy(&d, item)
		var msg pb.TAuthor
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}

// PostTJjj mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTJjj(ctx context.Context, body dto.TJjj) (data int32, err error) {
	m := &model.TJjj{}
	copier.Copy(m, body)
	u := query.TJjj
	err = errorx.Wrap(u.WithContext(ctx).Create(m))
	data = m.ID
	return
}

// GetTJjj_Id mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTJjj_Id(ctx context.Context, id int32) (data dto.TJjj, err error) {
	u := query.TJjj
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	err = errorx.Wrap(err)
	copier.Copy(&data, m)
	return
}

// PutTJjj mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTJjj(ctx context.Context, body dto.TJjj) (err error) {
	m := &model.TJjj{}
	copier.Copy(m, body)
	u := query.TJjj
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	err = errorx.Wrap(err)
	return
}

// DeleteTJjj_Id mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTJjj_Id(ctx context.Context, id int32) (err error) {
	u := query.TJjj
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	err = errorx.Wrap(err)
	return
}

// GetTJjjs mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTJjjs(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.TJjj{})).Request(paginate.Parameter(parameter)).Response(&[]model.TJjj{})
	data = dto.Page(paginated)
	return
}

// PostTJjjRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PostTJjjRpc(ctx context.Context, request *pb.TJjj) (*pb.PostTJjjRpcResponse, error) {
	var body dto.TJjj
	jsoncopier.DeepCopy(request, &body)
	data, err := receiver.PostTJjj(ctx, body)
	return &pb.PostTJjjRpcResponse{
		Data: data,
	}, errorx.Wrap(err)
}

// GetTJjjIdRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTJjjIdRpc(ctx context.Context, request *pb.GetTJjjIdRpcRequest) (*pb.TJjj, error) {
	data, err := receiver.GetTJjj_Id(ctx, request.Id)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	var ret pb.TJjj
	jsoncopier.DeepCopy(data, &ret)
	return &ret, nil
}

// PutTJjjRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) PutTJjjRpc(ctx context.Context, request *pb.TJjj) (*emptypb.Empty, error) {
	var body dto.TJjj
	jsoncopier.DeepCopy(request, &body)
	return &emptypb.Empty{}, errorx.Wrap(receiver.PutTJjj(ctx, body))
}

// DeleteTJjjIdRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) DeleteTJjjIdRpc(ctx context.Context, request *pb.DeleteTJjjIdRpcRequest) (*emptypb.Empty, error) {
	return &emptypb.Empty{}, errorx.Wrap(receiver.DeleteTJjj_Id(ctx, request.Id))
}

// GetTJjjsRpc mapped from table <t_jjj>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *TestfffgromImpl) GetTJjjsRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	filters := make([]interface{}, 0, len(request.Filters))
	for _, item := range request.Filters {
		str := wrappers.StringValue{}
		if err := anypb.UnmarshalTo(item, &str, proto.UnmarshalOptions{}); err != nil {
			return nil, errorx.Wrap(err)
		}
		filters = append(filters, str.Value)
	}
	var parameter dto.Parameter
	jsoncopier.DeepCopy(request, &parameter)
	parameter.Filters = filters
	data, err := receiver.GetTJjjs(ctx, parameter)
	if err != nil {
		return nil, errorx.Wrap(err)
	}
	items := make([]*anypb.Any, 0, len(data.Items))
	for _, item := range data.Items {
		var d dto.TJjj
		copier.Copy(&d, item)
		var msg pb.TJjj
		jsoncopier.DeepCopy(d, &msg)
		a, err := anypb.New(&msg)
		if err != nil {
			return nil, errorx.Wrap(err)
		}
		items = append(items, a)
	}
	var ret pb.Page
	jsoncopier.DeepCopy(data, &ret)
	ret.Items = items
	return &ret, nil
}
