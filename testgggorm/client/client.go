/**
* Generated by go-doudou v2.1.1.
* Don't edit!
 */
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"testgggorm/dto"

	"github.com/go-resty/resty/v2"
	"github.com/klauspost/compress/gzip"
	"github.com/opentracing-contrib/go-stdlib/nethttp"
	"github.com/opentracing/opentracing-go"
	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/registry"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/restclient"
)

type TestgggormClient struct {
	provider registry.IServiceProvider
	client   *resty.Client
	rootPath string
}

func (receiver *TestgggormClient) SetRootPath(rootPath string) {
	receiver.rootPath = rootPath
}

func (receiver *TestgggormClient) SetProvider(provider registry.IServiceProvider) {
	receiver.provider = provider
}

func (receiver *TestgggormClient) SetClient(client *resty.Client) {
	receiver.client = client
}
func (receiver *TestgggormClient) PostTInvalidToken(ctx context.Context, _headers map[string]string, body dto.TInvalidToken, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/invalid/token"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTInvalidTokens(ctx context.Context, _headers map[string]string, body []dto.TInvalidToken, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/invalid/tokens"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTInvalidToken_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TInvalidToken, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/invalid/token/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TInvalidToken `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTInvalidToken(ctx context.Context, _headers map[string]string, body dto.TInvalidToken, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/invalid/token"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTInvalidToken_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/invalid/token/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTInvalidTokens(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/invalid/tokens"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTJjj(ctx context.Context, _headers map[string]string, body dto.TJjj, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/jjj"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTJjjs(ctx context.Context, _headers map[string]string, body []dto.TJjj, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/jjjs"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTJjj_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TJjj, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/jjj/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TJjj `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTJjj(ctx context.Context, _headers map[string]string, body dto.TJjj, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/jjj"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTJjj_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/jjj/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTJjjs(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/jjjs"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTPost(ctx context.Context, _headers map[string]string, body dto.TPost, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/post"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTPosts(ctx context.Context, _headers map[string]string, body []dto.TPost, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/posts"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTPost_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TPost, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/post/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TPost `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTPost(ctx context.Context, _headers map[string]string, body dto.TPost, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/post"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTPost_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/post/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTPosts(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/posts"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTUser(ctx context.Context, _headers map[string]string, body dto.TUser, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/user"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTUsers(ctx context.Context, _headers map[string]string, body []dto.TUser, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/users"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TUser, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/user/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TUser `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTUser(ctx context.Context, _headers map[string]string, body dto.TUser, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/user"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/user/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTUsers(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/users"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTWordCloudTask(ctx context.Context, _headers map[string]string, body dto.TWordCloudTask, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/word/cloud/task"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTWordCloudTasks(ctx context.Context, _headers map[string]string, body []dto.TWordCloudTask, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/word/cloud/tasks"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTWordCloudTask_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TWordCloudTask, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/word/cloud/task/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TWordCloudTask `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTWordCloudTask(ctx context.Context, _headers map[string]string, body dto.TWordCloudTask, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/word/cloud/task"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTWordCloudTask_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/word/cloud/task/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTWordCloudTasks(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/word/cloud/tasks"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTAuthor(ctx context.Context, _headers map[string]string, body dto.TAuthor, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/author"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTAuthors(ctx context.Context, _headers map[string]string, body []dto.TAuthor, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/authors"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTAuthor_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TAuthor, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/author/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TAuthor `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTAuthor(ctx context.Context, _headers map[string]string, body dto.TAuthor, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/author"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTAuthor_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/author/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTAuthors(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/authors"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTClient(ctx context.Context, _headers map[string]string, body dto.TClient, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/client"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTClients(ctx context.Context, _headers map[string]string, body []dto.TClient, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/clients"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTClient_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TClient, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/client/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TClient `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTClient(ctx context.Context, _headers map[string]string, body dto.TClient, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/client"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTClient_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/client/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTClients(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/clients"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTDept(ctx context.Context, _headers map[string]string, body dto.TDept, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/dept"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PostTDepts(ctx context.Context, _headers map[string]string, body []dto.TDept, options Options) (_resp *resty.Response, data []int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/depts"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data []int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) GetTDept_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TDept, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/dept/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TDept `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) PutTDept(ctx context.Context, _headers map[string]string, body dto.TDept, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/dept"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) DeleteTDept_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/t/dept/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *TestgggormClient) GetTDepts(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/t/depts"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *TestgggormClient) TAuthorPosts(ctx context.Context, _headers map[string]string, body dto.SaveAuthorReqDTO, options Options) (_resp *resty.Response, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(body)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(body)
	}
	_path := "/t/author/posts"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}

func NewTestgggormClient(opts ...restclient.RestClientOption) *TestgggormClient {
	defaultProvider := restclient.NewServiceProvider("TESTGGGORM")
	defaultClient := restclient.NewClient()

	svcClient := &TestgggormClient{
		provider: defaultProvider,
		client:   defaultClient,
	}

	for _, opt := range opts {
		opt(svcClient)
	}

	svcClient.client.OnBeforeRequest(func(_ *resty.Client, request *resty.Request) error {
		request.URL = svcClient.provider.SelectServer() + svcClient.rootPath + request.URL
		return nil
	})

	svcClient.client.SetPreRequestHook(func(_ *resty.Client, request *http.Request) error {
		traceReq, _ := nethttp.TraceRequest(opentracing.GlobalTracer(), request,
			nethttp.OperationName(fmt.Sprintf("HTTP %s: %s", request.Method, request.URL.Path)))
		*request = *traceReq
		return nil
	})

	svcClient.client.OnAfterResponse(func(_ *resty.Client, response *resty.Response) error {
		nethttp.TracerFromRequest(response.Request.RawRequest).Finish()
		return nil
	})

	return svcClient
}
