// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersvcServiceClient is the client API for UsersvcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersvcServiceClient interface {
	// GetUser 用户详情接口
	// 展示如何定义带查询字符串参数的GET请求接口
	// GetUser is user detail api
	// demo how to define get http request with query string parameters
	// @role(USER)
	GetUserRpc(ctx context.Context, in *GetUserRpcRequest, opts ...grpc.CallOption) (*UserVo, error)
	// GetMe 获取当前登录用户详情接口
	// GetMe is used for getting user info from token in header.
	// @role(USER)
	GetMeRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserVo, error)
	// PublicSignUp 用户注册接口
	// 展示如何定义POST请求且Content-Type是application/x-www-form-urlencoded的接口
	// PublicSignUp is user signup api
	// demo how to define post request api which accepts application/x-www-form-urlencoded content-type
	SignUpRpc(ctx context.Context, in *SignUpRpcRequest, opts ...grpc.CallOption) (*SignUpRpcResponse, error)
	// PublicLogIn 用户登录接口
	// 展示如何鉴权并返回token
	// PublicLogIn is user login api
	// demo how to do authentication and issue token
	LogInRpc(ctx context.Context, in *LogInRpcRequest, opts ...grpc.CallOption) (*LogInRpcResponse, error)
	// GetLogout 注销token
	// GetLogout is used for revoking a token
	// https://github.com/dgrijalva/jwt-go/issues/214
	// @role(USER)
	GetLogoutRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLogoutRpcResponse, error)
	// PublicTokenValidate token校验接口
	// 如果token有效，返回用户信息，否则返回空对象
	// PublicTokenValidate validates token string
	// if token is valid, return user information, otherwise, return empty data
	GetTokenValidateRpc(ctx context.Context, in *GetTokenValidateRpcRequest, opts ...grpc.CallOption) (*UserVo, error)
}

type usersvcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersvcServiceClient(cc grpc.ClientConnInterface) UsersvcServiceClient {
	return &usersvcServiceClient{cc}
}

func (c *usersvcServiceClient) GetUserRpc(ctx context.Context, in *GetUserRpcRequest, opts ...grpc.CallOption) (*UserVo, error) {
	out := new(UserVo)
	err := c.cc.Invoke(ctx, "/usersvc.UsersvcService/GetUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersvcServiceClient) GetMeRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserVo, error) {
	out := new(UserVo)
	err := c.cc.Invoke(ctx, "/usersvc.UsersvcService/GetMeRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersvcServiceClient) SignUpRpc(ctx context.Context, in *SignUpRpcRequest, opts ...grpc.CallOption) (*SignUpRpcResponse, error) {
	out := new(SignUpRpcResponse)
	err := c.cc.Invoke(ctx, "/usersvc.UsersvcService/SignUpRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersvcServiceClient) LogInRpc(ctx context.Context, in *LogInRpcRequest, opts ...grpc.CallOption) (*LogInRpcResponse, error) {
	out := new(LogInRpcResponse)
	err := c.cc.Invoke(ctx, "/usersvc.UsersvcService/LogInRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersvcServiceClient) GetLogoutRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetLogoutRpcResponse, error) {
	out := new(GetLogoutRpcResponse)
	err := c.cc.Invoke(ctx, "/usersvc.UsersvcService/GetLogoutRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersvcServiceClient) GetTokenValidateRpc(ctx context.Context, in *GetTokenValidateRpcRequest, opts ...grpc.CallOption) (*UserVo, error) {
	out := new(UserVo)
	err := c.cc.Invoke(ctx, "/usersvc.UsersvcService/GetTokenValidateRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersvcServiceServer is the server API for UsersvcService service.
// All implementations must embed UnimplementedUsersvcServiceServer
// for forward compatibility
type UsersvcServiceServer interface {
	// GetUser 用户详情接口
	// 展示如何定义带查询字符串参数的GET请求接口
	// GetUser is user detail api
	// demo how to define get http request with query string parameters
	// @role(USER)
	GetUserRpc(context.Context, *GetUserRpcRequest) (*UserVo, error)
	// GetMe 获取当前登录用户详情接口
	// GetMe is used for getting user info from token in header.
	// @role(USER)
	GetMeRpc(context.Context, *emptypb.Empty) (*UserVo, error)
	// PublicSignUp 用户注册接口
	// 展示如何定义POST请求且Content-Type是application/x-www-form-urlencoded的接口
	// PublicSignUp is user signup api
	// demo how to define post request api which accepts application/x-www-form-urlencoded content-type
	SignUpRpc(context.Context, *SignUpRpcRequest) (*SignUpRpcResponse, error)
	// PublicLogIn 用户登录接口
	// 展示如何鉴权并返回token
	// PublicLogIn is user login api
	// demo how to do authentication and issue token
	LogInRpc(context.Context, *LogInRpcRequest) (*LogInRpcResponse, error)
	// GetLogout 注销token
	// GetLogout is used for revoking a token
	// https://github.com/dgrijalva/jwt-go/issues/214
	// @role(USER)
	GetLogoutRpc(context.Context, *emptypb.Empty) (*GetLogoutRpcResponse, error)
	// PublicTokenValidate token校验接口
	// 如果token有效，返回用户信息，否则返回空对象
	// PublicTokenValidate validates token string
	// if token is valid, return user information, otherwise, return empty data
	GetTokenValidateRpc(context.Context, *GetTokenValidateRpcRequest) (*UserVo, error)
	mustEmbedUnimplementedUsersvcServiceServer()
}

// UnimplementedUsersvcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersvcServiceServer struct {
}

func (UnimplementedUsersvcServiceServer) GetUserRpc(context.Context, *GetUserRpcRequest) (*UserVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRpc not implemented")
}
func (UnimplementedUsersvcServiceServer) GetMeRpc(context.Context, *emptypb.Empty) (*UserVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeRpc not implemented")
}
func (UnimplementedUsersvcServiceServer) SignUpRpc(context.Context, *SignUpRpcRequest) (*SignUpRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpRpc not implemented")
}
func (UnimplementedUsersvcServiceServer) LogInRpc(context.Context, *LogInRpcRequest) (*LogInRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInRpc not implemented")
}
func (UnimplementedUsersvcServiceServer) GetLogoutRpc(context.Context, *emptypb.Empty) (*GetLogoutRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogoutRpc not implemented")
}
func (UnimplementedUsersvcServiceServer) GetTokenValidateRpc(context.Context, *GetTokenValidateRpcRequest) (*UserVo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenValidateRpc not implemented")
}
func (UnimplementedUsersvcServiceServer) mustEmbedUnimplementedUsersvcServiceServer() {}

// UnsafeUsersvcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersvcServiceServer will
// result in compilation errors.
type UnsafeUsersvcServiceServer interface {
	mustEmbedUnimplementedUsersvcServiceServer()
}

func RegisterUsersvcServiceServer(s grpc.ServiceRegistrar, srv UsersvcServiceServer) {
	s.RegisterService(&UsersvcService_ServiceDesc, srv)
}

func _UsersvcService_GetUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersvcServiceServer).GetUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usersvc.UsersvcService/GetUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersvcServiceServer).GetUserRpc(ctx, req.(*GetUserRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersvcService_GetMeRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersvcServiceServer).GetMeRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usersvc.UsersvcService/GetMeRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersvcServiceServer).GetMeRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersvcService_SignUpRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersvcServiceServer).SignUpRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usersvc.UsersvcService/SignUpRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersvcServiceServer).SignUpRpc(ctx, req.(*SignUpRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersvcService_LogInRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersvcServiceServer).LogInRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usersvc.UsersvcService/LogInRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersvcServiceServer).LogInRpc(ctx, req.(*LogInRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersvcService_GetLogoutRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersvcServiceServer).GetLogoutRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usersvc.UsersvcService/GetLogoutRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersvcServiceServer).GetLogoutRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersvcService_GetTokenValidateRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenValidateRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersvcServiceServer).GetTokenValidateRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usersvc.UsersvcService/GetTokenValidateRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersvcServiceServer).GetTokenValidateRpc(ctx, req.(*GetTokenValidateRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersvcService_ServiceDesc is the grpc.ServiceDesc for UsersvcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersvcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usersvc.UsersvcService",
	HandlerType: (*UsersvcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserRpc",
			Handler:    _UsersvcService_GetUserRpc_Handler,
		},
		{
			MethodName: "GetMeRpc",
			Handler:    _UsersvcService_GetMeRpc_Handler,
		},
		{
			MethodName: "SignUpRpc",
			Handler:    _UsersvcService_SignUpRpc_Handler,
		},
		{
			MethodName: "LogInRpc",
			Handler:    _UsersvcService_LogInRpc_Handler,
		},
		{
			MethodName: "GetLogoutRpc",
			Handler:    _UsersvcService_GetLogoutRpc_Handler,
		},
		{
			MethodName: "GetTokenValidateRpc",
			Handler:    _UsersvcService_GetTokenValidateRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/usersvc.proto",
}
