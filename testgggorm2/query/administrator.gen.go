// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm2/model"
)

func newAdministrator(db *gorm.DB, opts ...gormgen.DOOption) administrator {
	_administrator := administrator{}

	_administrator.administratorDo.UseDB(db, opts...)
	_administrator.administratorDo.UseModel(&model.Administrator{})

	tableName := _administrator.administratorDo.TableName()
	_administrator.ALL = field.NewAsterisk(tableName)
	_administrator.ID = field.NewInt32(tableName, "id")
	_administrator.Username = field.NewString(tableName, "username")
	_administrator.Password = field.NewString(tableName, "password")
	_administrator.Mobile = field.NewString(tableName, "mobile")
	_administrator.Email = field.NewString(tableName, "email")
	_administrator.Status = field.NewInt32(tableName, "status")
	_administrator.RoleID = field.NewInt32(tableName, "role_id")
	_administrator.AddTime = field.NewInt32(tableName, "add_time")
	_administrator.IsSuper = field.NewInt32(tableName, "is_super")

	_administrator.fillFieldMap()

	return _administrator
}

type administrator struct {
	administratorDo administratorDo

	ALL      field.Asterisk
	ID       field.Int32
	Username field.String // 用户名
	Password field.String // 密码
	Mobile   field.String // 手机号
	Email    field.String // 邮箱
	Status   field.Int32  // 状态
	RoleID   field.Int32  // 角色编号
	AddTime  field.Int32  // 添加时间
	IsSuper  field.Int32  // 是否超级管理员

	fieldMap map[string]field.Expr
}

func (a administrator) Table(newTableName string) *administrator {
	a.administratorDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a administrator) As(alias string) *administrator {
	a.administratorDo.DO = *(a.administratorDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *administrator) updateTableName(table string) *administrator {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.Username = field.NewString(table, "username")
	a.Password = field.NewString(table, "password")
	a.Mobile = field.NewString(table, "mobile")
	a.Email = field.NewString(table, "email")
	a.Status = field.NewInt32(table, "status")
	a.RoleID = field.NewInt32(table, "role_id")
	a.AddTime = field.NewInt32(table, "add_time")
	a.IsSuper = field.NewInt32(table, "is_super")

	a.fillFieldMap()

	return a
}

func (a *administrator) WithContext(ctx context.Context) IAdministratorDo {
	return a.administratorDo.WithContext(ctx)
}

func (a administrator) TableName() string { return a.administratorDo.TableName() }

func (a administrator) Alias() string { return a.administratorDo.Alias() }

func (a administrator) Columns(cols ...field.Expr) gormgen.Columns {
	return a.administratorDo.Columns(cols...)
}

func (a *administrator) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *administrator) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["username"] = a.Username
	a.fieldMap["password"] = a.Password
	a.fieldMap["mobile"] = a.Mobile
	a.fieldMap["email"] = a.Email
	a.fieldMap["status"] = a.Status
	a.fieldMap["role_id"] = a.RoleID
	a.fieldMap["add_time"] = a.AddTime
	a.fieldMap["is_super"] = a.IsSuper
}

func (a administrator) clone(db *gorm.DB) administrator {
	a.administratorDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a administrator) replaceDB(db *gorm.DB) administrator {
	a.administratorDo.ReplaceDB(db)
	return a
}

type administratorDo struct{ gormgen.DO }

type IAdministratorDo interface {
	gormgen.SubQuery
	Debug() IAdministratorDo
	WithContext(ctx context.Context) IAdministratorDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdministratorDo
	WriteDB() IAdministratorDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IAdministratorDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IAdministratorDo
	Not(conds ...gormgen.Condition) IAdministratorDo
	Or(conds ...gormgen.Condition) IAdministratorDo
	Select(conds ...field.Expr) IAdministratorDo
	Where(conds ...gormgen.Condition) IAdministratorDo
	Order(conds ...field.Expr) IAdministratorDo
	Distinct(cols ...field.Expr) IAdministratorDo
	Omit(cols ...field.Expr) IAdministratorDo
	Join(table schema.Tabler, on ...field.Expr) IAdministratorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdministratorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdministratorDo
	Group(cols ...field.Expr) IAdministratorDo
	Having(conds ...gormgen.Condition) IAdministratorDo
	Limit(limit int) IAdministratorDo
	Offset(offset int) IAdministratorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IAdministratorDo
	Unscoped() IAdministratorDo
	Create(values ...*model.Administrator) error
	CreateInBatches(values []*model.Administrator, batchSize int) error
	Save(values ...*model.Administrator) error
	First() (*model.Administrator, error)
	Take() (*model.Administrator, error)
	Last() (*model.Administrator, error)
	Find() ([]*model.Administrator, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Administrator, err error)
	FindInBatches(result *[]*model.Administrator, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Administrator) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IAdministratorDo
	Assign(attrs ...field.AssignExpr) IAdministratorDo
	Joins(fields ...field.RelationField) IAdministratorDo
	Preload(fields ...field.RelationField) IAdministratorDo
	FirstOrInit() (*model.Administrator, error)
	FirstOrCreate() (*model.Administrator, error)
	FindByPage(offset int, limit int) (result []*model.Administrator, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdministratorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a administratorDo) Debug() IAdministratorDo {
	return a.withDO(a.DO.Debug())
}

func (a administratorDo) WithContext(ctx context.Context) IAdministratorDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a administratorDo) ReadDB() IAdministratorDo {
	return a.Clauses(dbresolver.Read)
}

func (a administratorDo) WriteDB() IAdministratorDo {
	return a.Clauses(dbresolver.Write)
}

func (a administratorDo) Session(config *gorm.Session) IAdministratorDo {
	return a.withDO(a.DO.Session(config))
}

func (a administratorDo) Clauses(conds ...clause.Expression) IAdministratorDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a administratorDo) Returning(value interface{}, columns ...string) IAdministratorDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a administratorDo) Not(conds ...gormgen.Condition) IAdministratorDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a administratorDo) Or(conds ...gormgen.Condition) IAdministratorDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a administratorDo) Select(conds ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a administratorDo) Where(conds ...gormgen.Condition) IAdministratorDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a administratorDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAdministratorDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a administratorDo) Order(conds ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a administratorDo) Distinct(cols ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a administratorDo) Omit(cols ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a administratorDo) Join(table schema.Tabler, on ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a administratorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a administratorDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a administratorDo) Group(cols ...field.Expr) IAdministratorDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a administratorDo) Having(conds ...gormgen.Condition) IAdministratorDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a administratorDo) Limit(limit int) IAdministratorDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a administratorDo) Offset(offset int) IAdministratorDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a administratorDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IAdministratorDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a administratorDo) Unscoped() IAdministratorDo {
	return a.withDO(a.DO.Unscoped())
}

func (a administratorDo) Create(values ...*model.Administrator) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a administratorDo) CreateInBatches(values []*model.Administrator, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a administratorDo) Save(values ...*model.Administrator) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a administratorDo) First() (*model.Administrator, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) Take() (*model.Administrator, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) Last() (*model.Administrator, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) Find() ([]*model.Administrator, error) {
	result, err := a.DO.Find()
	return result.([]*model.Administrator), err
}

func (a administratorDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Administrator, err error) {
	buf := make([]*model.Administrator, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a administratorDo) FindInBatches(result *[]*model.Administrator, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a administratorDo) Attrs(attrs ...field.AssignExpr) IAdministratorDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a administratorDo) Assign(attrs ...field.AssignExpr) IAdministratorDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a administratorDo) Joins(fields ...field.RelationField) IAdministratorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a administratorDo) Preload(fields ...field.RelationField) IAdministratorDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a administratorDo) FirstOrInit() (*model.Administrator, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) FirstOrCreate() (*model.Administrator, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Administrator), nil
	}
}

func (a administratorDo) FindByPage(offset int, limit int) (result []*model.Administrator, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a administratorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a administratorDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a administratorDo) Delete(models ...*model.Administrator) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *administratorDo) withDO(do gormgen.Dao) *administratorDo {
	a.DO = *do.(*gormgen.DO)
	return a
}
