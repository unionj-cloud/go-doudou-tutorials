/**
* Generated by go-doudou v2.0.8.
* Don't edit!
 */
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"gormdemo/dto"
	"io"
	"net/http"
	"net/url"

	"github.com/go-resty/resty/v2"
	"github.com/klauspost/compress/gzip"
	"github.com/opentracing-contrib/go-stdlib/nethttp"
	"github.com/opentracing/opentracing-go"
	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/registry"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/restclient"
)

type GormdemoClient struct {
	provider registry.IServiceProvider
	client   *resty.Client
	rootPath string
}

func (receiver *GormdemoClient) SetRootPath(rootPath string) {
	receiver.rootPath = rootPath
}

func (receiver *GormdemoClient) SetProvider(provider registry.IServiceProvider) {
	receiver.provider = provider
}

func (receiver *GormdemoClient) SetClient(client *resty.Client) {
	receiver.client = client
}
func (receiver *GormdemoClient) PostGenTUser(ctx context.Context, _headers map[string]string, tUser dto.TUser, options Options) (_resp *resty.Response, data int32, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(tUser)
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				err = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(err)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(tUser)
	}
	_path := "/gen/t/user"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Post(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data int32 `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *GormdemoClient) GetGenTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TUser, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/gen/t/user/{id}"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.TUser `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}
func (receiver *GormdemoClient) PutGenTUser(ctx context.Context, _headers map[string]string, tUser dto.TUser, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	if options.GzipReqBody {
		pr, pw := io.Pipe()
		go func() {
			gw := gzip.NewWriter(pw)
			_err = json.NewEncoder(gw).Encode(tUser)
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			_err = gw.Close()
			if _err != nil {
				re = errors.Wrap(_err, "error")
				return
			}
			defer pw.CloseWithError(re)
		}()
		_req.SetHeader("Content-Type", "application/json")
		_req.SetHeader("Content-Encoding", "gzip")
		_req.SetBody(pr)
	} else {
		_req.SetBody(tUser)
	}
	_path := "/gen/t/user"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Put(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *GormdemoClient) DeleteGenTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	_req.SetPathParam("id", fmt.Sprintf("%v", id))
	_path := "/gen/t/user/{id}"
	if _req.Body != nil {
		_req.SetQueryParamsFromValues(_urlValues)
	} else {
		_req.SetFormDataFromValues(_urlValues)
	}
	_resp, _err = _req.Delete(_path)
	if _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		re = errors.New(_resp.String())
		return
	}
	var _result struct {
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		re = errors.Wrap(_err, "error")
		return
	}
	return _resp, nil
}
func (receiver *GormdemoClient) GetGenTUsers(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	var _err error
	_urlValues := url.Values{}
	_req := receiver.client.R()
	if len(_headers) > 0 {
		_req.SetHeaders(_headers)
	}
	_req.SetContext(ctx)
	parameterUrlValues, _err := rest.EncodeForm(&parameter)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	_req.SetQueryParamsFromValues(parameterUrlValues)
	_path := "/gen/t/users"
	_req.SetQueryParamsFromValues(_urlValues)
	_resp, _err = _req.Get(_path)
	if _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	if _resp.IsError() {
		err = errors.New(_resp.String())
		return
	}
	var _result struct {
		Data dto.Page `json:"data"`
	}
	if _err = json.Unmarshal(_resp.Body(), &_result); _err != nil {
		err = errors.Wrap(_err, "error")
		return
	}
	return _resp, _result.Data, nil
}

func NewGormdemoClient(opts ...restclient.RestClientOption) *GormdemoClient {
	defaultProvider := restclient.NewServiceProvider("GORMDEMO")
	defaultClient := restclient.NewClient()

	svcClient := &GormdemoClient{
		provider: defaultProvider,
		client:   defaultClient,
	}

	for _, opt := range opts {
		opt(svcClient)
	}

	svcClient.client.OnBeforeRequest(func(_ *resty.Client, request *resty.Request) error {
		request.URL = svcClient.provider.SelectServer() + svcClient.rootPath + request.URL
		return nil
	})

	svcClient.client.SetPreRequestHook(func(_ *resty.Client, request *http.Request) error {
		traceReq, _ := nethttp.TraceRequest(opentracing.GlobalTracer(), request,
			nethttp.OperationName(fmt.Sprintf("HTTP %s: %s", request.Method, request.URL.Path)))
		*request = *traceReq
		return nil
	})

	svcClient.client.OnAfterResponse(func(_ *resty.Client, response *resty.Response) error {
		nethttp.TracerFromRequest(response.Request.RawRequest).Finish()
		return nil
	})

	return svcClient
}
