// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormdemo/model"
)

func newQrtzFiredTrigger(db *gorm.DB, opts ...gen.DOOption) qrtzFiredTrigger {
	_qrtzFiredTrigger := qrtzFiredTrigger{}

	_qrtzFiredTrigger.qrtzFiredTriggerDo.UseDB(db, opts...)
	_qrtzFiredTrigger.qrtzFiredTriggerDo.UseModel(&model.QrtzFiredTrigger{})

	tableName := _qrtzFiredTrigger.qrtzFiredTriggerDo.TableName()
	_qrtzFiredTrigger.ALL = field.NewAsterisk(tableName)
	_qrtzFiredTrigger.SCHEDNAME = field.NewString(tableName, "SCHED_NAME")
	_qrtzFiredTrigger.ENTRYID = field.NewString(tableName, "ENTRY_ID")
	_qrtzFiredTrigger.TRIGGERNAME = field.NewString(tableName, "TRIGGER_NAME")
	_qrtzFiredTrigger.TRIGGERGROUP = field.NewString(tableName, "TRIGGER_GROUP")
	_qrtzFiredTrigger.INSTANCENAME = field.NewString(tableName, "INSTANCE_NAME")
	_qrtzFiredTrigger.FIREDTIME = field.NewInt64(tableName, "FIRED_TIME")
	_qrtzFiredTrigger.SCHEDTIME = field.NewInt64(tableName, "SCHED_TIME")
	_qrtzFiredTrigger.PRIORITY = field.NewInt32(tableName, "PRIORITY")
	_qrtzFiredTrigger.STATE = field.NewString(tableName, "STATE")
	_qrtzFiredTrigger.JOBNAME = field.NewString(tableName, "JOB_NAME")
	_qrtzFiredTrigger.JOBGROUP = field.NewString(tableName, "JOB_GROUP")
	_qrtzFiredTrigger.ISNONCONCURRENT = field.NewString(tableName, "IS_NONCONCURRENT")
	_qrtzFiredTrigger.REQUESTSRECOVERY = field.NewString(tableName, "REQUESTS_RECOVERY")

	_qrtzFiredTrigger.fillFieldMap()

	return _qrtzFiredTrigger
}

type qrtzFiredTrigger struct {
	qrtzFiredTriggerDo qrtzFiredTriggerDo

	ALL              field.Asterisk
	SCHEDNAME        field.String
	ENTRYID          field.String
	TRIGGERNAME      field.String
	TRIGGERGROUP     field.String
	INSTANCENAME     field.String
	FIREDTIME        field.Int64
	SCHEDTIME        field.Int64
	PRIORITY         field.Int32
	STATE            field.String
	JOBNAME          field.String
	JOBGROUP         field.String
	ISNONCONCURRENT  field.String
	REQUESTSRECOVERY field.String

	fieldMap map[string]field.Expr
}

func (q qrtzFiredTrigger) Table(newTableName string) *qrtzFiredTrigger {
	q.qrtzFiredTriggerDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrtzFiredTrigger) As(alias string) *qrtzFiredTrigger {
	q.qrtzFiredTriggerDo.DO = *(q.qrtzFiredTriggerDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrtzFiredTrigger) updateTableName(table string) *qrtzFiredTrigger {
	q.ALL = field.NewAsterisk(table)
	q.SCHEDNAME = field.NewString(table, "SCHED_NAME")
	q.ENTRYID = field.NewString(table, "ENTRY_ID")
	q.TRIGGERNAME = field.NewString(table, "TRIGGER_NAME")
	q.TRIGGERGROUP = field.NewString(table, "TRIGGER_GROUP")
	q.INSTANCENAME = field.NewString(table, "INSTANCE_NAME")
	q.FIREDTIME = field.NewInt64(table, "FIRED_TIME")
	q.SCHEDTIME = field.NewInt64(table, "SCHED_TIME")
	q.PRIORITY = field.NewInt32(table, "PRIORITY")
	q.STATE = field.NewString(table, "STATE")
	q.JOBNAME = field.NewString(table, "JOB_NAME")
	q.JOBGROUP = field.NewString(table, "JOB_GROUP")
	q.ISNONCONCURRENT = field.NewString(table, "IS_NONCONCURRENT")
	q.REQUESTSRECOVERY = field.NewString(table, "REQUESTS_RECOVERY")

	q.fillFieldMap()

	return q
}

func (q *qrtzFiredTrigger) WithContext(ctx context.Context) IQrtzFiredTriggerDo {
	return q.qrtzFiredTriggerDo.WithContext(ctx)
}

func (q qrtzFiredTrigger) TableName() string { return q.qrtzFiredTriggerDo.TableName() }

func (q qrtzFiredTrigger) Alias() string { return q.qrtzFiredTriggerDo.Alias() }

func (q qrtzFiredTrigger) Columns(cols ...field.Expr) gen.Columns {
	return q.qrtzFiredTriggerDo.Columns(cols...)
}

func (q *qrtzFiredTrigger) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrtzFiredTrigger) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 13)
	q.fieldMap["SCHED_NAME"] = q.SCHEDNAME
	q.fieldMap["ENTRY_ID"] = q.ENTRYID
	q.fieldMap["TRIGGER_NAME"] = q.TRIGGERNAME
	q.fieldMap["TRIGGER_GROUP"] = q.TRIGGERGROUP
	q.fieldMap["INSTANCE_NAME"] = q.INSTANCENAME
	q.fieldMap["FIRED_TIME"] = q.FIREDTIME
	q.fieldMap["SCHED_TIME"] = q.SCHEDTIME
	q.fieldMap["PRIORITY"] = q.PRIORITY
	q.fieldMap["STATE"] = q.STATE
	q.fieldMap["JOB_NAME"] = q.JOBNAME
	q.fieldMap["JOB_GROUP"] = q.JOBGROUP
	q.fieldMap["IS_NONCONCURRENT"] = q.ISNONCONCURRENT
	q.fieldMap["REQUESTS_RECOVERY"] = q.REQUESTSRECOVERY
}

func (q qrtzFiredTrigger) clone(db *gorm.DB) qrtzFiredTrigger {
	q.qrtzFiredTriggerDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrtzFiredTrigger) replaceDB(db *gorm.DB) qrtzFiredTrigger {
	q.qrtzFiredTriggerDo.ReplaceDB(db)
	return q
}

type qrtzFiredTriggerDo struct{ gen.DO }

type IQrtzFiredTriggerDo interface {
	gen.SubQuery
	Debug() IQrtzFiredTriggerDo
	WithContext(ctx context.Context) IQrtzFiredTriggerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrtzFiredTriggerDo
	WriteDB() IQrtzFiredTriggerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrtzFiredTriggerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrtzFiredTriggerDo
	Not(conds ...gen.Condition) IQrtzFiredTriggerDo
	Or(conds ...gen.Condition) IQrtzFiredTriggerDo
	Select(conds ...field.Expr) IQrtzFiredTriggerDo
	Where(conds ...gen.Condition) IQrtzFiredTriggerDo
	Order(conds ...field.Expr) IQrtzFiredTriggerDo
	Distinct(cols ...field.Expr) IQrtzFiredTriggerDo
	Omit(cols ...field.Expr) IQrtzFiredTriggerDo
	Join(table schema.Tabler, on ...field.Expr) IQrtzFiredTriggerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzFiredTriggerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrtzFiredTriggerDo
	Group(cols ...field.Expr) IQrtzFiredTriggerDo
	Having(conds ...gen.Condition) IQrtzFiredTriggerDo
	Limit(limit int) IQrtzFiredTriggerDo
	Offset(offset int) IQrtzFiredTriggerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzFiredTriggerDo
	Unscoped() IQrtzFiredTriggerDo
	Create(values ...*model.QrtzFiredTrigger) error
	CreateInBatches(values []*model.QrtzFiredTrigger, batchSize int) error
	Save(values ...*model.QrtzFiredTrigger) error
	First() (*model.QrtzFiredTrigger, error)
	Take() (*model.QrtzFiredTrigger, error)
	Last() (*model.QrtzFiredTrigger, error)
	Find() ([]*model.QrtzFiredTrigger, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzFiredTrigger, err error)
	FindInBatches(result *[]*model.QrtzFiredTrigger, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrtzFiredTrigger) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrtzFiredTriggerDo
	Assign(attrs ...field.AssignExpr) IQrtzFiredTriggerDo
	Joins(fields ...field.RelationField) IQrtzFiredTriggerDo
	Preload(fields ...field.RelationField) IQrtzFiredTriggerDo
	FirstOrInit() (*model.QrtzFiredTrigger, error)
	FirstOrCreate() (*model.QrtzFiredTrigger, error)
	FindByPage(offset int, limit int) (result []*model.QrtzFiredTrigger, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrtzFiredTriggerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrtzFiredTriggerDo) Debug() IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Debug())
}

func (q qrtzFiredTriggerDo) WithContext(ctx context.Context) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrtzFiredTriggerDo) ReadDB() IQrtzFiredTriggerDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrtzFiredTriggerDo) WriteDB() IQrtzFiredTriggerDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrtzFiredTriggerDo) Session(config *gorm.Session) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrtzFiredTriggerDo) Clauses(conds ...clause.Expression) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrtzFiredTriggerDo) Returning(value interface{}, columns ...string) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrtzFiredTriggerDo) Not(conds ...gen.Condition) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrtzFiredTriggerDo) Or(conds ...gen.Condition) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrtzFiredTriggerDo) Select(conds ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrtzFiredTriggerDo) Where(conds ...gen.Condition) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrtzFiredTriggerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IQrtzFiredTriggerDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q qrtzFiredTriggerDo) Order(conds ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrtzFiredTriggerDo) Distinct(cols ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrtzFiredTriggerDo) Omit(cols ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrtzFiredTriggerDo) Join(table schema.Tabler, on ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrtzFiredTriggerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrtzFiredTriggerDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrtzFiredTriggerDo) Group(cols ...field.Expr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrtzFiredTriggerDo) Having(conds ...gen.Condition) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrtzFiredTriggerDo) Limit(limit int) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrtzFiredTriggerDo) Offset(offset int) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrtzFiredTriggerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrtzFiredTriggerDo) Unscoped() IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrtzFiredTriggerDo) Create(values ...*model.QrtzFiredTrigger) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrtzFiredTriggerDo) CreateInBatches(values []*model.QrtzFiredTrigger, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrtzFiredTriggerDo) Save(values ...*model.QrtzFiredTrigger) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrtzFiredTriggerDo) First() (*model.QrtzFiredTrigger, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzFiredTrigger), nil
	}
}

func (q qrtzFiredTriggerDo) Take() (*model.QrtzFiredTrigger, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzFiredTrigger), nil
	}
}

func (q qrtzFiredTriggerDo) Last() (*model.QrtzFiredTrigger, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzFiredTrigger), nil
	}
}

func (q qrtzFiredTriggerDo) Find() ([]*model.QrtzFiredTrigger, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrtzFiredTrigger), err
}

func (q qrtzFiredTriggerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzFiredTrigger, err error) {
	buf := make([]*model.QrtzFiredTrigger, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrtzFiredTriggerDo) FindInBatches(result *[]*model.QrtzFiredTrigger, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrtzFiredTriggerDo) Attrs(attrs ...field.AssignExpr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrtzFiredTriggerDo) Assign(attrs ...field.AssignExpr) IQrtzFiredTriggerDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrtzFiredTriggerDo) Joins(fields ...field.RelationField) IQrtzFiredTriggerDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrtzFiredTriggerDo) Preload(fields ...field.RelationField) IQrtzFiredTriggerDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrtzFiredTriggerDo) FirstOrInit() (*model.QrtzFiredTrigger, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzFiredTrigger), nil
	}
}

func (q qrtzFiredTriggerDo) FirstOrCreate() (*model.QrtzFiredTrigger, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzFiredTrigger), nil
	}
}

func (q qrtzFiredTriggerDo) FindByPage(offset int, limit int) (result []*model.QrtzFiredTrigger, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrtzFiredTriggerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrtzFiredTriggerDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrtzFiredTriggerDo) Delete(models ...*model.QrtzFiredTrigger) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrtzFiredTriggerDo) withDO(do gen.Dao) *qrtzFiredTriggerDo {
	q.DO = *do.(*gen.DO)
	return q
}
