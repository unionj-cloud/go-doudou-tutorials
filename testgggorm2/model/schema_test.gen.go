// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"fmt"
	"testgggorm2/config"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/stringutils"
)

var TableNameSchemaTest string

func init() {
	if stringutils.IsNotEmpty(config.G_Config.Db.Name) {
		TableNameSchemaTest = fmt.Sprintf("%s.schema_test", config.G_Config.Db.Name)
	} else {
		TableNameSchemaTest = "schema_test"
	}
}

// SchemaTest mapped from table <schema_test>
type SchemaTest struct {
	ID            int32    `gorm:"column:id;type:int(11);primaryKey" json:"id,omitempty"`
	Id1           *int32   `gorm:"column:id1;type:int(11);uniqueIndex:id1,priority:1" json:"id1,omitempty"`
	Id2           int32    `gorm:"column:id2;type:int(11);primaryKey" json:"id2,omitempty"`
	Name          *string  `gorm:"column:name;type:varchar(256);index:name_idx,priority:1" json:"name,omitempty"`
	Status        *string  `gorm:"column:status;type:enum('appointing','serving','abnormal','stop','noaftermarket','finish','financial_audit')" json:"status,omitempty"`
	Se            *string  `gorm:"column:se;type:set('a','b','c')" json:"se,omitempty"`
	F             *float32 `gorm:"column:f;type:float" json:"f,omitempty"`
	D             *float64 `gorm:"column:d;type:decimal(2,1)" json:"d,omitempty"`
	Uint          *int32   `gorm:"column:uint;type:int(10) unsigned" json:"uint,omitempty"`
	Zfint         *int32   `gorm:"column:zfint;type:int(10) unsigned zerofill" json:"zfint,omitempty"`
	NameUcs       *string  `gorm:"column:name_ucs;type:varchar(256)" json:"nameUcs,omitempty"`
	NameUTF8      *string  `gorm:"column:name_utf8;type:varchar(256)" json:"nameUtf8,omitempty"`
	NameChar      *string  `gorm:"column:name_char;type:char(10)" json:"nameChar,omitempty"`
	NameBinary    *[]byte  `gorm:"column:name_binary;type:binary(11)" json:"nameBinary,omitempty"`
	NameVarbinary *[]byte  `gorm:"column:name_varbinary;type:varbinary(12)" json:"nameVarbinary,omitempty"`
}

// TableName SchemaTest's table name
func (*SchemaTest) TableName() string {
	return TableNameSchemaTest
}
