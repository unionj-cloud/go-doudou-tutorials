// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm2/model"
)

func newProductTypeAttribute(db *gorm.DB, opts ...gormgen.DOOption) productTypeAttribute {
	_productTypeAttribute := productTypeAttribute{}

	_productTypeAttribute.productTypeAttributeDo.UseDB(db, opts...)
	_productTypeAttribute.productTypeAttributeDo.UseModel(&model.ProductTypeAttribute{})

	tableName := _productTypeAttribute.productTypeAttributeDo.TableName()
	_productTypeAttribute.ALL = field.NewAsterisk(tableName)
	_productTypeAttribute.ID = field.NewInt32(tableName, "id")
	_productTypeAttribute.CateID = field.NewInt32(tableName, "cate_id")
	_productTypeAttribute.Title = field.NewString(tableName, "title")
	_productTypeAttribute.AttrType = field.NewInt32(tableName, "attr_type")
	_productTypeAttribute.AttrValue = field.NewString(tableName, "attr_value")
	_productTypeAttribute.Status = field.NewInt32(tableName, "status")
	_productTypeAttribute.Sort = field.NewInt32(tableName, "sort")
	_productTypeAttribute.AddTime = field.NewInt32(tableName, "add_time")

	_productTypeAttribute.fillFieldMap()

	return _productTypeAttribute
}

type productTypeAttribute struct {
	productTypeAttributeDo productTypeAttributeDo

	ALL       field.Asterisk
	ID        field.Int32
	CateID    field.Int32  // 分类编号
	Title     field.String // 标题
	AttrType  field.Int32  // 属性类型
	AttrValue field.String // 属性值
	Status    field.Int32  // 状态
	Sort      field.Int32  // 排序
	AddTime   field.Int32  // 添加时间

	fieldMap map[string]field.Expr
}

func (p productTypeAttribute) Table(newTableName string) *productTypeAttribute {
	p.productTypeAttributeDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productTypeAttribute) As(alias string) *productTypeAttribute {
	p.productTypeAttributeDo.DO = *(p.productTypeAttributeDo.As(alias).(*gormgen.DO))
	return p.updateTableName(alias)
}

func (p *productTypeAttribute) updateTableName(table string) *productTypeAttribute {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.CateID = field.NewInt32(table, "cate_id")
	p.Title = field.NewString(table, "title")
	p.AttrType = field.NewInt32(table, "attr_type")
	p.AttrValue = field.NewString(table, "attr_value")
	p.Status = field.NewInt32(table, "status")
	p.Sort = field.NewInt32(table, "sort")
	p.AddTime = field.NewInt32(table, "add_time")

	p.fillFieldMap()

	return p
}

func (p *productTypeAttribute) WithContext(ctx context.Context) IProductTypeAttributeDo {
	return p.productTypeAttributeDo.WithContext(ctx)
}

func (p productTypeAttribute) TableName() string { return p.productTypeAttributeDo.TableName() }

func (p productTypeAttribute) Alias() string { return p.productTypeAttributeDo.Alias() }

func (p productTypeAttribute) Columns(cols ...field.Expr) gormgen.Columns {
	return p.productTypeAttributeDo.Columns(cols...)
}

func (p *productTypeAttribute) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productTypeAttribute) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["cate_id"] = p.CateID
	p.fieldMap["title"] = p.Title
	p.fieldMap["attr_type"] = p.AttrType
	p.fieldMap["attr_value"] = p.AttrValue
	p.fieldMap["status"] = p.Status
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["add_time"] = p.AddTime
}

func (p productTypeAttribute) clone(db *gorm.DB) productTypeAttribute {
	p.productTypeAttributeDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productTypeAttribute) replaceDB(db *gorm.DB) productTypeAttribute {
	p.productTypeAttributeDo.ReplaceDB(db)
	return p
}

type productTypeAttributeDo struct{ gormgen.DO }

type IProductTypeAttributeDo interface {
	gormgen.SubQuery
	Debug() IProductTypeAttributeDo
	WithContext(ctx context.Context) IProductTypeAttributeDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductTypeAttributeDo
	WriteDB() IProductTypeAttributeDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IProductTypeAttributeDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IProductTypeAttributeDo
	Not(conds ...gormgen.Condition) IProductTypeAttributeDo
	Or(conds ...gormgen.Condition) IProductTypeAttributeDo
	Select(conds ...field.Expr) IProductTypeAttributeDo
	Where(conds ...gormgen.Condition) IProductTypeAttributeDo
	Order(conds ...field.Expr) IProductTypeAttributeDo
	Distinct(cols ...field.Expr) IProductTypeAttributeDo
	Omit(cols ...field.Expr) IProductTypeAttributeDo
	Join(table schema.Tabler, on ...field.Expr) IProductTypeAttributeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductTypeAttributeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductTypeAttributeDo
	Group(cols ...field.Expr) IProductTypeAttributeDo
	Having(conds ...gormgen.Condition) IProductTypeAttributeDo
	Limit(limit int) IProductTypeAttributeDo
	Offset(offset int) IProductTypeAttributeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IProductTypeAttributeDo
	Unscoped() IProductTypeAttributeDo
	Create(values ...*model.ProductTypeAttribute) error
	CreateInBatches(values []*model.ProductTypeAttribute, batchSize int) error
	Save(values ...*model.ProductTypeAttribute) error
	First() (*model.ProductTypeAttribute, error)
	Take() (*model.ProductTypeAttribute, error)
	Last() (*model.ProductTypeAttribute, error)
	Find() ([]*model.ProductTypeAttribute, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ProductTypeAttribute, err error)
	FindInBatches(result *[]*model.ProductTypeAttribute, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductTypeAttribute) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IProductTypeAttributeDo
	Assign(attrs ...field.AssignExpr) IProductTypeAttributeDo
	Joins(fields ...field.RelationField) IProductTypeAttributeDo
	Preload(fields ...field.RelationField) IProductTypeAttributeDo
	FirstOrInit() (*model.ProductTypeAttribute, error)
	FirstOrCreate() (*model.ProductTypeAttribute, error)
	FindByPage(offset int, limit int) (result []*model.ProductTypeAttribute, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductTypeAttributeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productTypeAttributeDo) Debug() IProductTypeAttributeDo {
	return p.withDO(p.DO.Debug())
}

func (p productTypeAttributeDo) WithContext(ctx context.Context) IProductTypeAttributeDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productTypeAttributeDo) ReadDB() IProductTypeAttributeDo {
	return p.Clauses(dbresolver.Read)
}

func (p productTypeAttributeDo) WriteDB() IProductTypeAttributeDo {
	return p.Clauses(dbresolver.Write)
}

func (p productTypeAttributeDo) Session(config *gorm.Session) IProductTypeAttributeDo {
	return p.withDO(p.DO.Session(config))
}

func (p productTypeAttributeDo) Clauses(conds ...clause.Expression) IProductTypeAttributeDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productTypeAttributeDo) Returning(value interface{}, columns ...string) IProductTypeAttributeDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productTypeAttributeDo) Not(conds ...gormgen.Condition) IProductTypeAttributeDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productTypeAttributeDo) Or(conds ...gormgen.Condition) IProductTypeAttributeDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productTypeAttributeDo) Select(conds ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productTypeAttributeDo) Where(conds ...gormgen.Condition) IProductTypeAttributeDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productTypeAttributeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProductTypeAttributeDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p productTypeAttributeDo) Order(conds ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productTypeAttributeDo) Distinct(cols ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productTypeAttributeDo) Omit(cols ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productTypeAttributeDo) Join(table schema.Tabler, on ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productTypeAttributeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productTypeAttributeDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productTypeAttributeDo) Group(cols ...field.Expr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productTypeAttributeDo) Having(conds ...gormgen.Condition) IProductTypeAttributeDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productTypeAttributeDo) Limit(limit int) IProductTypeAttributeDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productTypeAttributeDo) Offset(offset int) IProductTypeAttributeDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productTypeAttributeDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IProductTypeAttributeDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productTypeAttributeDo) Unscoped() IProductTypeAttributeDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productTypeAttributeDo) Create(values ...*model.ProductTypeAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productTypeAttributeDo) CreateInBatches(values []*model.ProductTypeAttribute, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productTypeAttributeDo) Save(values ...*model.ProductTypeAttribute) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productTypeAttributeDo) First() (*model.ProductTypeAttribute, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductTypeAttribute), nil
	}
}

func (p productTypeAttributeDo) Take() (*model.ProductTypeAttribute, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductTypeAttribute), nil
	}
}

func (p productTypeAttributeDo) Last() (*model.ProductTypeAttribute, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductTypeAttribute), nil
	}
}

func (p productTypeAttributeDo) Find() ([]*model.ProductTypeAttribute, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductTypeAttribute), err
}

func (p productTypeAttributeDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ProductTypeAttribute, err error) {
	buf := make([]*model.ProductTypeAttribute, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productTypeAttributeDo) FindInBatches(result *[]*model.ProductTypeAttribute, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productTypeAttributeDo) Attrs(attrs ...field.AssignExpr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productTypeAttributeDo) Assign(attrs ...field.AssignExpr) IProductTypeAttributeDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productTypeAttributeDo) Joins(fields ...field.RelationField) IProductTypeAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productTypeAttributeDo) Preload(fields ...field.RelationField) IProductTypeAttributeDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productTypeAttributeDo) FirstOrInit() (*model.ProductTypeAttribute, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductTypeAttribute), nil
	}
}

func (p productTypeAttributeDo) FirstOrCreate() (*model.ProductTypeAttribute, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductTypeAttribute), nil
	}
}

func (p productTypeAttributeDo) FindByPage(offset int, limit int) (result []*model.ProductTypeAttribute, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productTypeAttributeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productTypeAttributeDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productTypeAttributeDo) Delete(models ...*model.ProductTypeAttribute) (result gormgen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productTypeAttributeDo) withDO(do gormgen.Dao) *productTypeAttributeDo {
	p.DO = *do.(*gormgen.DO)
	return p
}
