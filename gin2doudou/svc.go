/**
* Generated by go-doudou v2.0.5.
* You can edit it as your need.
 */
package service

import (
	"context"
	"gin2doudou/dto"
)

//go:generate go-doudou svc http -c
//go:generate go-doudou svc grpc

// Gin2Doudou gin-admin
// RBAC scaffolding based on GIN + GORM + CASBIN + WIRE.
//
// 8.1.0
// tiannianshou@gmail.com
//
//
type Gin2Doudou interface {

	// ApiV1Menus 创建数据
	ApiV1Menus(ctx context.Context,
		bodyJSON dto.SchemaMenu) (
		ret dto.SchemaIDResult, err error)

	// ApiV1PubLogin 用户登录
	ApiV1PubLogin(ctx context.Context,
		bodyJSON dto.SchemaLoginParam) (
		ret dto.SchemaLoginTokenInfo, err error)

	// ApiV1PubLoginExit 用户登出
	ApiV1PubLoginExit(ctx context.Context) (
		ret dto.SchemaStatusResult, err error)

	// ApiV1PubRefreshtoken 刷新令牌
	ApiV1PubRefreshtoken(ctx context.Context) (
		ret dto.SchemaLoginTokenInfo, err error)

	// ApiV1Roles 创建数据
	ApiV1Roles(ctx context.Context,
		bodyJSON dto.SchemaRole) (
		ret dto.SchemaIDResult, err error)

	// ApiV1Users 创建数据
	ApiV1Users(ctx context.Context,
		bodyJSON dto.SchemaUser) (
		ret dto.SchemaIDResult, err error)

	// DeleteApiV1Menus_Id 删除数据
	DeleteApiV1Menus_Id(ctx context.Context,
		// 唯一标识
		// required
		id int) (
		ret dto.SchemaStatusResult, err error)

	// DeleteApiV1Roles_Id 删除数据
	DeleteApiV1Roles_Id(ctx context.Context,
		// 唯一标识
		// required
		id int) (
		ret dto.SchemaStatusResult, err error)

	// DeleteApiV1Users_Id 删除数据
	DeleteApiV1Users_Id(ctx context.Context,
		// 唯一标识
		// required
		id int) (
		ret dto.SchemaStatusResult, err error)

	// GetApiV1Menus 查询数据
	GetApiV1Menus(ctx context.Context,
		// 分页索引
		// required
		current int,
		// 分页大小
		// required
		pageSize int,
		// 查询值
		queryValue *string,
		// 状态(1:启用 2:禁用)
		status *int,
		// 是否显示(1:显示 2:隐藏)
		isShow *int,
		// 父级ID
		parentID *int) (
		ret interface{}, err error)

	// GetApiV1Menus_Id 查询指定数据
	GetApiV1Menus_Id(ctx context.Context,
		// 唯一标识
		// required
		id int) (
		ret dto.SchemaMenu, err error)

	// GetApiV1Menustree 查询菜单树
	GetApiV1Menustree(ctx context.Context,
		// 状态(1:启用 2:禁用)
		status *int,
		// 父级ID
		parentID *int) (
		ret interface{}, err error)

	// GetApiV1PubCurrentMenutree 查询当前用户菜单树
	GetApiV1PubCurrentMenutree(ctx context.Context) (
		ret interface{}, err error)

	// GetApiV1PubCurrentUser 获取当前用户信息
	GetApiV1PubCurrentUser(ctx context.Context) (
		ret dto.SchemaUserLoginInfo, err error)

	// GetApiV1PubLoginCaptcha 响应图形验证码
	GetApiV1PubLoginCaptcha(ctx context.Context,
		// 验证码ID
		// required
		id string,
		// 重新加载
		reload *string) (
		ret string, err error)

	// GetApiV1PubLoginCaptchaid 获取验证码信息
	GetApiV1PubLoginCaptchaid(ctx context.Context) (
		ret dto.SchemaLoginCaptcha, err error)

	// GetApiV1Roles 查询数据
	GetApiV1Roles(ctx context.Context,
		// 分页索引
		// required
		current int,
		// 分页大小
		// required
		pageSize int,
		// 查询值
		queryValue *string,
		// 状态(1:启用 2:禁用)
		status *int) (
		ret interface{}, err error)

	// GetApiV1Roles_Id 查询指定数据
	GetApiV1Roles_Id(ctx context.Context,
		// 唯一标识
		// required
		id int) (
		ret dto.SchemaRole, err error)

	// GetApiV1Rolesselect 查询选择数据
	GetApiV1Rolesselect(ctx context.Context,
		// 查询值
		queryValue *string,
		// 状态(1:启用 2:禁用)
		status *int) (
		ret interface{}, err error)

	// GetApiV1Users 查询数据
	GetApiV1Users(ctx context.Context,
		// 分页索引
		// required
		current int,
		// 分页大小
		// required
		pageSize int,
		// 查询值
		queryValue *string,
		// 角色ID(多个以英文逗号分隔)
		roleIDs *string,
		// 状态(1:启用 2:停用)
		status *int) (
		ret interface{}, err error)

	// GetApiV1Users_Id 查询指定数据
	GetApiV1Users_Id(ctx context.Context,
		// 唯一标识
		// required
		id int) (
		ret dto.SchemaUser, err error)

	// PutApiV1Menus_Id 更新数据
	PutApiV1Menus_Id(ctx context.Context,
		// 唯一标识
		// required
		id int,
		bodyJSON dto.SchemaMenu) (
		ret dto.SchemaStatusResult, err error)

	// PutApiV1PubCurrentPassword 更新个人密码
	PutApiV1PubCurrentPassword(ctx context.Context,
		bodyJSON dto.SchemaUpdatePasswordParam) (
		ret dto.SchemaStatusResult, err error)

	// PutApiV1Roles_Id 更新数据
	PutApiV1Roles_Id(ctx context.Context,
		// 唯一标识
		// required
		id int,
		bodyJSON dto.SchemaRole) (
		ret dto.SchemaRole, err error)

	// PutApiV1Users_Id 更新数据
	PutApiV1Users_Id(ctx context.Context,
		// 唯一标识
		// required
		id int,
		bodyJSON dto.SchemaUser) (
		ret dto.SchemaUser, err error)
}
