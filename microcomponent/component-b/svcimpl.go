/**
* Generated by go-doudou v2.1.4.
* You can edit it as your need.
 */
package service

import (
	"go-doudou-tutorials/microcomponent/component-b/config"
	pb "go-doudou-tutorials/microcomponent/component-b/transport/grpc"

	"github.com/pkg/errors"

	"context"

	"github.com/brianvoe/gofakeit/v6"
)

var _ ComponentB = (*ComponentBImpl)(nil)

var _ pb.ComponentBServiceServer = (*ComponentBImpl)(nil)

type ComponentBImpl struct {
	pb.UnimplementedComponentBServiceServer

	conf *config.Config
}

func NewComponentB(conf *config.Config) *ComponentBImpl {
	return &ComponentBImpl{
		conf: conf,
	}
}

func (receiver *ComponentBImpl) Greeting(ctx context.Context, msg string) (reply string, err error) {
	var _result struct {
		Reply string
	}
	_ = gofakeit.Struct(&_result)
	return _result.Reply, nil
}

func (receiver *ComponentBImpl) GreetingRpc(ctx context.Context, request *pb.GreetingRpcRequest) (*pb.GreetingRpcResponse, error) {
	resp, err := receiver.Greeting(ctx, request.Msg)
	if err != nil {
		return nil, errors.WithStack(err)
	}
	return &pb.GreetingRpcResponse{
		Reply: resp,
	}, nil
}
