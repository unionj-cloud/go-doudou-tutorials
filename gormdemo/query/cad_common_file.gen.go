// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormdemo/model"
)

func newCadCommonFile(db *gorm.DB, opts ...gen.DOOption) cadCommonFile {
	_cadCommonFile := cadCommonFile{}

	_cadCommonFile.cadCommonFileDo.UseDB(db, opts...)
	_cadCommonFile.cadCommonFileDo.UseModel(&model.CadCommonFile{})

	tableName := _cadCommonFile.cadCommonFileDo.TableName()
	_cadCommonFile.ALL = field.NewAsterisk(tableName)
	_cadCommonFile.ID = field.NewString(tableName, "id")
	_cadCommonFile.DelFlag = field.NewInt32(tableName, "del_flag")
	_cadCommonFile.RelateBusinessTable = field.NewString(tableName, "relate_business_table")
	_cadCommonFile.RelateBusinessID = field.NewString(tableName, "relate_business_id")
	_cadCommonFile.FileName = field.NewString(tableName, "file_name")
	_cadCommonFile.FileType = field.NewString(tableName, "file_type")
	_cadCommonFile.FileSize = field.NewInt64(tableName, "file_size")
	_cadCommonFile.FilePath = field.NewString(tableName, "file_path")
	_cadCommonFile.CreateTime = field.NewTime(tableName, "create_time")
	_cadCommonFile.CreateBy = field.NewString(tableName, "create_by")
	_cadCommonFile.SysOrgCode = field.NewString(tableName, "sys_org_code")

	_cadCommonFile.fillFieldMap()

	return _cadCommonFile
}

type cadCommonFile struct {
	cadCommonFileDo cadCommonFileDo

	ALL                 field.Asterisk
	ID                  field.String
	DelFlag             field.Int32
	RelateBusinessTable field.String
	RelateBusinessID    field.String
	FileName            field.String
	FileType            field.String
	FileSize            field.Int64
	FilePath            field.String
	CreateTime          field.Time
	CreateBy            field.String
	SysOrgCode          field.String

	fieldMap map[string]field.Expr
}

func (c cadCommonFile) Table(newTableName string) *cadCommonFile {
	c.cadCommonFileDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cadCommonFile) As(alias string) *cadCommonFile {
	c.cadCommonFileDo.DO = *(c.cadCommonFileDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cadCommonFile) updateTableName(table string) *cadCommonFile {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.DelFlag = field.NewInt32(table, "del_flag")
	c.RelateBusinessTable = field.NewString(table, "relate_business_table")
	c.RelateBusinessID = field.NewString(table, "relate_business_id")
	c.FileName = field.NewString(table, "file_name")
	c.FileType = field.NewString(table, "file_type")
	c.FileSize = field.NewInt64(table, "file_size")
	c.FilePath = field.NewString(table, "file_path")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewString(table, "create_by")
	c.SysOrgCode = field.NewString(table, "sys_org_code")

	c.fillFieldMap()

	return c
}

func (c *cadCommonFile) WithContext(ctx context.Context) ICadCommonFileDo {
	return c.cadCommonFileDo.WithContext(ctx)
}

func (c cadCommonFile) TableName() string { return c.cadCommonFileDo.TableName() }

func (c cadCommonFile) Alias() string { return c.cadCommonFileDo.Alias() }

func (c cadCommonFile) Columns(cols ...field.Expr) gen.Columns {
	return c.cadCommonFileDo.Columns(cols...)
}

func (c *cadCommonFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cadCommonFile) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["id"] = c.ID
	c.fieldMap["del_flag"] = c.DelFlag
	c.fieldMap["relate_business_table"] = c.RelateBusinessTable
	c.fieldMap["relate_business_id"] = c.RelateBusinessID
	c.fieldMap["file_name"] = c.FileName
	c.fieldMap["file_type"] = c.FileType
	c.fieldMap["file_size"] = c.FileSize
	c.fieldMap["file_path"] = c.FilePath
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["sys_org_code"] = c.SysOrgCode
}

func (c cadCommonFile) clone(db *gorm.DB) cadCommonFile {
	c.cadCommonFileDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cadCommonFile) replaceDB(db *gorm.DB) cadCommonFile {
	c.cadCommonFileDo.ReplaceDB(db)
	return c
}

type cadCommonFileDo struct{ gen.DO }

type ICadCommonFileDo interface {
	gen.SubQuery
	Debug() ICadCommonFileDo
	WithContext(ctx context.Context) ICadCommonFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICadCommonFileDo
	WriteDB() ICadCommonFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICadCommonFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICadCommonFileDo
	Not(conds ...gen.Condition) ICadCommonFileDo
	Or(conds ...gen.Condition) ICadCommonFileDo
	Select(conds ...field.Expr) ICadCommonFileDo
	Where(conds ...gen.Condition) ICadCommonFileDo
	Order(conds ...field.Expr) ICadCommonFileDo
	Distinct(cols ...field.Expr) ICadCommonFileDo
	Omit(cols ...field.Expr) ICadCommonFileDo
	Join(table schema.Tabler, on ...field.Expr) ICadCommonFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonFileDo
	Group(cols ...field.Expr) ICadCommonFileDo
	Having(conds ...gen.Condition) ICadCommonFileDo
	Limit(limit int) ICadCommonFileDo
	Offset(offset int) ICadCommonFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonFileDo
	Unscoped() ICadCommonFileDo
	Create(values ...*model.CadCommonFile) error
	CreateInBatches(values []*model.CadCommonFile, batchSize int) error
	Save(values ...*model.CadCommonFile) error
	First() (*model.CadCommonFile, error)
	Take() (*model.CadCommonFile, error)
	Last() (*model.CadCommonFile, error)
	Find() ([]*model.CadCommonFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonFile, err error)
	FindInBatches(result *[]*model.CadCommonFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CadCommonFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICadCommonFileDo
	Assign(attrs ...field.AssignExpr) ICadCommonFileDo
	Joins(fields ...field.RelationField) ICadCommonFileDo
	Preload(fields ...field.RelationField) ICadCommonFileDo
	FirstOrInit() (*model.CadCommonFile, error)
	FirstOrCreate() (*model.CadCommonFile, error)
	FindByPage(offset int, limit int) (result []*model.CadCommonFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICadCommonFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cadCommonFileDo) Debug() ICadCommonFileDo {
	return c.withDO(c.DO.Debug())
}

func (c cadCommonFileDo) WithContext(ctx context.Context) ICadCommonFileDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cadCommonFileDo) ReadDB() ICadCommonFileDo {
	return c.Clauses(dbresolver.Read)
}

func (c cadCommonFileDo) WriteDB() ICadCommonFileDo {
	return c.Clauses(dbresolver.Write)
}

func (c cadCommonFileDo) Session(config *gorm.Session) ICadCommonFileDo {
	return c.withDO(c.DO.Session(config))
}

func (c cadCommonFileDo) Clauses(conds ...clause.Expression) ICadCommonFileDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cadCommonFileDo) Returning(value interface{}, columns ...string) ICadCommonFileDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cadCommonFileDo) Not(conds ...gen.Condition) ICadCommonFileDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cadCommonFileDo) Or(conds ...gen.Condition) ICadCommonFileDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cadCommonFileDo) Select(conds ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cadCommonFileDo) Where(conds ...gen.Condition) ICadCommonFileDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cadCommonFileDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICadCommonFileDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cadCommonFileDo) Order(conds ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cadCommonFileDo) Distinct(cols ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cadCommonFileDo) Omit(cols ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cadCommonFileDo) Join(table schema.Tabler, on ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cadCommonFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cadCommonFileDo) RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cadCommonFileDo) Group(cols ...field.Expr) ICadCommonFileDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cadCommonFileDo) Having(conds ...gen.Condition) ICadCommonFileDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cadCommonFileDo) Limit(limit int) ICadCommonFileDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cadCommonFileDo) Offset(offset int) ICadCommonFileDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cadCommonFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonFileDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cadCommonFileDo) Unscoped() ICadCommonFileDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cadCommonFileDo) Create(values ...*model.CadCommonFile) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cadCommonFileDo) CreateInBatches(values []*model.CadCommonFile, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cadCommonFileDo) Save(values ...*model.CadCommonFile) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cadCommonFileDo) First() (*model.CadCommonFile, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFile), nil
	}
}

func (c cadCommonFileDo) Take() (*model.CadCommonFile, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFile), nil
	}
}

func (c cadCommonFileDo) Last() (*model.CadCommonFile, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFile), nil
	}
}

func (c cadCommonFileDo) Find() ([]*model.CadCommonFile, error) {
	result, err := c.DO.Find()
	return result.([]*model.CadCommonFile), err
}

func (c cadCommonFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonFile, err error) {
	buf := make([]*model.CadCommonFile, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cadCommonFileDo) FindInBatches(result *[]*model.CadCommonFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cadCommonFileDo) Attrs(attrs ...field.AssignExpr) ICadCommonFileDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cadCommonFileDo) Assign(attrs ...field.AssignExpr) ICadCommonFileDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cadCommonFileDo) Joins(fields ...field.RelationField) ICadCommonFileDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cadCommonFileDo) Preload(fields ...field.RelationField) ICadCommonFileDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cadCommonFileDo) FirstOrInit() (*model.CadCommonFile, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFile), nil
	}
}

func (c cadCommonFileDo) FirstOrCreate() (*model.CadCommonFile, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFile), nil
	}
}

func (c cadCommonFileDo) FindByPage(offset int, limit int) (result []*model.CadCommonFile, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cadCommonFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cadCommonFileDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cadCommonFileDo) Delete(models ...*model.CadCommonFile) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cadCommonFileDo) withDO(do gen.Dao) *cadCommonFileDo {
	c.DO = *do.(*gen.DO)
	return c
}
