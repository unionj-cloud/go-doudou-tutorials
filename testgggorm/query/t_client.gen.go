// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm/model"
)

func newTClient(db *gorm.DB, opts ...gormgen.DOOption) tClient {
	_tClient := tClient{}

	_tClient.tClientDo.UseDB(db, opts...)
	_tClient.tClientDo.UseModel(&model.TClient{})

	tableName := _tClient.tClientDo.TableName()
	_tClient.ALL = field.NewAsterisk(tableName)
	_tClient.ID = field.NewInt32(tableName, "id")
	_tClient.Name = field.NewString(tableName, "name")
	_tClient.PublicKey = field.NewString(tableName, "public_key")
	_tClient.EncryptedSecret = field.NewString(tableName, "encrypted_secret")
	_tClient.CreateAt = field.NewTime(tableName, "create_at")
	_tClient.UpdateAt = field.NewTime(tableName, "update_at")
	_tClient.DeleteAt = field.NewTime(tableName, "delete_at")

	_tClient.fillFieldMap()

	return _tClient
}

type tClient struct {
	tClientDo tClientDo

	ALL             field.Asterisk
	ID              field.Int32
	Name            field.String // client name 客户端名称
	PublicKey       field.String
	EncryptedSecret field.String
	CreateAt        field.Time
	UpdateAt        field.Time
	DeleteAt        field.Time

	fieldMap map[string]field.Expr
}

func (t tClient) Table(newTableName string) *tClient {
	t.tClientDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tClient) As(alias string) *tClient {
	t.tClientDo.DO = *(t.tClientDo.As(alias).(*gormgen.DO))
	return t.updateTableName(alias)
}

func (t *tClient) updateTableName(table string) *tClient {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.PublicKey = field.NewString(table, "public_key")
	t.EncryptedSecret = field.NewString(table, "encrypted_secret")
	t.CreateAt = field.NewTime(table, "create_at")
	t.UpdateAt = field.NewTime(table, "update_at")
	t.DeleteAt = field.NewTime(table, "delete_at")

	t.fillFieldMap()

	return t
}

func (t *tClient) WithContext(ctx context.Context) ITClientDo { return t.tClientDo.WithContext(ctx) }

func (t tClient) TableName() string { return t.tClientDo.TableName() }

func (t tClient) Alias() string { return t.tClientDo.Alias() }

func (t tClient) Columns(cols ...field.Expr) gormgen.Columns { return t.tClientDo.Columns(cols...) }

func (t *tClient) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tClient) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["public_key"] = t.PublicKey
	t.fieldMap["encrypted_secret"] = t.EncryptedSecret
	t.fieldMap["create_at"] = t.CreateAt
	t.fieldMap["update_at"] = t.UpdateAt
	t.fieldMap["delete_at"] = t.DeleteAt
}

func (t tClient) clone(db *gorm.DB) tClient {
	t.tClientDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tClient) replaceDB(db *gorm.DB) tClient {
	t.tClientDo.ReplaceDB(db)
	return t
}

type tClientDo struct{ gormgen.DO }

type ITClientDo interface {
	gormgen.SubQuery
	Debug() ITClientDo
	WithContext(ctx context.Context) ITClientDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITClientDo
	WriteDB() ITClientDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) ITClientDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) ITClientDo
	Not(conds ...gormgen.Condition) ITClientDo
	Or(conds ...gormgen.Condition) ITClientDo
	Select(conds ...field.Expr) ITClientDo
	Where(conds ...gormgen.Condition) ITClientDo
	Order(conds ...field.Expr) ITClientDo
	Distinct(cols ...field.Expr) ITClientDo
	Omit(cols ...field.Expr) ITClientDo
	Join(table schema.Tabler, on ...field.Expr) ITClientDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITClientDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITClientDo
	Group(cols ...field.Expr) ITClientDo
	Having(conds ...gormgen.Condition) ITClientDo
	Limit(limit int) ITClientDo
	Offset(offset int) ITClientDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITClientDo
	Unscoped() ITClientDo
	Create(values ...*model.TClient) error
	CreateInBatches(values []*model.TClient, batchSize int) error
	Save(values ...*model.TClient) error
	First() (*model.TClient, error)
	Take() (*model.TClient, error)
	Last() (*model.TClient, error)
	Find() ([]*model.TClient, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TClient, err error)
	FindInBatches(result *[]*model.TClient, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TClient) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) ITClientDo
	Assign(attrs ...field.AssignExpr) ITClientDo
	Joins(fields ...field.RelationField) ITClientDo
	Preload(fields ...field.RelationField) ITClientDo
	FirstOrInit() (*model.TClient, error)
	FirstOrCreate() (*model.TClient, error)
	FindByPage(offset int, limit int) (result []*model.TClient, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITClientDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tClientDo) Debug() ITClientDo {
	return t.withDO(t.DO.Debug())
}

func (t tClientDo) WithContext(ctx context.Context) ITClientDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tClientDo) ReadDB() ITClientDo {
	return t.Clauses(dbresolver.Read)
}

func (t tClientDo) WriteDB() ITClientDo {
	return t.Clauses(dbresolver.Write)
}

func (t tClientDo) Session(config *gorm.Session) ITClientDo {
	return t.withDO(t.DO.Session(config))
}

func (t tClientDo) Clauses(conds ...clause.Expression) ITClientDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tClientDo) Returning(value interface{}, columns ...string) ITClientDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tClientDo) Not(conds ...gormgen.Condition) ITClientDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tClientDo) Or(conds ...gormgen.Condition) ITClientDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tClientDo) Select(conds ...field.Expr) ITClientDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tClientDo) Where(conds ...gormgen.Condition) ITClientDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tClientDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITClientDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tClientDo) Order(conds ...field.Expr) ITClientDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tClientDo) Distinct(cols ...field.Expr) ITClientDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tClientDo) Omit(cols ...field.Expr) ITClientDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tClientDo) Join(table schema.Tabler, on ...field.Expr) ITClientDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tClientDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITClientDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tClientDo) RightJoin(table schema.Tabler, on ...field.Expr) ITClientDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tClientDo) Group(cols ...field.Expr) ITClientDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tClientDo) Having(conds ...gormgen.Condition) ITClientDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tClientDo) Limit(limit int) ITClientDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tClientDo) Offset(offset int) ITClientDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tClientDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITClientDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tClientDo) Unscoped() ITClientDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tClientDo) Create(values ...*model.TClient) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tClientDo) CreateInBatches(values []*model.TClient, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tClientDo) Save(values ...*model.TClient) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tClientDo) First() (*model.TClient, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClient), nil
	}
}

func (t tClientDo) Take() (*model.TClient, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClient), nil
	}
}

func (t tClientDo) Last() (*model.TClient, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClient), nil
	}
}

func (t tClientDo) Find() ([]*model.TClient, error) {
	result, err := t.DO.Find()
	return result.([]*model.TClient), err
}

func (t tClientDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TClient, err error) {
	buf := make([]*model.TClient, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tClientDo) FindInBatches(result *[]*model.TClient, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tClientDo) Attrs(attrs ...field.AssignExpr) ITClientDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tClientDo) Assign(attrs ...field.AssignExpr) ITClientDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tClientDo) Joins(fields ...field.RelationField) ITClientDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tClientDo) Preload(fields ...field.RelationField) ITClientDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tClientDo) FirstOrInit() (*model.TClient, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClient), nil
	}
}

func (t tClientDo) FirstOrCreate() (*model.TClient, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClient), nil
	}
}

func (t tClientDo) FindByPage(offset int, limit int) (result []*model.TClient, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tClientDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tClientDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tClientDo) Delete(models ...*model.TClient) (result gormgen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tClientDo) withDO(do gormgen.Dao) *tClientDo {
	t.DO = *do.(*gormgen.DO)
	return t
}
