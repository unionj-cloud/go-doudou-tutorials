// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WordcloudTaskServiceClient is the client API for WordcloudTaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WordcloudTaskServiceClient interface {
	// TaskSave save word cloud task 保存词云图任务
	TaskSaveRpc(ctx context.Context, in *TaskPayload, opts ...grpc.CallOption) (*TaskSaveRpcResponse, error)
	// TaskSuccess task success 任务执行成功接口
	TaskSuccessRpc(ctx context.Context, in *TaskSuccess, opts ...grpc.CallOption) (*TaskSuccessRpcResponse, error)
	// TaskFail task fail 任务执行失败接口
	TaskFailRpc(ctx context.Context, in *TaskFail, opts ...grpc.CallOption) (*TaskFailRpcResponse, error)
	// TaskPage
	TaskPageRpc(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*TaskPageRet, error)
}

type wordcloudTaskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWordcloudTaskServiceClient(cc grpc.ClientConnInterface) WordcloudTaskServiceClient {
	return &wordcloudTaskServiceClient{cc}
}

func (c *wordcloudTaskServiceClient) TaskSaveRpc(ctx context.Context, in *TaskPayload, opts ...grpc.CallOption) (*TaskSaveRpcResponse, error) {
	out := new(TaskSaveRpcResponse)
	err := c.cc.Invoke(ctx, "/wordcloud_task.WordcloudTaskService/TaskSaveRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordcloudTaskServiceClient) TaskSuccessRpc(ctx context.Context, in *TaskSuccess, opts ...grpc.CallOption) (*TaskSuccessRpcResponse, error) {
	out := new(TaskSuccessRpcResponse)
	err := c.cc.Invoke(ctx, "/wordcloud_task.WordcloudTaskService/TaskSuccessRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordcloudTaskServiceClient) TaskFailRpc(ctx context.Context, in *TaskFail, opts ...grpc.CallOption) (*TaskFailRpcResponse, error) {
	out := new(TaskFailRpcResponse)
	err := c.cc.Invoke(ctx, "/wordcloud_task.WordcloudTaskService/TaskFailRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wordcloudTaskServiceClient) TaskPageRpc(ctx context.Context, in *PageQuery, opts ...grpc.CallOption) (*TaskPageRet, error) {
	out := new(TaskPageRet)
	err := c.cc.Invoke(ctx, "/wordcloud_task.WordcloudTaskService/TaskPageRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordcloudTaskServiceServer is the server API for WordcloudTaskService service.
// All implementations must embed UnimplementedWordcloudTaskServiceServer
// for forward compatibility
type WordcloudTaskServiceServer interface {
	// TaskSave save word cloud task 保存词云图任务
	TaskSaveRpc(context.Context, *TaskPayload) (*TaskSaveRpcResponse, error)
	// TaskSuccess task success 任务执行成功接口
	TaskSuccessRpc(context.Context, *TaskSuccess) (*TaskSuccessRpcResponse, error)
	// TaskFail task fail 任务执行失败接口
	TaskFailRpc(context.Context, *TaskFail) (*TaskFailRpcResponse, error)
	// TaskPage
	TaskPageRpc(context.Context, *PageQuery) (*TaskPageRet, error)
	mustEmbedUnimplementedWordcloudTaskServiceServer()
}

// UnimplementedWordcloudTaskServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWordcloudTaskServiceServer struct {
}

func (UnimplementedWordcloudTaskServiceServer) TaskSaveRpc(context.Context, *TaskPayload) (*TaskSaveRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSaveRpc not implemented")
}
func (UnimplementedWordcloudTaskServiceServer) TaskSuccessRpc(context.Context, *TaskSuccess) (*TaskSuccessRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSuccessRpc not implemented")
}
func (UnimplementedWordcloudTaskServiceServer) TaskFailRpc(context.Context, *TaskFail) (*TaskFailRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskFailRpc not implemented")
}
func (UnimplementedWordcloudTaskServiceServer) TaskPageRpc(context.Context, *PageQuery) (*TaskPageRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskPageRpc not implemented")
}
func (UnimplementedWordcloudTaskServiceServer) mustEmbedUnimplementedWordcloudTaskServiceServer() {}

// UnsafeWordcloudTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WordcloudTaskServiceServer will
// result in compilation errors.
type UnsafeWordcloudTaskServiceServer interface {
	mustEmbedUnimplementedWordcloudTaskServiceServer()
}

func RegisterWordcloudTaskServiceServer(s grpc.ServiceRegistrar, srv WordcloudTaskServiceServer) {
	s.RegisterService(&WordcloudTaskService_ServiceDesc, srv)
}

func _WordcloudTaskService_TaskSaveRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordcloudTaskServiceServer).TaskSaveRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordcloud_task.WordcloudTaskService/TaskSaveRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordcloudTaskServiceServer).TaskSaveRpc(ctx, req.(*TaskPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordcloudTaskService_TaskSuccessRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSuccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordcloudTaskServiceServer).TaskSuccessRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordcloud_task.WordcloudTaskService/TaskSuccessRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordcloudTaskServiceServer).TaskSuccessRpc(ctx, req.(*TaskSuccess))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordcloudTaskService_TaskFailRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskFail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordcloudTaskServiceServer).TaskFailRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordcloud_task.WordcloudTaskService/TaskFailRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordcloudTaskServiceServer).TaskFailRpc(ctx, req.(*TaskFail))
	}
	return interceptor(ctx, in, info, handler)
}

func _WordcloudTaskService_TaskPageRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordcloudTaskServiceServer).TaskPageRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wordcloud_task.WordcloudTaskService/TaskPageRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordcloudTaskServiceServer).TaskPageRpc(ctx, req.(*PageQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// WordcloudTaskService_ServiceDesc is the grpc.ServiceDesc for WordcloudTaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WordcloudTaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wordcloud_task.WordcloudTaskService",
	HandlerType: (*WordcloudTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskSaveRpc",
			Handler:    _WordcloudTaskService_TaskSaveRpc_Handler,
		},
		{
			MethodName: "TaskSuccessRpc",
			Handler:    _WordcloudTaskService_TaskSuccessRpc_Handler,
		},
		{
			MethodName: "TaskFailRpc",
			Handler:    _WordcloudTaskService_TaskFailRpc_Handler,
		},
		{
			MethodName: "TaskPageRpc",
			Handler:    _WordcloudTaskService_TaskPageRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/wordcloudtask.proto",
}
