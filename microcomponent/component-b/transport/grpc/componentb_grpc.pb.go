// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: transport/grpc/componentb.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComponentBServiceClient is the client API for ComponentBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentBServiceClient interface {
	GreetingRpc(ctx context.Context, in *GreetingRpcRequest, opts ...grpc.CallOption) (*GreetingRpcResponse, error)
}

type componentBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentBServiceClient(cc grpc.ClientConnInterface) ComponentBServiceClient {
	return &componentBServiceClient{cc}
}

func (c *componentBServiceClient) GreetingRpc(ctx context.Context, in *GreetingRpcRequest, opts ...grpc.CallOption) (*GreetingRpcResponse, error) {
	out := new(GreetingRpcResponse)
	err := c.cc.Invoke(ctx, "/component_b.ComponentBService/GreetingRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComponentBServiceServer is the server API for ComponentBService service.
// All implementations must embed UnimplementedComponentBServiceServer
// for forward compatibility
type ComponentBServiceServer interface {
	GreetingRpc(context.Context, *GreetingRpcRequest) (*GreetingRpcResponse, error)
	mustEmbedUnimplementedComponentBServiceServer()
}

// UnimplementedComponentBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComponentBServiceServer struct {
}

func (UnimplementedComponentBServiceServer) GreetingRpc(context.Context, *GreetingRpcRequest) (*GreetingRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreetingRpc not implemented")
}
func (UnimplementedComponentBServiceServer) mustEmbedUnimplementedComponentBServiceServer() {}

// UnsafeComponentBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentBServiceServer will
// result in compilation errors.
type UnsafeComponentBServiceServer interface {
	mustEmbedUnimplementedComponentBServiceServer()
}

func RegisterComponentBServiceServer(s grpc.ServiceRegistrar, srv ComponentBServiceServer) {
	s.RegisterService(&ComponentBService_ServiceDesc, srv)
}

func _ComponentBService_GreetingRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetingRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComponentBServiceServer).GreetingRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/component_b.ComponentBService/GreetingRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComponentBServiceServer).GreetingRpc(ctx, req.(*GreetingRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ComponentBService_ServiceDesc is the grpc.ServiceDesc for ComponentBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "component_b.ComponentBService",
	HandlerType: (*ComponentBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GreetingRpc",
			Handler:    _ComponentBService_GreetingRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/componentb.proto",
}
