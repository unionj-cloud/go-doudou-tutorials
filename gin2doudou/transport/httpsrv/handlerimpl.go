/**
* Generated by go-doudou v2.0.5.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	service "gin2doudou"
	"gin2doudou/dto"
	"net/http"

	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest/httprouter"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"
)

type Gin2DoudouHandlerImpl struct {
	gin2Doudou service.Gin2Doudou
}

func (receiver *Gin2DoudouHandlerImpl) ApiV1Menus(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		bodyJSON dto.SchemaMenu
		ret      dto.SchemaIDResult
		err      error
	)
	ctx = _req.Context()
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.ApiV1Menus(
		ctx,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaIDResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) ApiV1PubLogin(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		bodyJSON dto.SchemaLoginParam
		ret      dto.SchemaLoginTokenInfo
		err      error
	)
	ctx = _req.Context()
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.ApiV1PubLogin(
		ctx,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaLoginTokenInfo `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) ApiV1PubLoginExit(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		ret dto.SchemaStatusResult
		err error
	)
	ctx = _req.Context()
	ret, err = receiver.gin2Doudou.ApiV1PubLoginExit(
		ctx,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaStatusResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) ApiV1PubRefreshtoken(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		ret dto.SchemaLoginTokenInfo
		err error
	)
	ctx = _req.Context()
	ret, err = receiver.gin2Doudou.ApiV1PubRefreshtoken(
		ctx,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaLoginTokenInfo `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) ApiV1Roles(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		bodyJSON dto.SchemaRole
		ret      dto.SchemaIDResult
		err      error
	)
	ctx = _req.Context()
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.ApiV1Roles(
		ctx,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaIDResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) ApiV1Users(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		bodyJSON dto.SchemaUser
		ret      dto.SchemaIDResult
		err      error
	)
	ctx = _req.Context()
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.ApiV1Users(
		ctx,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaIDResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) DeleteApiV1Menus_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int
		ret dto.SchemaStatusResult
		err error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	ret, err = receiver.gin2Doudou.DeleteApiV1Menus_Id(
		ctx,
		id,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaStatusResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) DeleteApiV1Roles_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int
		ret dto.SchemaStatusResult
		err error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	ret, err = receiver.gin2Doudou.DeleteApiV1Roles_Id(
		ctx,
		id,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaStatusResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) DeleteApiV1Users_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int
		ret dto.SchemaStatusResult
		err error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	ret, err = receiver.gin2Doudou.DeleteApiV1Users_Id(
		ctx,
		id,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaStatusResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Menus(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx        context.Context
		current    int
		pageSize   int
		queryValue *string
		status     *int
		isShow     *int
		parentID   *int
		ret        interface{}
		err        error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["current"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("current")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			current = casted
		}
		if _err := rest.ValidateVar(current, "", "current"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	} else {
		http.Error(_writer, "missing parameter current", http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["pageSize"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("pageSize")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			pageSize = casted
		}
		if _err := rest.ValidateVar(pageSize, "", "pageSize"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	} else {
		http.Error(_writer, "missing parameter pageSize", http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["queryValue"]; exists {
		_queryValue := _req.FormValue("queryValue")
		queryValue = &_queryValue
		if _err := rest.ValidateVar(queryValue, "", "queryValue"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["status"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("status")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			status = &casted
		}
		if _err := rest.ValidateVar(status, "", "status"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["isShow"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("isShow")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			isShow = &casted
		}
		if _err := rest.ValidateVar(isShow, "", "isShow"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["parentID"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("parentID")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			parentID = &casted
		}
		if _err := rest.ValidateVar(parentID, "", "parentID"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	ret, err = receiver.gin2Doudou.GetApiV1Menus(
		ctx,
		current,
		pageSize,
		queryValue,
		status,
		isShow,
		parentID,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret interface{} `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Menus_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int
		ret dto.SchemaMenu
		err error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	ret, err = receiver.gin2Doudou.GetApiV1Menus_Id(
		ctx,
		id,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaMenu `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Menustree(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		status   *int
		parentID *int
		ret      interface{}
		err      error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["status"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("status")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			status = &casted
		}
		if _err := rest.ValidateVar(status, "", "status"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["parentID"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("parentID")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			parentID = &casted
		}
		if _err := rest.ValidateVar(parentID, "", "parentID"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	ret, err = receiver.gin2Doudou.GetApiV1Menustree(
		ctx,
		status,
		parentID,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret interface{} `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1PubCurrentMenutree(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		ret interface{}
		err error
	)
	ctx = _req.Context()
	ret, err = receiver.gin2Doudou.GetApiV1PubCurrentMenutree(
		ctx,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret interface{} `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1PubCurrentUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		ret dto.SchemaUserLoginInfo
		err error
	)
	ctx = _req.Context()
	ret, err = receiver.gin2Doudou.GetApiV1PubCurrentUser(
		ctx,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaUserLoginInfo `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1PubLoginCaptcha(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx    context.Context
		id     string
		reload *string
		ret    string
		err    error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["id"]; exists {
		id = _req.FormValue("id")
		if _err := rest.ValidateVar(id, "", "id"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	} else {
		http.Error(_writer, "missing parameter id", http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["reload"]; exists {
		_reload := _req.FormValue("reload")
		reload = &_reload
		if _err := rest.ValidateVar(reload, "", "reload"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	ret, err = receiver.gin2Doudou.GetApiV1PubLoginCaptcha(
		ctx,
		id,
		reload,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret string `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1PubLoginCaptchaid(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		ret dto.SchemaLoginCaptcha
		err error
	)
	ctx = _req.Context()
	ret, err = receiver.gin2Doudou.GetApiV1PubLoginCaptchaid(
		ctx,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaLoginCaptcha `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Roles(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx        context.Context
		current    int
		pageSize   int
		queryValue *string
		status     *int
		ret        interface{}
		err        error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["current"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("current")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			current = casted
		}
		if _err := rest.ValidateVar(current, "", "current"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	} else {
		http.Error(_writer, "missing parameter current", http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["pageSize"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("pageSize")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			pageSize = casted
		}
		if _err := rest.ValidateVar(pageSize, "", "pageSize"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	} else {
		http.Error(_writer, "missing parameter pageSize", http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["queryValue"]; exists {
		_queryValue := _req.FormValue("queryValue")
		queryValue = &_queryValue
		if _err := rest.ValidateVar(queryValue, "", "queryValue"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["status"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("status")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			status = &casted
		}
		if _err := rest.ValidateVar(status, "", "status"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	ret, err = receiver.gin2Doudou.GetApiV1Roles(
		ctx,
		current,
		pageSize,
		queryValue,
		status,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret interface{} `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Roles_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int
		ret dto.SchemaRole
		err error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	ret, err = receiver.gin2Doudou.GetApiV1Roles_Id(
		ctx,
		id,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaRole `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Rolesselect(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx        context.Context
		queryValue *string
		status     *int
		ret        interface{}
		err        error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["queryValue"]; exists {
		_queryValue := _req.FormValue("queryValue")
		queryValue = &_queryValue
		if _err := rest.ValidateVar(queryValue, "", "queryValue"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["status"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("status")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			status = &casted
		}
		if _err := rest.ValidateVar(status, "", "status"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	ret, err = receiver.gin2Doudou.GetApiV1Rolesselect(
		ctx,
		queryValue,
		status,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret interface{} `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Users(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx        context.Context
		current    int
		pageSize   int
		queryValue *string
		roleIDs    *string
		status     *int
		ret        interface{}
		err        error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["current"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("current")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			current = casted
		}
		if _err := rest.ValidateVar(current, "", "current"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	} else {
		http.Error(_writer, "missing parameter current", http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["pageSize"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("pageSize")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			pageSize = casted
		}
		if _err := rest.ValidateVar(pageSize, "", "pageSize"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	} else {
		http.Error(_writer, "missing parameter pageSize", http.StatusBadRequest)
		return
	}
	if _, exists := _req.Form["queryValue"]; exists {
		_queryValue := _req.FormValue("queryValue")
		queryValue = &_queryValue
		if _err := rest.ValidateVar(queryValue, "", "queryValue"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["roleIDs"]; exists {
		_roleIDs := _req.FormValue("roleIDs")
		roleIDs = &_roleIDs
		if _err := rest.ValidateVar(roleIDs, "", "roleIDs"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	if _, exists := _req.Form["status"]; exists {
		if casted, _err := cast.ToIntE(_req.FormValue("status")); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			status = &casted
		}
		if _err := rest.ValidateVar(status, "", "status"); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		}
	}
	ret, err = receiver.gin2Doudou.GetApiV1Users(
		ctx,
		current,
		pageSize,
		queryValue,
		roleIDs,
		status,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret interface{} `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) GetApiV1Users_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int
		ret dto.SchemaUser
		err error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	ret, err = receiver.gin2Doudou.GetApiV1Users_Id(
		ctx,
		id,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaUser `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) PutApiV1Menus_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		id       int
		bodyJSON dto.SchemaMenu
		ret      dto.SchemaStatusResult
		err      error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.PutApiV1Menus_Id(
		ctx,
		id,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaStatusResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) PutApiV1PubCurrentPassword(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		bodyJSON dto.SchemaUpdatePasswordParam
		ret      dto.SchemaStatusResult
		err      error
	)
	ctx = _req.Context()
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.PutApiV1PubCurrentPassword(
		ctx,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaStatusResult `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) PutApiV1Roles_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		id       int
		bodyJSON dto.SchemaRole
		ret      dto.SchemaRole
		err      error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.PutApiV1Roles_Id(
		ctx,
		id,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaRole `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *Gin2DoudouHandlerImpl) PutApiV1Users_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx      context.Context
		id       int
		bodyJSON dto.SchemaUser
		ret      dto.SchemaUser
		err      error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("id")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&bodyJSON); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(bodyJSON); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	ret, err = receiver.gin2Doudou.PutApiV1Users_Id(
		ctx,
		id,
		bodyJSON,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Ret dto.SchemaUser `json:"ret"`
	}{
		Ret: ret,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}

func NewGin2DoudouHandler(gin2Doudou service.Gin2Doudou) Gin2DoudouHandler {
	return &Gin2DoudouHandlerImpl{
		gin2Doudou,
	}
}
