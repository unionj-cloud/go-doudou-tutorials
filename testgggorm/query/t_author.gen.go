// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm/model"
)

func newTAuthor(db *gorm.DB, opts ...gormgen.DOOption) tAuthor {
	_tAuthor := tAuthor{}

	_tAuthor.tAuthorDo.UseDB(db, opts...)
	_tAuthor.tAuthorDo.UseModel(&model.TAuthor{})

	tableName := _tAuthor.tAuthorDo.TableName()
	_tAuthor.ALL = field.NewAsterisk(tableName)
	_tAuthor.ID = field.NewInt32(tableName, "id")
	_tAuthor.Book = field.NewString(tableName, "book")
	_tAuthor.DeleteAt = field.NewTime(tableName, "delete_at")

	_tAuthor.fillFieldMap()

	return _tAuthor
}

type tAuthor struct {
	tAuthorDo tAuthorDo

	ALL      field.Asterisk
	ID       field.Int32
	Book     field.String
	DeleteAt field.Time

	fieldMap map[string]field.Expr
}

func (t tAuthor) Table(newTableName string) *tAuthor {
	t.tAuthorDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAuthor) As(alias string) *tAuthor {
	t.tAuthorDo.DO = *(t.tAuthorDo.As(alias).(*gormgen.DO))
	return t.updateTableName(alias)
}

func (t *tAuthor) updateTableName(table string) *tAuthor {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Book = field.NewString(table, "book")
	t.DeleteAt = field.NewTime(table, "delete_at")

	t.fillFieldMap()

	return t
}

func (t *tAuthor) WithContext(ctx context.Context) ITAuthorDo { return t.tAuthorDo.WithContext(ctx) }

func (t tAuthor) TableName() string { return t.tAuthorDo.TableName() }

func (t tAuthor) Alias() string { return t.tAuthorDo.Alias() }

func (t tAuthor) Columns(cols ...field.Expr) gormgen.Columns { return t.tAuthorDo.Columns(cols...) }

func (t *tAuthor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAuthor) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["book"] = t.Book
	t.fieldMap["delete_at"] = t.DeleteAt
}

func (t tAuthor) clone(db *gorm.DB) tAuthor {
	t.tAuthorDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAuthor) replaceDB(db *gorm.DB) tAuthor {
	t.tAuthorDo.ReplaceDB(db)
	return t
}

type tAuthorDo struct{ gormgen.DO }

type ITAuthorDo interface {
	gormgen.SubQuery
	Debug() ITAuthorDo
	WithContext(ctx context.Context) ITAuthorDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAuthorDo
	WriteDB() ITAuthorDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) ITAuthorDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) ITAuthorDo
	Not(conds ...gormgen.Condition) ITAuthorDo
	Or(conds ...gormgen.Condition) ITAuthorDo
	Select(conds ...field.Expr) ITAuthorDo
	Where(conds ...gormgen.Condition) ITAuthorDo
	Order(conds ...field.Expr) ITAuthorDo
	Distinct(cols ...field.Expr) ITAuthorDo
	Omit(cols ...field.Expr) ITAuthorDo
	Join(table schema.Tabler, on ...field.Expr) ITAuthorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAuthorDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAuthorDo
	Group(cols ...field.Expr) ITAuthorDo
	Having(conds ...gormgen.Condition) ITAuthorDo
	Limit(limit int) ITAuthorDo
	Offset(offset int) ITAuthorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITAuthorDo
	Unscoped() ITAuthorDo
	Create(values ...*model.TAuthor) error
	CreateInBatches(values []*model.TAuthor, batchSize int) error
	Save(values ...*model.TAuthor) error
	First() (*model.TAuthor, error)
	Take() (*model.TAuthor, error)
	Last() (*model.TAuthor, error)
	Find() ([]*model.TAuthor, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TAuthor, err error)
	FindInBatches(result *[]*model.TAuthor, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAuthor) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) ITAuthorDo
	Assign(attrs ...field.AssignExpr) ITAuthorDo
	Joins(fields ...field.RelationField) ITAuthorDo
	Preload(fields ...field.RelationField) ITAuthorDo
	FirstOrInit() (*model.TAuthor, error)
	FirstOrCreate() (*model.TAuthor, error)
	FindByPage(offset int, limit int) (result []*model.TAuthor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAuthorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAuthorDo) Debug() ITAuthorDo {
	return t.withDO(t.DO.Debug())
}

func (t tAuthorDo) WithContext(ctx context.Context) ITAuthorDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAuthorDo) ReadDB() ITAuthorDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAuthorDo) WriteDB() ITAuthorDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAuthorDo) Session(config *gorm.Session) ITAuthorDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAuthorDo) Clauses(conds ...clause.Expression) ITAuthorDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAuthorDo) Returning(value interface{}, columns ...string) ITAuthorDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAuthorDo) Not(conds ...gormgen.Condition) ITAuthorDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAuthorDo) Or(conds ...gormgen.Condition) ITAuthorDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAuthorDo) Select(conds ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAuthorDo) Where(conds ...gormgen.Condition) ITAuthorDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAuthorDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITAuthorDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tAuthorDo) Order(conds ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAuthorDo) Distinct(cols ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAuthorDo) Omit(cols ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAuthorDo) Join(table schema.Tabler, on ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAuthorDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAuthorDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAuthorDo) Group(cols ...field.Expr) ITAuthorDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAuthorDo) Having(conds ...gormgen.Condition) ITAuthorDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAuthorDo) Limit(limit int) ITAuthorDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAuthorDo) Offset(offset int) ITAuthorDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAuthorDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITAuthorDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAuthorDo) Unscoped() ITAuthorDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAuthorDo) Create(values ...*model.TAuthor) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAuthorDo) CreateInBatches(values []*model.TAuthor, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAuthorDo) Save(values ...*model.TAuthor) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAuthorDo) First() (*model.TAuthor, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuthor), nil
	}
}

func (t tAuthorDo) Take() (*model.TAuthor, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuthor), nil
	}
}

func (t tAuthorDo) Last() (*model.TAuthor, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuthor), nil
	}
}

func (t tAuthorDo) Find() ([]*model.TAuthor, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAuthor), err
}

func (t tAuthorDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TAuthor, err error) {
	buf := make([]*model.TAuthor, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAuthorDo) FindInBatches(result *[]*model.TAuthor, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAuthorDo) Attrs(attrs ...field.AssignExpr) ITAuthorDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAuthorDo) Assign(attrs ...field.AssignExpr) ITAuthorDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAuthorDo) Joins(fields ...field.RelationField) ITAuthorDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAuthorDo) Preload(fields ...field.RelationField) ITAuthorDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAuthorDo) FirstOrInit() (*model.TAuthor, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuthor), nil
	}
}

func (t tAuthorDo) FirstOrCreate() (*model.TAuthor, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAuthor), nil
	}
}

func (t tAuthorDo) FindByPage(offset int, limit int) (result []*model.TAuthor, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAuthorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAuthorDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAuthorDo) Delete(models ...*model.TAuthor) (result gormgen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAuthorDo) withDO(do gormgen.Dao) *tAuthorDo {
	t.DO = *do.(*gormgen.DO)
	return t
}
