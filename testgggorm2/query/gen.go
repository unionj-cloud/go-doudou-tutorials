// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                    = new(Query)
	Address              *address
	Administrator        *administrator
	Auth                 *auth
	Banner               *banner
	Cart                 *cart
	Menu                 *menu
	Order                *order
	OrderItem            *orderItem
	Product              *product
	ProductAttr          *productAttr
	ProductCate          *productCate
	ProductColor         *productColor
	ProductImage         *productImage
	ProductType          *productType
	ProductTypeAttribute *productTypeAttribute
	Role                 *role
	RoleAuth             *roleAuth
	SchemaTest           *schemaTest
	Setting              *setting
	User                 *user
	UserSm               *userSm
)

func SetDefault(db *gorm.DB, opts ...gormgen.DOOption) {
	*Q = *Use(db, opts...)
	Address = &Q.Address
	Administrator = &Q.Administrator
	Auth = &Q.Auth
	Banner = &Q.Banner
	Cart = &Q.Cart
	Menu = &Q.Menu
	Order = &Q.Order
	OrderItem = &Q.OrderItem
	Product = &Q.Product
	ProductAttr = &Q.ProductAttr
	ProductCate = &Q.ProductCate
	ProductColor = &Q.ProductColor
	ProductImage = &Q.ProductImage
	ProductType = &Q.ProductType
	ProductTypeAttribute = &Q.ProductTypeAttribute
	Role = &Q.Role
	RoleAuth = &Q.RoleAuth
	SchemaTest = &Q.SchemaTest
	Setting = &Q.Setting
	User = &Q.User
	UserSm = &Q.UserSm
}

func Use(db *gorm.DB, opts ...gormgen.DOOption) *Query {
	return &Query{
		db:                   db,
		Address:              newAddress(db, opts...),
		Administrator:        newAdministrator(db, opts...),
		Auth:                 newAuth(db, opts...),
		Banner:               newBanner(db, opts...),
		Cart:                 newCart(db, opts...),
		Menu:                 newMenu(db, opts...),
		Order:                newOrder(db, opts...),
		OrderItem:            newOrderItem(db, opts...),
		Product:              newProduct(db, opts...),
		ProductAttr:          newProductAttr(db, opts...),
		ProductCate:          newProductCate(db, opts...),
		ProductColor:         newProductColor(db, opts...),
		ProductImage:         newProductImage(db, opts...),
		ProductType:          newProductType(db, opts...),
		ProductTypeAttribute: newProductTypeAttribute(db, opts...),
		Role:                 newRole(db, opts...),
		RoleAuth:             newRoleAuth(db, opts...),
		SchemaTest:           newSchemaTest(db, opts...),
		Setting:              newSetting(db, opts...),
		User:                 newUser(db, opts...),
		UserSm:               newUserSm(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Address              address
	Administrator        administrator
	Auth                 auth
	Banner               banner
	Cart                 cart
	Menu                 menu
	Order                order
	OrderItem            orderItem
	Product              product
	ProductAttr          productAttr
	ProductCate          productCate
	ProductColor         productColor
	ProductImage         productImage
	ProductType          productType
	ProductTypeAttribute productTypeAttribute
	Role                 role
	RoleAuth             roleAuth
	SchemaTest           schemaTest
	Setting              setting
	User                 user
	UserSm               userSm
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) Clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Address:              q.Address.clone(db),
		Administrator:        q.Administrator.clone(db),
		Auth:                 q.Auth.clone(db),
		Banner:               q.Banner.clone(db),
		Cart:                 q.Cart.clone(db),
		Menu:                 q.Menu.clone(db),
		Order:                q.Order.clone(db),
		OrderItem:            q.OrderItem.clone(db),
		Product:              q.Product.clone(db),
		ProductAttr:          q.ProductAttr.clone(db),
		ProductCate:          q.ProductCate.clone(db),
		ProductColor:         q.ProductColor.clone(db),
		ProductImage:         q.ProductImage.clone(db),
		ProductType:          q.ProductType.clone(db),
		ProductTypeAttribute: q.ProductTypeAttribute.clone(db),
		Role:                 q.Role.clone(db),
		RoleAuth:             q.RoleAuth.clone(db),
		SchemaTest:           q.SchemaTest.clone(db),
		Setting:              q.Setting.clone(db),
		User:                 q.User.clone(db),
		UserSm:               q.UserSm.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		Address:              q.Address.replaceDB(db),
		Administrator:        q.Administrator.replaceDB(db),
		Auth:                 q.Auth.replaceDB(db),
		Banner:               q.Banner.replaceDB(db),
		Cart:                 q.Cart.replaceDB(db),
		Menu:                 q.Menu.replaceDB(db),
		Order:                q.Order.replaceDB(db),
		OrderItem:            q.OrderItem.replaceDB(db),
		Product:              q.Product.replaceDB(db),
		ProductAttr:          q.ProductAttr.replaceDB(db),
		ProductCate:          q.ProductCate.replaceDB(db),
		ProductColor:         q.ProductColor.replaceDB(db),
		ProductImage:         q.ProductImage.replaceDB(db),
		ProductType:          q.ProductType.replaceDB(db),
		ProductTypeAttribute: q.ProductTypeAttribute.replaceDB(db),
		Role:                 q.Role.replaceDB(db),
		RoleAuth:             q.RoleAuth.replaceDB(db),
		SchemaTest:           q.SchemaTest.replaceDB(db),
		Setting:              q.Setting.replaceDB(db),
		User:                 q.User.replaceDB(db),
		UserSm:               q.UserSm.replaceDB(db),
	}
}

type queryCtx struct {
	Address              IAddressDo
	Administrator        IAdministratorDo
	Auth                 IAuthDo
	Banner               IBannerDo
	Cart                 ICartDo
	Menu                 IMenuDo
	Order                IOrderDo
	OrderItem            IOrderItemDo
	Product              IProductDo
	ProductAttr          IProductAttrDo
	ProductCate          IProductCateDo
	ProductColor         IProductColorDo
	ProductImage         IProductImageDo
	ProductType          IProductTypeDo
	ProductTypeAttribute IProductTypeAttributeDo
	Role                 IRoleDo
	RoleAuth             IRoleAuthDo
	SchemaTest           ISchemaTestDo
	Setting              ISettingDo
	User                 IUserDo
	UserSm               IUserSmDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Address:              q.Address.WithContext(ctx),
		Administrator:        q.Administrator.WithContext(ctx),
		Auth:                 q.Auth.WithContext(ctx),
		Banner:               q.Banner.WithContext(ctx),
		Cart:                 q.Cart.WithContext(ctx),
		Menu:                 q.Menu.WithContext(ctx),
		Order:                q.Order.WithContext(ctx),
		OrderItem:            q.OrderItem.WithContext(ctx),
		Product:              q.Product.WithContext(ctx),
		ProductAttr:          q.ProductAttr.WithContext(ctx),
		ProductCate:          q.ProductCate.WithContext(ctx),
		ProductColor:         q.ProductColor.WithContext(ctx),
		ProductImage:         q.ProductImage.WithContext(ctx),
		ProductType:          q.ProductType.WithContext(ctx),
		ProductTypeAttribute: q.ProductTypeAttribute.WithContext(ctx),
		Role:                 q.Role.WithContext(ctx),
		RoleAuth:             q.RoleAuth.WithContext(ctx),
		SchemaTest:           q.SchemaTest.WithContext(ctx),
		Setting:              q.Setting.WithContext(ctx),
		User:                 q.User.WithContext(ctx),
		UserSm:               q.UserSm.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.Clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.Clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
