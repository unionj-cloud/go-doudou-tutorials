// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsvcServiceClient is the client API for StatsvcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsvcServiceClient interface {
	AddRpc(ctx context.Context, in *AddRpcRequest, opts ...grpc.CallOption) (*AddRpcResponse, error)
	GetEchoRpc(ctx context.Context, in *GetEchoRpcRequest, opts ...grpc.CallOption) (*GetEchoRpcResponse, error)
}

type statsvcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsvcServiceClient(cc grpc.ClientConnInterface) StatsvcServiceClient {
	return &statsvcServiceClient{cc}
}

func (c *statsvcServiceClient) AddRpc(ctx context.Context, in *AddRpcRequest, opts ...grpc.CallOption) (*AddRpcResponse, error) {
	out := new(AddRpcResponse)
	err := c.cc.Invoke(ctx, "/statsvc.StatsvcService/AddRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsvcServiceClient) GetEchoRpc(ctx context.Context, in *GetEchoRpcRequest, opts ...grpc.CallOption) (*GetEchoRpcResponse, error) {
	out := new(GetEchoRpcResponse)
	err := c.cc.Invoke(ctx, "/statsvc.StatsvcService/GetEchoRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsvcServiceServer is the server API for StatsvcService service.
// All implementations must embed UnimplementedStatsvcServiceServer
// for forward compatibility
type StatsvcServiceServer interface {
	AddRpc(context.Context, *AddRpcRequest) (*AddRpcResponse, error)
	GetEchoRpc(context.Context, *GetEchoRpcRequest) (*GetEchoRpcResponse, error)
	mustEmbedUnimplementedStatsvcServiceServer()
}

// UnimplementedStatsvcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatsvcServiceServer struct {
}

func (UnimplementedStatsvcServiceServer) AddRpc(context.Context, *AddRpcRequest) (*AddRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRpc not implemented")
}
func (UnimplementedStatsvcServiceServer) GetEchoRpc(context.Context, *GetEchoRpcRequest) (*GetEchoRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEchoRpc not implemented")
}
func (UnimplementedStatsvcServiceServer) mustEmbedUnimplementedStatsvcServiceServer() {}

// UnsafeStatsvcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsvcServiceServer will
// result in compilation errors.
type UnsafeStatsvcServiceServer interface {
	mustEmbedUnimplementedStatsvcServiceServer()
}

func RegisterStatsvcServiceServer(s grpc.ServiceRegistrar, srv StatsvcServiceServer) {
	s.RegisterService(&StatsvcService_ServiceDesc, srv)
}

func _StatsvcService_AddRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsvcServiceServer).AddRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statsvc.StatsvcService/AddRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsvcServiceServer).AddRpc(ctx, req.(*AddRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsvcService_GetEchoRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEchoRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsvcServiceServer).GetEchoRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statsvc.StatsvcService/GetEchoRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsvcServiceServer).GetEchoRpc(ctx, req.(*GetEchoRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsvcService_ServiceDesc is the grpc.ServiceDesc for StatsvcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsvcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statsvc.StatsvcService",
	HandlerType: (*StatsvcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRpc",
			Handler:    _StatsvcService_AddRpc_Handler,
		},
		{
			MethodName: "GetEchoRpc",
			Handler:    _StatsvcService_GetEchoRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/statsvc.proto",
}
