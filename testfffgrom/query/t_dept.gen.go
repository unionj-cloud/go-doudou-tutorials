// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testfffgrom/model"
)

func newTDept(db *gorm.DB, opts ...gormgen.DOOption) tDept {
	_tDept := tDept{}

	_tDept.tDeptDo.UseDB(db, opts...)
	_tDept.tDeptDo.UseModel(&model.TDept{})

	tableName := _tDept.tDeptDo.TableName()
	_tDept.ALL = field.NewAsterisk(tableName)
	_tDept.ID = field.NewInt32(tableName, "id")
	_tDept.Name = field.NewString(tableName, "name")
	_tDept.DeletedAt = field.NewField(tableName, "deleted_at")

	_tDept.fillFieldMap()

	return _tDept
}

type tDept struct {
	tDeptDo tDeptDo

	ALL       field.Asterisk
	ID        field.Int32
	Name      field.String
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tDept) Table(newTableName string) *tDept {
	t.tDeptDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDept) As(alias string) *tDept {
	t.tDeptDo.DO = *(t.tDeptDo.As(alias).(*gormgen.DO))
	return t.updateTableName(alias)
}

func (t *tDept) updateTableName(table string) *tDept {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Name = field.NewString(table, "name")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tDept) WithContext(ctx context.Context) ITDeptDo { return t.tDeptDo.WithContext(ctx) }

func (t tDept) TableName() string { return t.tDeptDo.TableName() }

func (t tDept) Alias() string { return t.tDeptDo.Alias() }

func (t tDept) Columns(cols ...field.Expr) gormgen.Columns { return t.tDeptDo.Columns(cols...) }

func (t *tDept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDept) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tDept) clone(db *gorm.DB) tDept {
	t.tDeptDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tDept) replaceDB(db *gorm.DB) tDept {
	t.tDeptDo.ReplaceDB(db)
	return t
}

type tDeptDo struct{ gormgen.DO }

type ITDeptDo interface {
	gormgen.SubQuery
	Debug() ITDeptDo
	WithContext(ctx context.Context) ITDeptDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITDeptDo
	WriteDB() ITDeptDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) ITDeptDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) ITDeptDo
	Not(conds ...gormgen.Condition) ITDeptDo
	Or(conds ...gormgen.Condition) ITDeptDo
	Select(conds ...field.Expr) ITDeptDo
	Where(conds ...gormgen.Condition) ITDeptDo
	Order(conds ...field.Expr) ITDeptDo
	Distinct(cols ...field.Expr) ITDeptDo
	Omit(cols ...field.Expr) ITDeptDo
	Join(table schema.Tabler, on ...field.Expr) ITDeptDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITDeptDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITDeptDo
	Group(cols ...field.Expr) ITDeptDo
	Having(conds ...gormgen.Condition) ITDeptDo
	Limit(limit int) ITDeptDo
	Offset(offset int) ITDeptDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITDeptDo
	Unscoped() ITDeptDo
	Create(values ...*model.TDept) error
	CreateInBatches(values []*model.TDept, batchSize int) error
	Save(values ...*model.TDept) error
	First() (*model.TDept, error)
	Take() (*model.TDept, error)
	Last() (*model.TDept, error)
	Find() ([]*model.TDept, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TDept, err error)
	FindInBatches(result *[]*model.TDept, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TDept) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) ITDeptDo
	Assign(attrs ...field.AssignExpr) ITDeptDo
	Joins(fields ...field.RelationField) ITDeptDo
	Preload(fields ...field.RelationField) ITDeptDo
	FirstOrInit() (*model.TDept, error)
	FirstOrCreate() (*model.TDept, error)
	FindByPage(offset int, limit int) (result []*model.TDept, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITDeptDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tDeptDo) Debug() ITDeptDo {
	return t.withDO(t.DO.Debug())
}

func (t tDeptDo) WithContext(ctx context.Context) ITDeptDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDeptDo) ReadDB() ITDeptDo {
	return t.Clauses(dbresolver.Read)
}

func (t tDeptDo) WriteDB() ITDeptDo {
	return t.Clauses(dbresolver.Write)
}

func (t tDeptDo) Session(config *gorm.Session) ITDeptDo {
	return t.withDO(t.DO.Session(config))
}

func (t tDeptDo) Clauses(conds ...clause.Expression) ITDeptDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDeptDo) Returning(value interface{}, columns ...string) ITDeptDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDeptDo) Not(conds ...gormgen.Condition) ITDeptDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDeptDo) Or(conds ...gormgen.Condition) ITDeptDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDeptDo) Select(conds ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDeptDo) Where(conds ...gormgen.Condition) ITDeptDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDeptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITDeptDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tDeptDo) Order(conds ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDeptDo) Distinct(cols ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDeptDo) Omit(cols ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDeptDo) Join(table schema.Tabler, on ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDeptDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDeptDo) RightJoin(table schema.Tabler, on ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDeptDo) Group(cols ...field.Expr) ITDeptDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDeptDo) Having(conds ...gormgen.Condition) ITDeptDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDeptDo) Limit(limit int) ITDeptDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDeptDo) Offset(offset int) ITDeptDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDeptDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITDeptDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDeptDo) Unscoped() ITDeptDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDeptDo) Create(values ...*model.TDept) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDeptDo) CreateInBatches(values []*model.TDept, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDeptDo) Save(values ...*model.TDept) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDeptDo) First() (*model.TDept, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDept), nil
	}
}

func (t tDeptDo) Take() (*model.TDept, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDept), nil
	}
}

func (t tDeptDo) Last() (*model.TDept, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDept), nil
	}
}

func (t tDeptDo) Find() ([]*model.TDept, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDept), err
}

func (t tDeptDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TDept, err error) {
	buf := make([]*model.TDept, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDeptDo) FindInBatches(result *[]*model.TDept, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDeptDo) Attrs(attrs ...field.AssignExpr) ITDeptDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDeptDo) Assign(attrs ...field.AssignExpr) ITDeptDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDeptDo) Joins(fields ...field.RelationField) ITDeptDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tDeptDo) Preload(fields ...field.RelationField) ITDeptDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tDeptDo) FirstOrInit() (*model.TDept, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDept), nil
	}
}

func (t tDeptDo) FirstOrCreate() (*model.TDept, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDept), nil
	}
}

func (t tDeptDo) FindByPage(offset int, limit int) (result []*model.TDept, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDeptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tDeptDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tDeptDo) Delete(models ...*model.TDept) (result gormgen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tDeptDo) withDO(do gormgen.Dao) *tDeptDo {
	t.DO = *do.(*gormgen.DO)
	return t
}
