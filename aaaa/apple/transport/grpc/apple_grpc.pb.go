// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: transport/grpc/apple.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppleServiceClient is the client API for AppleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppleServiceClient interface {
	// You can define your service methods as your need. Below is an example.
	// You can also add annotations here like @role(admin) to add meta data to routes for
	// implementing your own middlewares
	PostUserRpc(ctx context.Context, in *GddUser, opts ...grpc.CallOption) (*PostUserRpcResponse, error)
	GetUserIdRpc(ctx context.Context, in *GetUserIdRpcRequest, opts ...grpc.CallOption) (*GddUser, error)
	PutUserRpc(ctx context.Context, in *GddUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUserIdRpc(ctx context.Context, in *DeleteUserIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
}

type appleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppleServiceClient(cc grpc.ClientConnInterface) AppleServiceClient {
	return &appleServiceClient{cc}
}

func (c *appleServiceClient) PostUserRpc(ctx context.Context, in *GddUser, opts ...grpc.CallOption) (*PostUserRpcResponse, error) {
	out := new(PostUserRpcResponse)
	err := c.cc.Invoke(ctx, "/apple.AppleService/PostUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) GetUserIdRpc(ctx context.Context, in *GetUserIdRpcRequest, opts ...grpc.CallOption) (*GddUser, error) {
	out := new(GddUser)
	err := c.cc.Invoke(ctx, "/apple.AppleService/GetUserIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) PutUserRpc(ctx context.Context, in *GddUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/apple.AppleService/PutUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) DeleteUserIdRpc(ctx context.Context, in *DeleteUserIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/apple.AppleService/DeleteUserIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleServiceClient) GetUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/apple.AppleService/GetUsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppleServiceServer is the server API for AppleService service.
// All implementations must embed UnimplementedAppleServiceServer
// for forward compatibility
type AppleServiceServer interface {
	// You can define your service methods as your need. Below is an example.
	// You can also add annotations here like @role(admin) to add meta data to routes for
	// implementing your own middlewares
	PostUserRpc(context.Context, *GddUser) (*PostUserRpcResponse, error)
	GetUserIdRpc(context.Context, *GetUserIdRpcRequest) (*GddUser, error)
	PutUserRpc(context.Context, *GddUser) (*emptypb.Empty, error)
	DeleteUserIdRpc(context.Context, *DeleteUserIdRpcRequest) (*emptypb.Empty, error)
	GetUsersRpc(context.Context, *Parameter) (*Page, error)
	mustEmbedUnimplementedAppleServiceServer()
}

// UnimplementedAppleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppleServiceServer struct {
}

func (UnimplementedAppleServiceServer) PostUserRpc(context.Context, *GddUser) (*PostUserRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserRpc not implemented")
}
func (UnimplementedAppleServiceServer) GetUserIdRpc(context.Context, *GetUserIdRpcRequest) (*GddUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIdRpc not implemented")
}
func (UnimplementedAppleServiceServer) PutUserRpc(context.Context, *GddUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserRpc not implemented")
}
func (UnimplementedAppleServiceServer) DeleteUserIdRpc(context.Context, *DeleteUserIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserIdRpc not implemented")
}
func (UnimplementedAppleServiceServer) GetUsersRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersRpc not implemented")
}
func (UnimplementedAppleServiceServer) mustEmbedUnimplementedAppleServiceServer() {}

// UnsafeAppleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppleServiceServer will
// result in compilation errors.
type UnsafeAppleServiceServer interface {
	mustEmbedUnimplementedAppleServiceServer()
}

func RegisterAppleServiceServer(s grpc.ServiceRegistrar, srv AppleServiceServer) {
	s.RegisterService(&AppleService_ServiceDesc, srv)
}

func _AppleService_PostUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GddUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).PostUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apple.AppleService/PostUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).PostUserRpc(ctx, req.(*GddUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_GetUserIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).GetUserIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apple.AppleService/GetUserIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).GetUserIdRpc(ctx, req.(*GetUserIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_PutUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GddUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).PutUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apple.AppleService/PutUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).PutUserRpc(ctx, req.(*GddUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_DeleteUserIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).DeleteUserIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apple.AppleService/DeleteUserIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).DeleteUserIdRpc(ctx, req.(*DeleteUserIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppleService_GetUsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServiceServer).GetUsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apple.AppleService/GetUsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServiceServer).GetUsersRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

// AppleService_ServiceDesc is the grpc.ServiceDesc for AppleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apple.AppleService",
	HandlerType: (*AppleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostUserRpc",
			Handler:    _AppleService_PostUserRpc_Handler,
		},
		{
			MethodName: "GetUserIdRpc",
			Handler:    _AppleService_GetUserIdRpc_Handler,
		},
		{
			MethodName: "PutUserRpc",
			Handler:    _AppleService_PutUserRpc_Handler,
		},
		{
			MethodName: "DeleteUserIdRpc",
			Handler:    _AppleService_DeleteUserIdRpc_Handler,
		},
		{
			MethodName: "GetUsersRpc",
			Handler:    _AppleService_GetUsersRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/apple.proto",
}
