// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm2/model"
)

func newAuth(db *gorm.DB, opts ...gormgen.DOOption) auth {
	_auth := auth{}

	_auth.authDo.UseDB(db, opts...)
	_auth.authDo.UseModel(&model.Auth{})

	tableName := _auth.authDo.TableName()
	_auth.ALL = field.NewAsterisk(tableName)
	_auth.ID = field.NewInt32(tableName, "id")
	_auth.ModuleName = field.NewString(tableName, "module_name")
	_auth.ActionName = field.NewString(tableName, "action_name")
	_auth.Type = field.NewBool(tableName, "type")
	_auth.URL = field.NewString(tableName, "url")
	_auth.ModuleID = field.NewInt32(tableName, "module_id")
	_auth.Sort = field.NewInt32(tableName, "sort")
	_auth.Description = field.NewString(tableName, "description")
	_auth.Status = field.NewBool(tableName, "status")
	_auth.AddTime = field.NewInt32(tableName, "add_time")
	_auth.Checked = field.NewBool(tableName, "checked")

	_auth.fillFieldMap()

	return _auth
}

type auth struct {
	authDo authDo

	ALL         field.Asterisk
	ID          field.Int32
	ModuleName  field.String
	ActionName  field.String // 操作名称
	Type        field.Bool   // 节点类型
	URL         field.String // 跳转地址
	ModuleID    field.Int32  // 模块编号
	Sort        field.Int32  // 排序
	Description field.String // 描述
	Status      field.Bool   // 状态
	AddTime     field.Int32  // 添加时间
	Checked     field.Bool   // 是否检验

	fieldMap map[string]field.Expr
}

func (a auth) Table(newTableName string) *auth {
	a.authDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a auth) As(alias string) *auth {
	a.authDo.DO = *(a.authDo.As(alias).(*gormgen.DO))
	return a.updateTableName(alias)
}

func (a *auth) updateTableName(table string) *auth {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt32(table, "id")
	a.ModuleName = field.NewString(table, "module_name")
	a.ActionName = field.NewString(table, "action_name")
	a.Type = field.NewBool(table, "type")
	a.URL = field.NewString(table, "url")
	a.ModuleID = field.NewInt32(table, "module_id")
	a.Sort = field.NewInt32(table, "sort")
	a.Description = field.NewString(table, "description")
	a.Status = field.NewBool(table, "status")
	a.AddTime = field.NewInt32(table, "add_time")
	a.Checked = field.NewBool(table, "checked")

	a.fillFieldMap()

	return a
}

func (a *auth) WithContext(ctx context.Context) IAuthDo { return a.authDo.WithContext(ctx) }

func (a auth) TableName() string { return a.authDo.TableName() }

func (a auth) Alias() string { return a.authDo.Alias() }

func (a auth) Columns(cols ...field.Expr) gormgen.Columns { return a.authDo.Columns(cols...) }

func (a *auth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *auth) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["module_name"] = a.ModuleName
	a.fieldMap["action_name"] = a.ActionName
	a.fieldMap["type"] = a.Type
	a.fieldMap["url"] = a.URL
	a.fieldMap["module_id"] = a.ModuleID
	a.fieldMap["sort"] = a.Sort
	a.fieldMap["description"] = a.Description
	a.fieldMap["status"] = a.Status
	a.fieldMap["add_time"] = a.AddTime
	a.fieldMap["checked"] = a.Checked
}

func (a auth) clone(db *gorm.DB) auth {
	a.authDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a auth) replaceDB(db *gorm.DB) auth {
	a.authDo.ReplaceDB(db)
	return a
}

type authDo struct{ gormgen.DO }

type IAuthDo interface {
	gormgen.SubQuery
	Debug() IAuthDo
	WithContext(ctx context.Context) IAuthDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthDo
	WriteDB() IAuthDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IAuthDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IAuthDo
	Not(conds ...gormgen.Condition) IAuthDo
	Or(conds ...gormgen.Condition) IAuthDo
	Select(conds ...field.Expr) IAuthDo
	Where(conds ...gormgen.Condition) IAuthDo
	Order(conds ...field.Expr) IAuthDo
	Distinct(cols ...field.Expr) IAuthDo
	Omit(cols ...field.Expr) IAuthDo
	Join(table schema.Tabler, on ...field.Expr) IAuthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthDo
	Group(cols ...field.Expr) IAuthDo
	Having(conds ...gormgen.Condition) IAuthDo
	Limit(limit int) IAuthDo
	Offset(offset int) IAuthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IAuthDo
	Unscoped() IAuthDo
	Create(values ...*model.Auth) error
	CreateInBatches(values []*model.Auth, batchSize int) error
	Save(values ...*model.Auth) error
	First() (*model.Auth, error)
	Take() (*model.Auth, error)
	Last() (*model.Auth, error)
	Find() ([]*model.Auth, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Auth, err error)
	FindInBatches(result *[]*model.Auth, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Auth) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthDo
	Assign(attrs ...field.AssignExpr) IAuthDo
	Joins(fields ...field.RelationField) IAuthDo
	Preload(fields ...field.RelationField) IAuthDo
	FirstOrInit() (*model.Auth, error)
	FirstOrCreate() (*model.Auth, error)
	FindByPage(offset int, limit int) (result []*model.Auth, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authDo) Debug() IAuthDo {
	return a.withDO(a.DO.Debug())
}

func (a authDo) WithContext(ctx context.Context) IAuthDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authDo) ReadDB() IAuthDo {
	return a.Clauses(dbresolver.Read)
}

func (a authDo) WriteDB() IAuthDo {
	return a.Clauses(dbresolver.Write)
}

func (a authDo) Session(config *gorm.Session) IAuthDo {
	return a.withDO(a.DO.Session(config))
}

func (a authDo) Clauses(conds ...clause.Expression) IAuthDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authDo) Returning(value interface{}, columns ...string) IAuthDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authDo) Not(conds ...gormgen.Condition) IAuthDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authDo) Or(conds ...gormgen.Condition) IAuthDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authDo) Select(conds ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authDo) Where(conds ...gormgen.Condition) IAuthDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authDo) Order(conds ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authDo) Distinct(cols ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authDo) Omit(cols ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authDo) Join(table schema.Tabler, on ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authDo) Group(cols ...field.Expr) IAuthDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authDo) Having(conds ...gormgen.Condition) IAuthDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authDo) Limit(limit int) IAuthDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authDo) Offset(offset int) IAuthDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IAuthDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authDo) Unscoped() IAuthDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authDo) Create(values ...*model.Auth) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authDo) CreateInBatches(values []*model.Auth, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authDo) Save(values ...*model.Auth) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authDo) First() (*model.Auth, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Auth), nil
	}
}

func (a authDo) Take() (*model.Auth, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Auth), nil
	}
}

func (a authDo) Last() (*model.Auth, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Auth), nil
	}
}

func (a authDo) Find() ([]*model.Auth, error) {
	result, err := a.DO.Find()
	return result.([]*model.Auth), err
}

func (a authDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Auth, err error) {
	buf := make([]*model.Auth, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authDo) FindInBatches(result *[]*model.Auth, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authDo) Attrs(attrs ...field.AssignExpr) IAuthDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authDo) Assign(attrs ...field.AssignExpr) IAuthDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authDo) Joins(fields ...field.RelationField) IAuthDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authDo) Preload(fields ...field.RelationField) IAuthDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authDo) FirstOrInit() (*model.Auth, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Auth), nil
	}
}

func (a authDo) FirstOrCreate() (*model.Auth, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Auth), nil
	}
}

func (a authDo) FindByPage(offset int, limit int) (result []*model.Auth, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authDo) Delete(models ...*model.Auth) (result gormgen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authDo) withDO(do gormgen.Dao) *authDo {
	a.DO = *do.(*gormgen.DO)
	return a
}
