/**
* Generated by go-doudou v2.2.8.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	"net/http"
	service "testgggorm2"
	"testgggorm2/dto"

	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest/httprouter"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"
)

type Testgggorm2HandlerImpl struct {
	testgggorm2 service.Testgggorm2
}

func (receiver *Testgggorm2HandlerImpl) PostGenMenu(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Menu
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenMenu(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenMenus(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Menu
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenMenus(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenMenu_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Menu
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenMenu_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Menu `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenMenu(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Menu
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenMenu(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenMenu_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenMenu_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenMenus(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenMenus(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProduct(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Product
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProduct(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProducts(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Product
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProducts(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProduct_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Product
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenProduct_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Product `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenProduct(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Product
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenProduct(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenProduct_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenProduct_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProducts(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenProducts(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductAttr(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductAttr
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductAttr(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductAttrs(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.ProductAttr
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductAttrs(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductAttr_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.ProductAttr
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenProductAttr_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.ProductAttr `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenProductAttr(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductAttr
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenProductAttr(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenProductAttr_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenProductAttr_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductAttrs(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenProductAttrs(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductImage(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductImage
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductImage(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductImages(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.ProductImage
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductImages(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductImage_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.ProductImage
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenProductImage_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.ProductImage `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenProductImage(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductImage
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenProductImage(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenProductImage_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenProductImage_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductImages(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenProductImages(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenRole(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Role
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenRole(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenRoles(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Role
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenRoles(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenRole_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Role
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenRole_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Role `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenRole(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Role
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenRole(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenRole_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenRole_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenRoles(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenRoles(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenRoleAuth(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.RoleAuth
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenRoleAuth(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenRoleAuths(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.RoleAuth
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenRoleAuths(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenRoleAuth_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.RoleAuth
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenRoleAuth_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.RoleAuth `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenRoleAuth(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.RoleAuth
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenRoleAuth(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenRoleAuth_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenRoleAuth_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenRoleAuths(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenRoleAuths(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenSetting(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Setting
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenSetting(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenSettings(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Setting
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenSettings(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenSetting_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Setting
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenSetting_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Setting `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenSetting(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Setting
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenSetting(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenSetting_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenSetting_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenSettings(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenSettings(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenAuth(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Auth
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenAuth(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenAuths(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Auth
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenAuths(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenAuth_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Auth
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenAuth_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Auth `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenAuth(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Auth
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenAuth(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenAuth_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenAuth_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenAuths(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenAuths(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductType(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductType
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductType(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductTypes(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.ProductType
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductTypes(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductType_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.ProductType
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenProductType_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.ProductType `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenProductType(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductType
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenProductType(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenProductType_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenProductType_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductTypes(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenProductTypes(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductTypeAttribute(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductTypeAttribute
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductTypeAttribute(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductTypeAttributes(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.ProductTypeAttribute
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductTypeAttributes(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductTypeAttribute_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.ProductTypeAttribute
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenProductTypeAttribute_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.ProductTypeAttribute `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenProductTypeAttribute(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductTypeAttribute
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenProductTypeAttribute(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenProductTypeAttribute_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenProductTypeAttribute_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductTypeAttributes(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenProductTypeAttributes(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenSchemaTest(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.SchemaTest
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenSchemaTest(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenSchemaTests(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.SchemaTest
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenSchemaTests(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenSchemaTest_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.SchemaTest
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenSchemaTest_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.SchemaTest `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenSchemaTest(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.SchemaTest
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenSchemaTest(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenSchemaTest_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenSchemaTest_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenSchemaTests(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenSchemaTests(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.User
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenUser(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenUsers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.User
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenUsers(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.User
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenUser_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.User `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.User
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenUser(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenUser_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenUsers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenUsers(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenUserSm(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.UserSm
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenUserSm(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenUserSms(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.UserSm
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenUserSms(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenUserSm_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.UserSm
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenUserSm_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.UserSm `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenUserSm(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.UserSm
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenUserSm(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenUserSm_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenUserSm_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenUserSms(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenUserSms(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenBanner(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Banner
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenBanner(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenBanners(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Banner
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenBanners(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenBanner_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Banner
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenBanner_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Banner `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenBanner(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Banner
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenBanner(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenBanner_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenBanner_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenBanners(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenBanners(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenCart(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Cart
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenCart(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenCarts(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Cart
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenCarts(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenCart_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Cart
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenCart_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Cart `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenCart(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Cart
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenCart(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenCart_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenCart_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenCarts(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenCarts(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenOrderItem(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.OrderItem
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenOrderItem(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenOrderItems(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.OrderItem
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenOrderItems(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenOrderItem_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.OrderItem
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenOrderItem_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.OrderItem `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenOrderItem(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.OrderItem
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenOrderItem(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenOrderItem_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenOrderItem_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenOrderItems(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenOrderItems(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenAddress(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Address
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenAddress(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenAddresss(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Address
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenAddresss(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenAddress_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Address
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenAddress_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Address `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenAddress(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Address
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenAddress(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenAddress_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenAddress_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenAddresss(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenAddresss(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenAdministrator(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Administrator
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenAdministrator(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenAdministrators(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Administrator
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenAdministrators(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenAdministrator_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Administrator
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenAdministrator_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Administrator `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenAdministrator(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Administrator
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenAdministrator(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenAdministrator_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenAdministrator_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenAdministrators(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenAdministrators(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenOrder(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Order
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenOrder(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenOrders(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.Order
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenOrders(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenOrder_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.Order
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenOrder_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Order `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenOrder(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.Order
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenOrder(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenOrder_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenOrder_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenOrders(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenOrders(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductCate(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductCate
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductCate(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductCates(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.ProductCate
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductCates(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductCate_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.ProductCate
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenProductCate_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.ProductCate `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenProductCate(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductCate
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenProductCate(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenProductCate_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenProductCate_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductCates(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenProductCates(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductColor(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductColor
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductColor(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PostGenProductColors(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body []dto.ProductColor
		data []int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateVar(body, "", ""); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.PostGenProductColors(
		ctx,
		body,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductColor_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.ProductColor
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.testgggorm2.GetGenProductColor_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.ProductColor `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) PutGenProductColor(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		body dto.ProductColor
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&body); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(body); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.testgggorm2.PutGenProductColor(
		ctx,
		body,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) DeleteGenProductColor_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.testgggorm2.DeleteGenProductColor_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testgggorm2HandlerImpl) GetGenProductColors(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.testgggorm2.GetGenProductColors(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewTestgggorm2Handler(testgggorm2 service.Testgggorm2) Testgggorm2Handler {
	return &Testgggorm2HandlerImpl{
		testgggorm2,
	}
}
