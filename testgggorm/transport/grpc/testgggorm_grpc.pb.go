// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestgggormServiceClient is the client API for TestgggormService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestgggormServiceClient interface {
	// PostTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*PostTInvalidTokenRpcResponse, error)
	// PostTInvalidTokens mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTInvalidTokensRpc(ctx context.Context, in *PostTInvalidTokensRpcRequest, opts ...grpc.CallOption) (*PostTInvalidTokensRpcResponse, error)
	// GetTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokenIdRpc(ctx context.Context, in *GetTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*TInvalidToken, error)
	// PutTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTInvalidTokenIdRpc(ctx context.Context, in *DeleteTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTInvalidTokens mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokensRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*PostTJjjRpcResponse, error)
	// PostTJjjs mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTJjjsRpc(ctx context.Context, in *PostTJjjsRpcRequest, opts ...grpc.CallOption) (*PostTJjjsRpcResponse, error)
	// GetTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjIdRpc(ctx context.Context, in *GetTJjjIdRpcRequest, opts ...grpc.CallOption) (*TJjj, error)
	// PutTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTJjjIdRpc(ctx context.Context, in *DeleteTJjjIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTJjjs mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*PostTPostRpcResponse, error)
	// PostTPosts mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTPostsRpc(ctx context.Context, in *PostTPostsRpcRequest, opts ...grpc.CallOption) (*PostTPostsRpcResponse, error)
	// GetTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostIdRpc(ctx context.Context, in *GetTPostIdRpcRequest, opts ...grpc.CallOption) (*TPost, error)
	// PutTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTPostIdRpc(ctx context.Context, in *DeleteTPostIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTPosts mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*PostTUserRpcResponse, error)
	// PostTUsers mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTUsersRpc(ctx context.Context, in *PostTUsersRpcRequest, opts ...grpc.CallOption) (*PostTUsersRpcResponse, error)
	// GetTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUserIdRpc(ctx context.Context, in *GetTUserIdRpcRequest, opts ...grpc.CallOption) (*TUser, error)
	// PutTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTUserIdRpc(ctx context.Context, in *DeleteTUserIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTUsers mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*PostTWordCloudTaskRpcResponse, error)
	// PostTWordCloudTasks mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTWordCloudTasksRpc(ctx context.Context, in *PostTWordCloudTasksRpcRequest, opts ...grpc.CallOption) (*PostTWordCloudTasksRpcResponse, error)
	// GetTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTaskIdRpc(ctx context.Context, in *GetTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*TWordCloudTask, error)
	// PutTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTWordCloudTaskIdRpc(ctx context.Context, in *DeleteTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTWordCloudTasks mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTasksRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*PostTAuthorRpcResponse, error)
	// PostTAuthors mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTAuthorsRpc(ctx context.Context, in *PostTAuthorsRpcRequest, opts ...grpc.CallOption) (*PostTAuthorsRpcResponse, error)
	// GetTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorIdRpc(ctx context.Context, in *GetTAuthorIdRpcRequest, opts ...grpc.CallOption) (*TAuthor, error)
	// PutTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTAuthorIdRpc(ctx context.Context, in *DeleteTAuthorIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTAuthors mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*PostTClientRpcResponse, error)
	// PostTClients mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTClientsRpc(ctx context.Context, in *PostTClientsRpcRequest, opts ...grpc.CallOption) (*PostTClientsRpcResponse, error)
	// GetTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientIdRpc(ctx context.Context, in *GetTClientIdRpcRequest, opts ...grpc.CallOption) (*TClient, error)
	// PutTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTClientIdRpc(ctx context.Context, in *DeleteTClientIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTClients mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	// PostTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*PostTDeptRpcResponse, error)
	// PostTDepts mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTDeptsRpc(ctx context.Context, in *PostTDeptsRpcRequest, opts ...grpc.CallOption) (*PostTDeptsRpcResponse, error)
	// GetTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptIdRpc(ctx context.Context, in *GetTDeptIdRpcRequest, opts ...grpc.CallOption) (*TDept, error)
	// PutTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTDeptIdRpc(ctx context.Context, in *DeleteTDeptIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetTDepts mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	TAuthorPostsRpc(ctx context.Context, in *SaveAuthorReqDTO, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type testgggormServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestgggormServiceClient(cc grpc.ClientConnInterface) TestgggormServiceClient {
	return &testgggormServiceClient{cc}
}

func (c *testgggormServiceClient) PostTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*PostTInvalidTokenRpcResponse, error) {
	out := new(PostTInvalidTokenRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTInvalidTokenRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTInvalidTokensRpc(ctx context.Context, in *PostTInvalidTokensRpcRequest, opts ...grpc.CallOption) (*PostTInvalidTokensRpcResponse, error) {
	out := new(PostTInvalidTokensRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTInvalidTokensRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTInvalidTokenIdRpc(ctx context.Context, in *GetTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*TInvalidToken, error) {
	out := new(TInvalidToken)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTInvalidTokenIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTInvalidTokenRpc(ctx context.Context, in *TInvalidToken, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTInvalidTokenRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTInvalidTokenIdRpc(ctx context.Context, in *DeleteTInvalidTokenIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTInvalidTokenIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTInvalidTokensRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTInvalidTokensRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*PostTJjjRpcResponse, error) {
	out := new(PostTJjjRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTJjjRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTJjjsRpc(ctx context.Context, in *PostTJjjsRpcRequest, opts ...grpc.CallOption) (*PostTJjjsRpcResponse, error) {
	out := new(PostTJjjsRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTJjjsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTJjjIdRpc(ctx context.Context, in *GetTJjjIdRpcRequest, opts ...grpc.CallOption) (*TJjj, error) {
	out := new(TJjj)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTJjjIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTJjjRpc(ctx context.Context, in *TJjj, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTJjjRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTJjjIdRpc(ctx context.Context, in *DeleteTJjjIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTJjjIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTJjjsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTJjjsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*PostTPostRpcResponse, error) {
	out := new(PostTPostRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTPostRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTPostsRpc(ctx context.Context, in *PostTPostsRpcRequest, opts ...grpc.CallOption) (*PostTPostsRpcResponse, error) {
	out := new(PostTPostsRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTPostsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTPostIdRpc(ctx context.Context, in *GetTPostIdRpcRequest, opts ...grpc.CallOption) (*TPost, error) {
	out := new(TPost)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTPostIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTPostRpc(ctx context.Context, in *TPost, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTPostRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTPostIdRpc(ctx context.Context, in *DeleteTPostIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTPostIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTPostsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTPostsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*PostTUserRpcResponse, error) {
	out := new(PostTUserRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTUsersRpc(ctx context.Context, in *PostTUsersRpcRequest, opts ...grpc.CallOption) (*PostTUsersRpcResponse, error) {
	out := new(PostTUsersRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTUsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTUserIdRpc(ctx context.Context, in *GetTUserIdRpcRequest, opts ...grpc.CallOption) (*TUser, error) {
	out := new(TUser)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTUserIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTUserRpc(ctx context.Context, in *TUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTUserIdRpc(ctx context.Context, in *DeleteTUserIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTUserIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTUsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*PostTWordCloudTaskRpcResponse, error) {
	out := new(PostTWordCloudTaskRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTWordCloudTaskRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTWordCloudTasksRpc(ctx context.Context, in *PostTWordCloudTasksRpcRequest, opts ...grpc.CallOption) (*PostTWordCloudTasksRpcResponse, error) {
	out := new(PostTWordCloudTasksRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTWordCloudTasksRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTWordCloudTaskIdRpc(ctx context.Context, in *GetTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*TWordCloudTask, error) {
	out := new(TWordCloudTask)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTWordCloudTaskIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTWordCloudTaskRpc(ctx context.Context, in *TWordCloudTask, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTWordCloudTaskRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTWordCloudTaskIdRpc(ctx context.Context, in *DeleteTWordCloudTaskIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTWordCloudTaskIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTWordCloudTasksRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTWordCloudTasksRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*PostTAuthorRpcResponse, error) {
	out := new(PostTAuthorRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTAuthorRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTAuthorsRpc(ctx context.Context, in *PostTAuthorsRpcRequest, opts ...grpc.CallOption) (*PostTAuthorsRpcResponse, error) {
	out := new(PostTAuthorsRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTAuthorsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTAuthorIdRpc(ctx context.Context, in *GetTAuthorIdRpcRequest, opts ...grpc.CallOption) (*TAuthor, error) {
	out := new(TAuthor)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTAuthorIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTAuthorRpc(ctx context.Context, in *TAuthor, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTAuthorRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTAuthorIdRpc(ctx context.Context, in *DeleteTAuthorIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTAuthorIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTAuthorsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTAuthorsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*PostTClientRpcResponse, error) {
	out := new(PostTClientRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTClientRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTClientsRpc(ctx context.Context, in *PostTClientsRpcRequest, opts ...grpc.CallOption) (*PostTClientsRpcResponse, error) {
	out := new(PostTClientsRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTClientsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTClientIdRpc(ctx context.Context, in *GetTClientIdRpcRequest, opts ...grpc.CallOption) (*TClient, error) {
	out := new(TClient)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTClientIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTClientRpc(ctx context.Context, in *TClient, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTClientRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTClientIdRpc(ctx context.Context, in *DeleteTClientIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTClientIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTClientsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTClientsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*PostTDeptRpcResponse, error) {
	out := new(PostTDeptRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTDeptRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PostTDeptsRpc(ctx context.Context, in *PostTDeptsRpcRequest, opts ...grpc.CallOption) (*PostTDeptsRpcResponse, error) {
	out := new(PostTDeptsRpcResponse)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PostTDeptsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTDeptIdRpc(ctx context.Context, in *GetTDeptIdRpcRequest, opts ...grpc.CallOption) (*TDept, error) {
	out := new(TDept)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTDeptIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) PutTDeptRpc(ctx context.Context, in *TDept, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/PutTDeptRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) DeleteTDeptIdRpc(ctx context.Context, in *DeleteTDeptIdRpcRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/DeleteTDeptIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) GetTDeptsRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/GetTDeptsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testgggormServiceClient) TAuthorPostsRpc(ctx context.Context, in *SaveAuthorReqDTO, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testgggorm.TestgggormService/TAuthorPostsRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestgggormServiceServer is the server API for TestgggormService service.
// All implementations must embed UnimplementedTestgggormServiceServer
// for forward compatibility
type TestgggormServiceServer interface {
	// PostTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTInvalidTokenRpc(context.Context, *TInvalidToken) (*PostTInvalidTokenRpcResponse, error)
	// PostTInvalidTokens mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTInvalidTokensRpc(context.Context, *PostTInvalidTokensRpcRequest) (*PostTInvalidTokensRpcResponse, error)
	// GetTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokenIdRpc(context.Context, *GetTInvalidTokenIdRpcRequest) (*TInvalidToken, error)
	// PutTInvalidToken mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTInvalidTokenRpc(context.Context, *TInvalidToken) (*emptypb.Empty, error)
	// DeleteTInvalidToken_Id mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTInvalidTokenIdRpc(context.Context, *DeleteTInvalidTokenIdRpcRequest) (*emptypb.Empty, error)
	// GetTInvalidTokens mapped from table <t_invalid_token>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTInvalidTokensRpc(context.Context, *Parameter) (*Page, error)
	// PostTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTJjjRpc(context.Context, *TJjj) (*PostTJjjRpcResponse, error)
	// PostTJjjs mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTJjjsRpc(context.Context, *PostTJjjsRpcRequest) (*PostTJjjsRpcResponse, error)
	// GetTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjIdRpc(context.Context, *GetTJjjIdRpcRequest) (*TJjj, error)
	// PutTJjj mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTJjjRpc(context.Context, *TJjj) (*emptypb.Empty, error)
	// DeleteTJjj_Id mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTJjjIdRpc(context.Context, *DeleteTJjjIdRpcRequest) (*emptypb.Empty, error)
	// GetTJjjs mapped from table <t_jjj>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTJjjsRpc(context.Context, *Parameter) (*Page, error)
	// PostTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTPostRpc(context.Context, *TPost) (*PostTPostRpcResponse, error)
	// PostTPosts mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTPostsRpc(context.Context, *PostTPostsRpcRequest) (*PostTPostsRpcResponse, error)
	// GetTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostIdRpc(context.Context, *GetTPostIdRpcRequest) (*TPost, error)
	// PutTPost mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTPostRpc(context.Context, *TPost) (*emptypb.Empty, error)
	// DeleteTPost_Id mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTPostIdRpc(context.Context, *DeleteTPostIdRpcRequest) (*emptypb.Empty, error)
	// GetTPosts mapped from table <t_post>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTPostsRpc(context.Context, *Parameter) (*Page, error)
	// PostTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTUserRpc(context.Context, *TUser) (*PostTUserRpcResponse, error)
	// PostTUsers mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTUsersRpc(context.Context, *PostTUsersRpcRequest) (*PostTUsersRpcResponse, error)
	// GetTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUserIdRpc(context.Context, *GetTUserIdRpcRequest) (*TUser, error)
	// PutTUser mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTUserRpc(context.Context, *TUser) (*emptypb.Empty, error)
	// DeleteTUser_Id mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTUserIdRpc(context.Context, *DeleteTUserIdRpcRequest) (*emptypb.Empty, error)
	// GetTUsers mapped from table <t_user>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTUsersRpc(context.Context, *Parameter) (*Page, error)
	// PostTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*PostTWordCloudTaskRpcResponse, error)
	// PostTWordCloudTasks mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTWordCloudTasksRpc(context.Context, *PostTWordCloudTasksRpcRequest) (*PostTWordCloudTasksRpcResponse, error)
	// GetTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTaskIdRpc(context.Context, *GetTWordCloudTaskIdRpcRequest) (*TWordCloudTask, error)
	// PutTWordCloudTask mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*emptypb.Empty, error)
	// DeleteTWordCloudTask_Id mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTWordCloudTaskIdRpc(context.Context, *DeleteTWordCloudTaskIdRpcRequest) (*emptypb.Empty, error)
	// GetTWordCloudTasks mapped from table <t_word_cloud_task>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTWordCloudTasksRpc(context.Context, *Parameter) (*Page, error)
	// PostTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTAuthorRpc(context.Context, *TAuthor) (*PostTAuthorRpcResponse, error)
	// PostTAuthors mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTAuthorsRpc(context.Context, *PostTAuthorsRpcRequest) (*PostTAuthorsRpcResponse, error)
	// GetTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorIdRpc(context.Context, *GetTAuthorIdRpcRequest) (*TAuthor, error)
	// PutTAuthor mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTAuthorRpc(context.Context, *TAuthor) (*emptypb.Empty, error)
	// DeleteTAuthor_Id mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTAuthorIdRpc(context.Context, *DeleteTAuthorIdRpcRequest) (*emptypb.Empty, error)
	// GetTAuthors mapped from table <t_author>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTAuthorsRpc(context.Context, *Parameter) (*Page, error)
	// PostTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTClientRpc(context.Context, *TClient) (*PostTClientRpcResponse, error)
	// PostTClients mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTClientsRpc(context.Context, *PostTClientsRpcRequest) (*PostTClientsRpcResponse, error)
	// GetTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientIdRpc(context.Context, *GetTClientIdRpcRequest) (*TClient, error)
	// PutTClient mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTClientRpc(context.Context, *TClient) (*emptypb.Empty, error)
	// DeleteTClient_Id mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTClientIdRpc(context.Context, *DeleteTClientIdRpcRequest) (*emptypb.Empty, error)
	// GetTClients mapped from table <t_client>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTClientsRpc(context.Context, *Parameter) (*Page, error)
	// PostTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTDeptRpc(context.Context, *TDept) (*PostTDeptRpcResponse, error)
	// PostTDepts mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PostTDeptsRpc(context.Context, *PostTDeptsRpcRequest) (*PostTDeptsRpcResponse, error)
	// GetTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptIdRpc(context.Context, *GetTDeptIdRpcRequest) (*TDept, error)
	// PutTDept mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	PutTDeptRpc(context.Context, *TDept) (*emptypb.Empty, error)
	// DeleteTDept_Id mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	DeleteTDeptIdRpc(context.Context, *DeleteTDeptIdRpcRequest) (*emptypb.Empty, error)
	// GetTDepts mapped from table <t_dept>
	// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
	GetTDeptsRpc(context.Context, *Parameter) (*Page, error)
	TAuthorPostsRpc(context.Context, *SaveAuthorReqDTO) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestgggormServiceServer()
}

// UnimplementedTestgggormServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestgggormServiceServer struct {
}

func (UnimplementedTestgggormServiceServer) PostTInvalidTokenRpc(context.Context, *TInvalidToken) (*PostTInvalidTokenRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTInvalidTokenRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTInvalidTokensRpc(context.Context, *PostTInvalidTokensRpcRequest) (*PostTInvalidTokensRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTInvalidTokensRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTInvalidTokenIdRpc(context.Context, *GetTInvalidTokenIdRpcRequest) (*TInvalidToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTInvalidTokenIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTInvalidTokenRpc(context.Context, *TInvalidToken) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTInvalidTokenRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTInvalidTokenIdRpc(context.Context, *DeleteTInvalidTokenIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTInvalidTokenIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTInvalidTokensRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTInvalidTokensRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTJjjRpc(context.Context, *TJjj) (*PostTJjjRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTJjjRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTJjjsRpc(context.Context, *PostTJjjsRpcRequest) (*PostTJjjsRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTJjjsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTJjjIdRpc(context.Context, *GetTJjjIdRpcRequest) (*TJjj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTJjjIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTJjjRpc(context.Context, *TJjj) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTJjjRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTJjjIdRpc(context.Context, *DeleteTJjjIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTJjjIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTJjjsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTJjjsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTPostRpc(context.Context, *TPost) (*PostTPostRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTPostRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTPostsRpc(context.Context, *PostTPostsRpcRequest) (*PostTPostsRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTPostsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTPostIdRpc(context.Context, *GetTPostIdRpcRequest) (*TPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTPostIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTPostRpc(context.Context, *TPost) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTPostRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTPostIdRpc(context.Context, *DeleteTPostIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTPostIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTPostsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTPostsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTUserRpc(context.Context, *TUser) (*PostTUserRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTUserRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTUsersRpc(context.Context, *PostTUsersRpcRequest) (*PostTUsersRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTUsersRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTUserIdRpc(context.Context, *GetTUserIdRpcRequest) (*TUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTUserIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTUserRpc(context.Context, *TUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTUserRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTUserIdRpc(context.Context, *DeleteTUserIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTUserIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTUsersRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTUsersRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*PostTWordCloudTaskRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTWordCloudTaskRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTWordCloudTasksRpc(context.Context, *PostTWordCloudTasksRpcRequest) (*PostTWordCloudTasksRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTWordCloudTasksRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTWordCloudTaskIdRpc(context.Context, *GetTWordCloudTaskIdRpcRequest) (*TWordCloudTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTWordCloudTaskIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTWordCloudTaskRpc(context.Context, *TWordCloudTask) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTWordCloudTaskRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTWordCloudTaskIdRpc(context.Context, *DeleteTWordCloudTaskIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTWordCloudTaskIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTWordCloudTasksRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTWordCloudTasksRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTAuthorRpc(context.Context, *TAuthor) (*PostTAuthorRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTAuthorRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTAuthorsRpc(context.Context, *PostTAuthorsRpcRequest) (*PostTAuthorsRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTAuthorsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTAuthorIdRpc(context.Context, *GetTAuthorIdRpcRequest) (*TAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTAuthorIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTAuthorRpc(context.Context, *TAuthor) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTAuthorRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTAuthorIdRpc(context.Context, *DeleteTAuthorIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTAuthorIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTAuthorsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTAuthorsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTClientRpc(context.Context, *TClient) (*PostTClientRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTClientRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTClientsRpc(context.Context, *PostTClientsRpcRequest) (*PostTClientsRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTClientsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTClientIdRpc(context.Context, *GetTClientIdRpcRequest) (*TClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTClientIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTClientRpc(context.Context, *TClient) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTClientRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTClientIdRpc(context.Context, *DeleteTClientIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTClientIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTClientsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTClientsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTDeptRpc(context.Context, *TDept) (*PostTDeptRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTDeptRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PostTDeptsRpc(context.Context, *PostTDeptsRpcRequest) (*PostTDeptsRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTDeptsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTDeptIdRpc(context.Context, *GetTDeptIdRpcRequest) (*TDept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTDeptIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) PutTDeptRpc(context.Context, *TDept) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTDeptRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) DeleteTDeptIdRpc(context.Context, *DeleteTDeptIdRpcRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTDeptIdRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) GetTDeptsRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTDeptsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) TAuthorPostsRpc(context.Context, *SaveAuthorReqDTO) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TAuthorPostsRpc not implemented")
}
func (UnimplementedTestgggormServiceServer) mustEmbedUnimplementedTestgggormServiceServer() {}

// UnsafeTestgggormServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestgggormServiceServer will
// result in compilation errors.
type UnsafeTestgggormServiceServer interface {
	mustEmbedUnimplementedTestgggormServiceServer()
}

func RegisterTestgggormServiceServer(s grpc.ServiceRegistrar, srv TestgggormServiceServer) {
	s.RegisterService(&TestgggormService_ServiceDesc, srv)
}

func _TestgggormService_PostTInvalidTokenRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TInvalidToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTInvalidTokenRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTInvalidTokenRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTInvalidTokenRpc(ctx, req.(*TInvalidToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTInvalidTokensRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTInvalidTokensRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTInvalidTokensRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTInvalidTokensRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTInvalidTokensRpc(ctx, req.(*PostTInvalidTokensRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTInvalidTokenIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTInvalidTokenIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTInvalidTokenIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTInvalidTokenIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTInvalidTokenIdRpc(ctx, req.(*GetTInvalidTokenIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTInvalidTokenRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TInvalidToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTInvalidTokenRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTInvalidTokenRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTInvalidTokenRpc(ctx, req.(*TInvalidToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTInvalidTokenIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTInvalidTokenIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTInvalidTokenIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTInvalidTokenIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTInvalidTokenIdRpc(ctx, req.(*DeleteTInvalidTokenIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTInvalidTokensRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTInvalidTokensRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTInvalidTokensRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTInvalidTokensRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTJjjRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TJjj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTJjjRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTJjjRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTJjjRpc(ctx, req.(*TJjj))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTJjjsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTJjjsRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTJjjsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTJjjsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTJjjsRpc(ctx, req.(*PostTJjjsRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTJjjIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTJjjIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTJjjIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTJjjIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTJjjIdRpc(ctx, req.(*GetTJjjIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTJjjRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TJjj)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTJjjRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTJjjRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTJjjRpc(ctx, req.(*TJjj))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTJjjIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTJjjIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTJjjIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTJjjIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTJjjIdRpc(ctx, req.(*DeleteTJjjIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTJjjsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTJjjsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTJjjsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTJjjsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTPostRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTPostRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTPostRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTPostRpc(ctx, req.(*TPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTPostsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTPostsRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTPostsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTPostsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTPostsRpc(ctx, req.(*PostTPostsRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTPostIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTPostIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTPostIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTPostIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTPostIdRpc(ctx, req.(*GetTPostIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTPostRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TPost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTPostRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTPostRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTPostRpc(ctx, req.(*TPost))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTPostIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTPostIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTPostIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTPostIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTPostIdRpc(ctx, req.(*DeleteTPostIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTPostsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTPostsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTPostsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTPostsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTUserRpc(ctx, req.(*TUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTUsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTUsersRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTUsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTUsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTUsersRpc(ctx, req.(*PostTUsersRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTUserIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTUserIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTUserIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTUserIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTUserIdRpc(ctx, req.(*GetTUserIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTUserRpc(ctx, req.(*TUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTUserIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTUserIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTUserIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTUserIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTUserIdRpc(ctx, req.(*DeleteTUserIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTUsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTUsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTUsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTUsersRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTWordCloudTaskRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TWordCloudTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTWordCloudTaskRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTWordCloudTaskRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTWordCloudTaskRpc(ctx, req.(*TWordCloudTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTWordCloudTasksRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTWordCloudTasksRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTWordCloudTasksRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTWordCloudTasksRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTWordCloudTasksRpc(ctx, req.(*PostTWordCloudTasksRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTWordCloudTaskIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTWordCloudTaskIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTWordCloudTaskIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTWordCloudTaskIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTWordCloudTaskIdRpc(ctx, req.(*GetTWordCloudTaskIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTWordCloudTaskRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TWordCloudTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTWordCloudTaskRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTWordCloudTaskRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTWordCloudTaskRpc(ctx, req.(*TWordCloudTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTWordCloudTaskIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTWordCloudTaskIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTWordCloudTaskIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTWordCloudTaskIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTWordCloudTaskIdRpc(ctx, req.(*DeleteTWordCloudTaskIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTWordCloudTasksRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTWordCloudTasksRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTWordCloudTasksRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTWordCloudTasksRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTAuthorRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTAuthorRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTAuthorRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTAuthorRpc(ctx, req.(*TAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTAuthorsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTAuthorsRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTAuthorsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTAuthorsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTAuthorsRpc(ctx, req.(*PostTAuthorsRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTAuthorIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTAuthorIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTAuthorIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTAuthorIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTAuthorIdRpc(ctx, req.(*GetTAuthorIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTAuthorRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TAuthor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTAuthorRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTAuthorRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTAuthorRpc(ctx, req.(*TAuthor))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTAuthorIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTAuthorIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTAuthorIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTAuthorIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTAuthorIdRpc(ctx, req.(*DeleteTAuthorIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTAuthorsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTAuthorsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTAuthorsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTAuthorsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTClientRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTClientRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTClientRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTClientRpc(ctx, req.(*TClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTClientsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTClientsRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTClientsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTClientsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTClientsRpc(ctx, req.(*PostTClientsRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTClientIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTClientIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTClientIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTClientIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTClientIdRpc(ctx, req.(*GetTClientIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTClientRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTClientRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTClientRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTClientRpc(ctx, req.(*TClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTClientIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTClientIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTClientIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTClientIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTClientIdRpc(ctx, req.(*DeleteTClientIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTClientsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTClientsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTClientsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTClientsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTDeptRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TDept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTDeptRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTDeptRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTDeptRpc(ctx, req.(*TDept))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PostTDeptsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTDeptsRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PostTDeptsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PostTDeptsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PostTDeptsRpc(ctx, req.(*PostTDeptsRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTDeptIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTDeptIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTDeptIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTDeptIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTDeptIdRpc(ctx, req.(*GetTDeptIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_PutTDeptRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TDept)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).PutTDeptRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/PutTDeptRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).PutTDeptRpc(ctx, req.(*TDept))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_DeleteTDeptIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTDeptIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).DeleteTDeptIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/DeleteTDeptIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).DeleteTDeptIdRpc(ctx, req.(*DeleteTDeptIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_GetTDeptsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).GetTDeptsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/GetTDeptsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).GetTDeptsRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestgggormService_TAuthorPostsRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAuthorReqDTO)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestgggormServiceServer).TAuthorPostsRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testgggorm.TestgggormService/TAuthorPostsRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestgggormServiceServer).TAuthorPostsRpc(ctx, req.(*SaveAuthorReqDTO))
	}
	return interceptor(ctx, in, info, handler)
}

// TestgggormService_ServiceDesc is the grpc.ServiceDesc for TestgggormService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestgggormService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testgggorm.TestgggormService",
	HandlerType: (*TestgggormServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTInvalidTokenRpc",
			Handler:    _TestgggormService_PostTInvalidTokenRpc_Handler,
		},
		{
			MethodName: "PostTInvalidTokensRpc",
			Handler:    _TestgggormService_PostTInvalidTokensRpc_Handler,
		},
		{
			MethodName: "GetTInvalidTokenIdRpc",
			Handler:    _TestgggormService_GetTInvalidTokenIdRpc_Handler,
		},
		{
			MethodName: "PutTInvalidTokenRpc",
			Handler:    _TestgggormService_PutTInvalidTokenRpc_Handler,
		},
		{
			MethodName: "DeleteTInvalidTokenIdRpc",
			Handler:    _TestgggormService_DeleteTInvalidTokenIdRpc_Handler,
		},
		{
			MethodName: "GetTInvalidTokensRpc",
			Handler:    _TestgggormService_GetTInvalidTokensRpc_Handler,
		},
		{
			MethodName: "PostTJjjRpc",
			Handler:    _TestgggormService_PostTJjjRpc_Handler,
		},
		{
			MethodName: "PostTJjjsRpc",
			Handler:    _TestgggormService_PostTJjjsRpc_Handler,
		},
		{
			MethodName: "GetTJjjIdRpc",
			Handler:    _TestgggormService_GetTJjjIdRpc_Handler,
		},
		{
			MethodName: "PutTJjjRpc",
			Handler:    _TestgggormService_PutTJjjRpc_Handler,
		},
		{
			MethodName: "DeleteTJjjIdRpc",
			Handler:    _TestgggormService_DeleteTJjjIdRpc_Handler,
		},
		{
			MethodName: "GetTJjjsRpc",
			Handler:    _TestgggormService_GetTJjjsRpc_Handler,
		},
		{
			MethodName: "PostTPostRpc",
			Handler:    _TestgggormService_PostTPostRpc_Handler,
		},
		{
			MethodName: "PostTPostsRpc",
			Handler:    _TestgggormService_PostTPostsRpc_Handler,
		},
		{
			MethodName: "GetTPostIdRpc",
			Handler:    _TestgggormService_GetTPostIdRpc_Handler,
		},
		{
			MethodName: "PutTPostRpc",
			Handler:    _TestgggormService_PutTPostRpc_Handler,
		},
		{
			MethodName: "DeleteTPostIdRpc",
			Handler:    _TestgggormService_DeleteTPostIdRpc_Handler,
		},
		{
			MethodName: "GetTPostsRpc",
			Handler:    _TestgggormService_GetTPostsRpc_Handler,
		},
		{
			MethodName: "PostTUserRpc",
			Handler:    _TestgggormService_PostTUserRpc_Handler,
		},
		{
			MethodName: "PostTUsersRpc",
			Handler:    _TestgggormService_PostTUsersRpc_Handler,
		},
		{
			MethodName: "GetTUserIdRpc",
			Handler:    _TestgggormService_GetTUserIdRpc_Handler,
		},
		{
			MethodName: "PutTUserRpc",
			Handler:    _TestgggormService_PutTUserRpc_Handler,
		},
		{
			MethodName: "DeleteTUserIdRpc",
			Handler:    _TestgggormService_DeleteTUserIdRpc_Handler,
		},
		{
			MethodName: "GetTUsersRpc",
			Handler:    _TestgggormService_GetTUsersRpc_Handler,
		},
		{
			MethodName: "PostTWordCloudTaskRpc",
			Handler:    _TestgggormService_PostTWordCloudTaskRpc_Handler,
		},
		{
			MethodName: "PostTWordCloudTasksRpc",
			Handler:    _TestgggormService_PostTWordCloudTasksRpc_Handler,
		},
		{
			MethodName: "GetTWordCloudTaskIdRpc",
			Handler:    _TestgggormService_GetTWordCloudTaskIdRpc_Handler,
		},
		{
			MethodName: "PutTWordCloudTaskRpc",
			Handler:    _TestgggormService_PutTWordCloudTaskRpc_Handler,
		},
		{
			MethodName: "DeleteTWordCloudTaskIdRpc",
			Handler:    _TestgggormService_DeleteTWordCloudTaskIdRpc_Handler,
		},
		{
			MethodName: "GetTWordCloudTasksRpc",
			Handler:    _TestgggormService_GetTWordCloudTasksRpc_Handler,
		},
		{
			MethodName: "PostTAuthorRpc",
			Handler:    _TestgggormService_PostTAuthorRpc_Handler,
		},
		{
			MethodName: "PostTAuthorsRpc",
			Handler:    _TestgggormService_PostTAuthorsRpc_Handler,
		},
		{
			MethodName: "GetTAuthorIdRpc",
			Handler:    _TestgggormService_GetTAuthorIdRpc_Handler,
		},
		{
			MethodName: "PutTAuthorRpc",
			Handler:    _TestgggormService_PutTAuthorRpc_Handler,
		},
		{
			MethodName: "DeleteTAuthorIdRpc",
			Handler:    _TestgggormService_DeleteTAuthorIdRpc_Handler,
		},
		{
			MethodName: "GetTAuthorsRpc",
			Handler:    _TestgggormService_GetTAuthorsRpc_Handler,
		},
		{
			MethodName: "PostTClientRpc",
			Handler:    _TestgggormService_PostTClientRpc_Handler,
		},
		{
			MethodName: "PostTClientsRpc",
			Handler:    _TestgggormService_PostTClientsRpc_Handler,
		},
		{
			MethodName: "GetTClientIdRpc",
			Handler:    _TestgggormService_GetTClientIdRpc_Handler,
		},
		{
			MethodName: "PutTClientRpc",
			Handler:    _TestgggormService_PutTClientRpc_Handler,
		},
		{
			MethodName: "DeleteTClientIdRpc",
			Handler:    _TestgggormService_DeleteTClientIdRpc_Handler,
		},
		{
			MethodName: "GetTClientsRpc",
			Handler:    _TestgggormService_GetTClientsRpc_Handler,
		},
		{
			MethodName: "PostTDeptRpc",
			Handler:    _TestgggormService_PostTDeptRpc_Handler,
		},
		{
			MethodName: "PostTDeptsRpc",
			Handler:    _TestgggormService_PostTDeptsRpc_Handler,
		},
		{
			MethodName: "GetTDeptIdRpc",
			Handler:    _TestgggormService_GetTDeptIdRpc_Handler,
		},
		{
			MethodName: "PutTDeptRpc",
			Handler:    _TestgggormService_PutTDeptRpc_Handler,
		},
		{
			MethodName: "DeleteTDeptIdRpc",
			Handler:    _TestgggormService_DeleteTDeptIdRpc_Handler,
		},
		{
			MethodName: "GetTDeptsRpc",
			Handler:    _TestgggormService_GetTDeptsRpc_Handler,
		},
		{
			MethodName: "TAuthorPostsRpc",
			Handler:    _TestgggormService_TAuthorPostsRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/testgggorm.proto",
}
