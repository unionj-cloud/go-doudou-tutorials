// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloworldOpenapi3Client is the client API for HelloworldOpenapi3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloworldOpenapi3Client interface {
	POSTGreeting(ctx context.Context, in *POSTGreetingRequest, opts ...grpc.CallOption) (*GreetingResp, error)
}

type helloworldOpenapi3Client struct {
	cc grpc.ClientConnInterface
}

func NewHelloworldOpenapi3Client(cc grpc.ClientConnInterface) HelloworldOpenapi3Client {
	return &helloworldOpenapi3Client{cc}
}

func (c *helloworldOpenapi3Client) POSTGreeting(ctx context.Context, in *POSTGreetingRequest, opts ...grpc.CallOption) (*GreetingResp, error) {
	out := new(GreetingResp)
	err := c.cc.Invoke(ctx, "/helloworld_openapi3.Helloworld_openapi3/POSTGreeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloworldOpenapi3Server is the server API for HelloworldOpenapi3 service.
// All implementations must embed UnimplementedHelloworldOpenapi3Server
// for forward compatibility
type HelloworldOpenapi3Server interface {
	POSTGreeting(context.Context, *POSTGreetingRequest) (*GreetingResp, error)
	mustEmbedUnimplementedHelloworldOpenapi3Server()
}

// UnimplementedHelloworldOpenapi3Server must be embedded to have forward compatible implementations.
type UnimplementedHelloworldOpenapi3Server struct {
}

func (UnimplementedHelloworldOpenapi3Server) POSTGreeting(context.Context, *POSTGreetingRequest) (*GreetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method POSTGreeting not implemented")
}
func (UnimplementedHelloworldOpenapi3Server) mustEmbedUnimplementedHelloworldOpenapi3Server() {}

// UnsafeHelloworldOpenapi3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloworldOpenapi3Server will
// result in compilation errors.
type UnsafeHelloworldOpenapi3Server interface {
	mustEmbedUnimplementedHelloworldOpenapi3Server()
}

func RegisterHelloworldOpenapi3Server(s grpc.ServiceRegistrar, srv HelloworldOpenapi3Server) {
	s.RegisterService(&HelloworldOpenapi3_ServiceDesc, srv)
}

func _HelloworldOpenapi3_POSTGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(POSTGreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldOpenapi3Server).POSTGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld_openapi3.Helloworld_openapi3/POSTGreeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldOpenapi3Server).POSTGreeting(ctx, req.(*POSTGreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HelloworldOpenapi3_ServiceDesc is the grpc.ServiceDesc for HelloworldOpenapi3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloworldOpenapi3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld_openapi3.Helloworld_openapi3",
	HandlerType: (*HelloworldOpenapi3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "POSTGreeting",
			Handler:    _HelloworldOpenapi3_POSTGreeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld_openapi3.proto",
}
