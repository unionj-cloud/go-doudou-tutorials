/**
* Generated by go-doudou v2.0.0.
* You can edit it as your need.
 */
package main

import (
	"annotation/client"
	pb "annotation/transport/grpc"
	"github.com/unionj-cloud/go-doudou/v2/framework/registry/memberlist"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/restclient"
	service "github.com/unionj-cloud/helloworld"
	"github.com/unionj-cloud/helloworld/config"
	"github.com/unionj-cloud/helloworld/transport/httpsrv"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

func main() {
	conf := config.LoadFromEnv()
	restClient := client.NewAnnotationClient(restclient.WithProvider(memberlist.NewSWRRServiceProvider("annotation-svc_rest")))

	tlsOption := grpc.WithTransportCredentials(insecure.NewCredentials())
	dialOptions := []grpc.DialOption{
		tlsOption,
	}

	// Set up a connection to the server.
	grpcConn := memberlist.NewRRGrpcClientConn("annotation-svc_grpc", dialOptions...)
	defer grpcConn.Close()

	svc := service.NewHelloworld(conf, restClient, pb.NewAnnotationServiceClient(grpcConn))

	//go func() {
	//	grpcServer := grpcx.NewGrpcServer(
	//		grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(
	//			grpc_ctxtags.StreamServerInterceptor(),
	//			grpc_opentracing.StreamServerInterceptor(),
	//			grpc_prometheus.StreamServerInterceptor,
	//			logging.StreamServerInterceptor(grpczerolog.InterceptorLogger(zlogger.Logger)),
	//			grpc_recovery.StreamServerInterceptor(),
	//		)),
	//		grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(
	//			grpc_ctxtags.UnaryServerInterceptor(),
	//			grpc_opentracing.UnaryServerInterceptor(),
	//			grpc_prometheus.UnaryServerInterceptor,
	//			logging.UnaryServerInterceptor(grpczerolog.InterceptorLogger(zlogger.Logger)),
	//			grpc_recovery.UnaryServerInterceptor(),
	//		)),
	//	)
	//	pb.RegisterHelloworldServiceServer(grpcServer, svc)
	//	grpcServer.Run()
	//}()

	handler := httpsrv.NewHelloworldHandler(svc)
	srv := rest.NewRestServer()
	srv.AddRoute(httpsrv.Routes(handler)...)
	srv.Run()
}
