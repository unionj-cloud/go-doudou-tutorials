// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Testhttp2GrpcServiceClient is the client API for Testhttp2GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Testhttp2GrpcServiceClient interface {
	PutUserRpc(ctx context.Context, in *GddUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error)
	GetDictRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DictResp, error)
}

type testhttp2GrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTesthttp2GrpcServiceClient(cc grpc.ClientConnInterface) Testhttp2GrpcServiceClient {
	return &testhttp2GrpcServiceClient{cc}
}

func (c *testhttp2GrpcServiceClient) PutUserRpc(ctx context.Context, in *GddUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/testhttp_2_grpc.Testhttp2GrpcService/PutUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testhttp2GrpcServiceClient) GetUsersRpc(ctx context.Context, in *Parameter, opts ...grpc.CallOption) (*Page, error) {
	out := new(Page)
	err := c.cc.Invoke(ctx, "/testhttp_2_grpc.Testhttp2GrpcService/GetUsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testhttp2GrpcServiceClient) GetDictRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DictResp, error) {
	out := new(DictResp)
	err := c.cc.Invoke(ctx, "/testhttp_2_grpc.Testhttp2GrpcService/GetDictRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Testhttp2GrpcServiceServer is the server API for Testhttp2GrpcService service.
// All implementations must embed UnimplementedTesthttp2GrpcServiceServer
// for forward compatibility
type Testhttp2GrpcServiceServer interface {
	PutUserRpc(context.Context, *GddUser) (*emptypb.Empty, error)
	GetUsersRpc(context.Context, *Parameter) (*Page, error)
	GetDictRpc(context.Context, *emptypb.Empty) (*DictResp, error)
	mustEmbedUnimplementedTesthttp2GrpcServiceServer()
}

// UnimplementedTesthttp2GrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTesthttp2GrpcServiceServer struct {
}

func (UnimplementedTesthttp2GrpcServiceServer) PutUserRpc(context.Context, *GddUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutUserRpc not implemented")
}
func (UnimplementedTesthttp2GrpcServiceServer) GetUsersRpc(context.Context, *Parameter) (*Page, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersRpc not implemented")
}
func (UnimplementedTesthttp2GrpcServiceServer) GetDictRpc(context.Context, *emptypb.Empty) (*DictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictRpc not implemented")
}
func (UnimplementedTesthttp2GrpcServiceServer) mustEmbedUnimplementedTesthttp2GrpcServiceServer() {}

// UnsafeTesthttp2GrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Testhttp2GrpcServiceServer will
// result in compilation errors.
type UnsafeTesthttp2GrpcServiceServer interface {
	mustEmbedUnimplementedTesthttp2GrpcServiceServer()
}

func RegisterTesthttp2GrpcServiceServer(s grpc.ServiceRegistrar, srv Testhttp2GrpcServiceServer) {
	s.RegisterService(&Testhttp2GrpcService_ServiceDesc, srv)
}

func _Testhttp2GrpcService_PutUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GddUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Testhttp2GrpcServiceServer).PutUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testhttp_2_grpc.Testhttp2GrpcService/PutUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Testhttp2GrpcServiceServer).PutUserRpc(ctx, req.(*GddUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testhttp2GrpcService_GetUsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Parameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Testhttp2GrpcServiceServer).GetUsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testhttp_2_grpc.Testhttp2GrpcService/GetUsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Testhttp2GrpcServiceServer).GetUsersRpc(ctx, req.(*Parameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Testhttp2GrpcService_GetDictRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Testhttp2GrpcServiceServer).GetDictRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testhttp_2_grpc.Testhttp2GrpcService/GetDictRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Testhttp2GrpcServiceServer).GetDictRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Testhttp2GrpcService_ServiceDesc is the grpc.ServiceDesc for Testhttp2GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Testhttp2GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testhttp_2_grpc.Testhttp2GrpcService",
	HandlerType: (*Testhttp2GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutUserRpc",
			Handler:    _Testhttp2GrpcService_PutUserRpc_Handler,
		},
		{
			MethodName: "GetUsersRpc",
			Handler:    _Testhttp2GrpcService_GetUsersRpc_Handler,
		},
		{
			MethodName: "GetDictRpc",
			Handler:    _Testhttp2GrpcService_GetDictRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/testhttp2grpc.proto",
}
