/**
* Generated by go-doudou v2.3.3.
* You can edit it as your need.
 */
package httpsrv

import (
	service "aaaa/apple"
	"aaaa/apple/dto"
	"context"
	"encoding/json"
	"net/http"

	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest/httprouter"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"
)

type AppleHandlerImpl struct {
	apple service.Apple
}

func (receiver *AppleHandlerImpl) PostUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		user dto.GddUser
		data int32
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&user); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(user); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.apple.PostUser(
		ctx,
		user,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data int32 `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *AppleHandlerImpl) GetUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		id   int32
		data dto.GddUser
		err  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	data, err = receiver.apple.GetUser_Id(
		ctx,
		id,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.GddUser `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *AppleHandlerImpl) PutUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		user dto.GddUser
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&user); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(user); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.apple.PutUser(
		ctx,
		user,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *AppleHandlerImpl) DeleteUser_Id(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx context.Context
		id  int32
		re  error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToInt32E(paramsFromCtx.ByName("id")); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		id = casted
	}
	if _err := rest.ValidateVar(id, "", "id"); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	re = receiver.apple.DeleteUser_Id(
		ctx,
		id,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *AppleHandlerImpl) GetUsers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx              context.Context
		parameterWrapper struct {
			Parameter dto.Parameter `json:"parameter"`
		}
		data dto.Page
		err  error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameterWrapper, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameterWrapper.Parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.apple.GetUsers(
		ctx,
		parameterWrapper.Parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewAppleHandler(apple service.Apple) AppleHandler {
	return &AppleHandlerImpl{
		apple,
	}
}
