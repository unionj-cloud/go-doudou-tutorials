// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"testgorm/model"
)

func newTInvalidToken(db *gorm.DB, opts ...gen.DOOption) tInvalidToken {
	_tInvalidToken := tInvalidToken{}

	_tInvalidToken.tInvalidTokenDo.UseDB(db, opts...)
	_tInvalidToken.tInvalidTokenDo.UseModel(&model.TInvalidToken{})

	tableName := _tInvalidToken.tInvalidTokenDo.TableName()
	_tInvalidToken.ALL = field.NewAsterisk(tableName)
	_tInvalidToken.ID = field.NewInt32(tableName, "id")
	_tInvalidToken.Token = field.NewString(tableName, "token")
	_tInvalidToken.ExpireAt = field.NewTime(tableName, "expire_at")
	_tInvalidToken.CreateAt = field.NewTime(tableName, "create_at")
	_tInvalidToken.UpdateAt = field.NewTime(tableName, "update_at")
	_tInvalidToken.DeleteAt = field.NewTime(tableName, "delete_at")

	_tInvalidToken.fillFieldMap()

	return _tInvalidToken
}

type tInvalidToken struct {
	tInvalidTokenDo tInvalidTokenDo

	ALL      field.Asterisk
	ID       field.Int32
	Token    field.String // revoked token
	ExpireAt field.Time   // expire time
	CreateAt field.Time
	UpdateAt field.Time
	DeleteAt field.Time

	fieldMap map[string]field.Expr
}

func (t tInvalidToken) Table(newTableName string) *tInvalidToken {
	t.tInvalidTokenDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tInvalidToken) As(alias string) *tInvalidToken {
	t.tInvalidTokenDo.DO = *(t.tInvalidTokenDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tInvalidToken) updateTableName(table string) *tInvalidToken {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Token = field.NewString(table, "token")
	t.ExpireAt = field.NewTime(table, "expire_at")
	t.CreateAt = field.NewTime(table, "create_at")
	t.UpdateAt = field.NewTime(table, "update_at")
	t.DeleteAt = field.NewTime(table, "delete_at")

	t.fillFieldMap()

	return t
}

func (t *tInvalidToken) WithContext(ctx context.Context) ITInvalidTokenDo {
	return t.tInvalidTokenDo.WithContext(ctx)
}

func (t tInvalidToken) TableName() string { return t.tInvalidTokenDo.TableName() }

func (t tInvalidToken) Alias() string { return t.tInvalidTokenDo.Alias() }

func (t tInvalidToken) Columns(cols ...field.Expr) gen.Columns {
	return t.tInvalidTokenDo.Columns(cols...)
}

func (t *tInvalidToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tInvalidToken) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["token"] = t.Token
	t.fieldMap["expire_at"] = t.ExpireAt
	t.fieldMap["create_at"] = t.CreateAt
	t.fieldMap["update_at"] = t.UpdateAt
	t.fieldMap["delete_at"] = t.DeleteAt
}

func (t tInvalidToken) clone(db *gorm.DB) tInvalidToken {
	t.tInvalidTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tInvalidToken) replaceDB(db *gorm.DB) tInvalidToken {
	t.tInvalidTokenDo.ReplaceDB(db)
	return t
}

type tInvalidTokenDo struct{ gen.DO }

type ITInvalidTokenDo interface {
	gen.SubQuery
	Debug() ITInvalidTokenDo
	WithContext(ctx context.Context) ITInvalidTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITInvalidTokenDo
	WriteDB() ITInvalidTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITInvalidTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITInvalidTokenDo
	Not(conds ...gen.Condition) ITInvalidTokenDo
	Or(conds ...gen.Condition) ITInvalidTokenDo
	Select(conds ...field.Expr) ITInvalidTokenDo
	Where(conds ...gen.Condition) ITInvalidTokenDo
	Order(conds ...field.Expr) ITInvalidTokenDo
	Distinct(cols ...field.Expr) ITInvalidTokenDo
	Omit(cols ...field.Expr) ITInvalidTokenDo
	Join(table schema.Tabler, on ...field.Expr) ITInvalidTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITInvalidTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITInvalidTokenDo
	Group(cols ...field.Expr) ITInvalidTokenDo
	Having(conds ...gen.Condition) ITInvalidTokenDo
	Limit(limit int) ITInvalidTokenDo
	Offset(offset int) ITInvalidTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITInvalidTokenDo
	Unscoped() ITInvalidTokenDo
	Create(values ...*model.TInvalidToken) error
	CreateInBatches(values []*model.TInvalidToken, batchSize int) error
	Save(values ...*model.TInvalidToken) error
	First() (*model.TInvalidToken, error)
	Take() (*model.TInvalidToken, error)
	Last() (*model.TInvalidToken, error)
	Find() ([]*model.TInvalidToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TInvalidToken, err error)
	FindInBatches(result *[]*model.TInvalidToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TInvalidToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITInvalidTokenDo
	Assign(attrs ...field.AssignExpr) ITInvalidTokenDo
	Joins(fields ...field.RelationField) ITInvalidTokenDo
	Preload(fields ...field.RelationField) ITInvalidTokenDo
	FirstOrInit() (*model.TInvalidToken, error)
	FirstOrCreate() (*model.TInvalidToken, error)
	FindByPage(offset int, limit int) (result []*model.TInvalidToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITInvalidTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tInvalidTokenDo) Debug() ITInvalidTokenDo {
	return t.withDO(t.DO.Debug())
}

func (t tInvalidTokenDo) WithContext(ctx context.Context) ITInvalidTokenDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tInvalidTokenDo) ReadDB() ITInvalidTokenDo {
	return t.Clauses(dbresolver.Read)
}

func (t tInvalidTokenDo) WriteDB() ITInvalidTokenDo {
	return t.Clauses(dbresolver.Write)
}

func (t tInvalidTokenDo) Session(config *gorm.Session) ITInvalidTokenDo {
	return t.withDO(t.DO.Session(config))
}

func (t tInvalidTokenDo) Clauses(conds ...clause.Expression) ITInvalidTokenDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tInvalidTokenDo) Returning(value interface{}, columns ...string) ITInvalidTokenDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tInvalidTokenDo) Not(conds ...gen.Condition) ITInvalidTokenDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tInvalidTokenDo) Or(conds ...gen.Condition) ITInvalidTokenDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tInvalidTokenDo) Select(conds ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tInvalidTokenDo) Where(conds ...gen.Condition) ITInvalidTokenDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tInvalidTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITInvalidTokenDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tInvalidTokenDo) Order(conds ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tInvalidTokenDo) Distinct(cols ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tInvalidTokenDo) Omit(cols ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tInvalidTokenDo) Join(table schema.Tabler, on ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tInvalidTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tInvalidTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tInvalidTokenDo) Group(cols ...field.Expr) ITInvalidTokenDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tInvalidTokenDo) Having(conds ...gen.Condition) ITInvalidTokenDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tInvalidTokenDo) Limit(limit int) ITInvalidTokenDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tInvalidTokenDo) Offset(offset int) ITInvalidTokenDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tInvalidTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITInvalidTokenDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tInvalidTokenDo) Unscoped() ITInvalidTokenDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tInvalidTokenDo) Create(values ...*model.TInvalidToken) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tInvalidTokenDo) CreateInBatches(values []*model.TInvalidToken, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tInvalidTokenDo) Save(values ...*model.TInvalidToken) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tInvalidTokenDo) First() (*model.TInvalidToken, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvalidToken), nil
	}
}

func (t tInvalidTokenDo) Take() (*model.TInvalidToken, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvalidToken), nil
	}
}

func (t tInvalidTokenDo) Last() (*model.TInvalidToken, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvalidToken), nil
	}
}

func (t tInvalidTokenDo) Find() ([]*model.TInvalidToken, error) {
	result, err := t.DO.Find()
	return result.([]*model.TInvalidToken), err
}

func (t tInvalidTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TInvalidToken, err error) {
	buf := make([]*model.TInvalidToken, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tInvalidTokenDo) FindInBatches(result *[]*model.TInvalidToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tInvalidTokenDo) Attrs(attrs ...field.AssignExpr) ITInvalidTokenDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tInvalidTokenDo) Assign(attrs ...field.AssignExpr) ITInvalidTokenDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tInvalidTokenDo) Joins(fields ...field.RelationField) ITInvalidTokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tInvalidTokenDo) Preload(fields ...field.RelationField) ITInvalidTokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tInvalidTokenDo) FirstOrInit() (*model.TInvalidToken, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvalidToken), nil
	}
}

func (t tInvalidTokenDo) FirstOrCreate() (*model.TInvalidToken, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInvalidToken), nil
	}
}

func (t tInvalidTokenDo) FindByPage(offset int, limit int) (result []*model.TInvalidToken, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tInvalidTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tInvalidTokenDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tInvalidTokenDo) Delete(models ...*model.TInvalidToken) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tInvalidTokenDo) withDO(do gen.Dao) *tInvalidTokenDo {
	t.DO = *do.(*gen.DO)
	return t
}
