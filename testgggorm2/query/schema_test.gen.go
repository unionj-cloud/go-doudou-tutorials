// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm2/model"
)

func newSchemaTest(db *gorm.DB, opts ...gormgen.DOOption) schemaTest {
	_schemaTest := schemaTest{}

	_schemaTest.schemaTestDo.UseDB(db, opts...)
	_schemaTest.schemaTestDo.UseModel(&model.SchemaTest{})

	tableName := _schemaTest.schemaTestDo.TableName()
	_schemaTest.ALL = field.NewAsterisk(tableName)
	_schemaTest.ID = field.NewInt32(tableName, "id")
	_schemaTest.Id1 = field.NewInt32(tableName, "id1")
	_schemaTest.Id2 = field.NewInt32(tableName, "id2")
	_schemaTest.Name = field.NewString(tableName, "name")
	_schemaTest.Status = field.NewString(tableName, "status")
	_schemaTest.Se = field.NewString(tableName, "se")
	_schemaTest.F = field.NewFloat32(tableName, "f")
	_schemaTest.D = field.NewFloat64(tableName, "d")
	_schemaTest.Uint = field.NewInt32(tableName, "uint")
	_schemaTest.Zfint = field.NewInt32(tableName, "zfint")
	_schemaTest.NameUcs = field.NewString(tableName, "name_ucs")
	_schemaTest.NameUTF8 = field.NewString(tableName, "name_utf8")
	_schemaTest.NameChar = field.NewString(tableName, "name_char")
	_schemaTest.NameBinary = field.NewBytes(tableName, "name_binary")
	_schemaTest.NameVarbinary = field.NewBytes(tableName, "name_varbinary")

	_schemaTest.fillFieldMap()

	return _schemaTest
}

type schemaTest struct {
	schemaTestDo schemaTestDo

	ALL           field.Asterisk
	ID            field.Int32
	Id1           field.Int32
	Id2           field.Int32
	Name          field.String
	Status        field.String
	Se            field.String
	F             field.Float32
	D             field.Float64
	Uint          field.Int32
	Zfint         field.Int32
	NameUcs       field.String
	NameUTF8      field.String
	NameChar      field.String
	NameBinary    field.Bytes
	NameVarbinary field.Bytes

	fieldMap map[string]field.Expr
}

func (s schemaTest) Table(newTableName string) *schemaTest {
	s.schemaTestDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s schemaTest) As(alias string) *schemaTest {
	s.schemaTestDo.DO = *(s.schemaTestDo.As(alias).(*gormgen.DO))
	return s.updateTableName(alias)
}

func (s *schemaTest) updateTableName(table string) *schemaTest {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.Id1 = field.NewInt32(table, "id1")
	s.Id2 = field.NewInt32(table, "id2")
	s.Name = field.NewString(table, "name")
	s.Status = field.NewString(table, "status")
	s.Se = field.NewString(table, "se")
	s.F = field.NewFloat32(table, "f")
	s.D = field.NewFloat64(table, "d")
	s.Uint = field.NewInt32(table, "uint")
	s.Zfint = field.NewInt32(table, "zfint")
	s.NameUcs = field.NewString(table, "name_ucs")
	s.NameUTF8 = field.NewString(table, "name_utf8")
	s.NameChar = field.NewString(table, "name_char")
	s.NameBinary = field.NewBytes(table, "name_binary")
	s.NameVarbinary = field.NewBytes(table, "name_varbinary")

	s.fillFieldMap()

	return s
}

func (s *schemaTest) WithContext(ctx context.Context) ISchemaTestDo {
	return s.schemaTestDo.WithContext(ctx)
}

func (s schemaTest) TableName() string { return s.schemaTestDo.TableName() }

func (s schemaTest) Alias() string { return s.schemaTestDo.Alias() }

func (s schemaTest) Columns(cols ...field.Expr) gormgen.Columns {
	return s.schemaTestDo.Columns(cols...)
}

func (s *schemaTest) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *schemaTest) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["id"] = s.ID
	s.fieldMap["id1"] = s.Id1
	s.fieldMap["id2"] = s.Id2
	s.fieldMap["name"] = s.Name
	s.fieldMap["status"] = s.Status
	s.fieldMap["se"] = s.Se
	s.fieldMap["f"] = s.F
	s.fieldMap["d"] = s.D
	s.fieldMap["uint"] = s.Uint
	s.fieldMap["zfint"] = s.Zfint
	s.fieldMap["name_ucs"] = s.NameUcs
	s.fieldMap["name_utf8"] = s.NameUTF8
	s.fieldMap["name_char"] = s.NameChar
	s.fieldMap["name_binary"] = s.NameBinary
	s.fieldMap["name_varbinary"] = s.NameVarbinary
}

func (s schemaTest) clone(db *gorm.DB) schemaTest {
	s.schemaTestDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s schemaTest) replaceDB(db *gorm.DB) schemaTest {
	s.schemaTestDo.ReplaceDB(db)
	return s
}

type schemaTestDo struct{ gormgen.DO }

type ISchemaTestDo interface {
	gormgen.SubQuery
	Debug() ISchemaTestDo
	WithContext(ctx context.Context) ISchemaTestDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISchemaTestDo
	WriteDB() ISchemaTestDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) ISchemaTestDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) ISchemaTestDo
	Not(conds ...gormgen.Condition) ISchemaTestDo
	Or(conds ...gormgen.Condition) ISchemaTestDo
	Select(conds ...field.Expr) ISchemaTestDo
	Where(conds ...gormgen.Condition) ISchemaTestDo
	Order(conds ...field.Expr) ISchemaTestDo
	Distinct(cols ...field.Expr) ISchemaTestDo
	Omit(cols ...field.Expr) ISchemaTestDo
	Join(table schema.Tabler, on ...field.Expr) ISchemaTestDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISchemaTestDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISchemaTestDo
	Group(cols ...field.Expr) ISchemaTestDo
	Having(conds ...gormgen.Condition) ISchemaTestDo
	Limit(limit int) ISchemaTestDo
	Offset(offset int) ISchemaTestDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ISchemaTestDo
	Unscoped() ISchemaTestDo
	Create(values ...*model.SchemaTest) error
	CreateInBatches(values []*model.SchemaTest, batchSize int) error
	Save(values ...*model.SchemaTest) error
	First() (*model.SchemaTest, error)
	Take() (*model.SchemaTest, error)
	Last() (*model.SchemaTest, error)
	Find() ([]*model.SchemaTest, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.SchemaTest, err error)
	FindInBatches(result *[]*model.SchemaTest, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SchemaTest) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) ISchemaTestDo
	Assign(attrs ...field.AssignExpr) ISchemaTestDo
	Joins(fields ...field.RelationField) ISchemaTestDo
	Preload(fields ...field.RelationField) ISchemaTestDo
	FirstOrInit() (*model.SchemaTest, error)
	FirstOrCreate() (*model.SchemaTest, error)
	FindByPage(offset int, limit int) (result []*model.SchemaTest, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISchemaTestDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s schemaTestDo) Debug() ISchemaTestDo {
	return s.withDO(s.DO.Debug())
}

func (s schemaTestDo) WithContext(ctx context.Context) ISchemaTestDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schemaTestDo) ReadDB() ISchemaTestDo {
	return s.Clauses(dbresolver.Read)
}

func (s schemaTestDo) WriteDB() ISchemaTestDo {
	return s.Clauses(dbresolver.Write)
}

func (s schemaTestDo) Session(config *gorm.Session) ISchemaTestDo {
	return s.withDO(s.DO.Session(config))
}

func (s schemaTestDo) Clauses(conds ...clause.Expression) ISchemaTestDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schemaTestDo) Returning(value interface{}, columns ...string) ISchemaTestDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s schemaTestDo) Not(conds ...gormgen.Condition) ISchemaTestDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schemaTestDo) Or(conds ...gormgen.Condition) ISchemaTestDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schemaTestDo) Select(conds ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schemaTestDo) Where(conds ...gormgen.Condition) ISchemaTestDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schemaTestDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISchemaTestDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s schemaTestDo) Order(conds ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schemaTestDo) Distinct(cols ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schemaTestDo) Omit(cols ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schemaTestDo) Join(table schema.Tabler, on ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schemaTestDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schemaTestDo) RightJoin(table schema.Tabler, on ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schemaTestDo) Group(cols ...field.Expr) ISchemaTestDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schemaTestDo) Having(conds ...gormgen.Condition) ISchemaTestDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schemaTestDo) Limit(limit int) ISchemaTestDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schemaTestDo) Offset(offset int) ISchemaTestDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schemaTestDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ISchemaTestDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schemaTestDo) Unscoped() ISchemaTestDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schemaTestDo) Create(values ...*model.SchemaTest) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schemaTestDo) CreateInBatches(values []*model.SchemaTest, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schemaTestDo) Save(values ...*model.SchemaTest) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schemaTestDo) First() (*model.SchemaTest, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchemaTest), nil
	}
}

func (s schemaTestDo) Take() (*model.SchemaTest, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchemaTest), nil
	}
}

func (s schemaTestDo) Last() (*model.SchemaTest, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchemaTest), nil
	}
}

func (s schemaTestDo) Find() ([]*model.SchemaTest, error) {
	result, err := s.DO.Find()
	return result.([]*model.SchemaTest), err
}

func (s schemaTestDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.SchemaTest, err error) {
	buf := make([]*model.SchemaTest, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schemaTestDo) FindInBatches(result *[]*model.SchemaTest, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schemaTestDo) Attrs(attrs ...field.AssignExpr) ISchemaTestDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schemaTestDo) Assign(attrs ...field.AssignExpr) ISchemaTestDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schemaTestDo) Joins(fields ...field.RelationField) ISchemaTestDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s schemaTestDo) Preload(fields ...field.RelationField) ISchemaTestDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s schemaTestDo) FirstOrInit() (*model.SchemaTest, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchemaTest), nil
	}
}

func (s schemaTestDo) FirstOrCreate() (*model.SchemaTest, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SchemaTest), nil
	}
}

func (s schemaTestDo) FindByPage(offset int, limit int) (result []*model.SchemaTest, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s schemaTestDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s schemaTestDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s schemaTestDo) Delete(models ...*model.SchemaTest) (result gormgen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *schemaTestDo) withDO(do gormgen.Dao) *schemaTestDo {
	s.DO = *do.(*gormgen.DO)
	return s
}
