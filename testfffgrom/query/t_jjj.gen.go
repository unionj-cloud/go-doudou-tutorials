// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testfffgrom/model"
)

func newTJjj(db *gorm.DB, opts ...gormgen.DOOption) tJjj {
	_tJjj := tJjj{}

	_tJjj.tJjjDo.UseDB(db, opts...)
	_tJjj.tJjjDo.UseModel(&model.TJjj{})

	tableName := _tJjj.tJjjDo.TableName()
	_tJjj.ALL = field.NewAsterisk(tableName)
	_tJjj.ID = field.NewInt32(tableName, "id")
	_tJjj.JobName = field.NewString(tableName, "job_name")
	_tJjj.DeletedAt = field.NewField(tableName, "deleted_at")

	_tJjj.fillFieldMap()

	return _tJjj
}

type tJjj struct {
	tJjjDo tJjjDo

	ALL       field.Asterisk
	ID        field.Int32
	JobName   field.String
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tJjj) Table(newTableName string) *tJjj {
	t.tJjjDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tJjj) As(alias string) *tJjj {
	t.tJjjDo.DO = *(t.tJjjDo.As(alias).(*gormgen.DO))
	return t.updateTableName(alias)
}

func (t *tJjj) updateTableName(table string) *tJjj {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.JobName = field.NewString(table, "job_name")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tJjj) WithContext(ctx context.Context) ITJjjDo { return t.tJjjDo.WithContext(ctx) }

func (t tJjj) TableName() string { return t.tJjjDo.TableName() }

func (t tJjj) Alias() string { return t.tJjjDo.Alias() }

func (t tJjj) Columns(cols ...field.Expr) gormgen.Columns { return t.tJjjDo.Columns(cols...) }

func (t *tJjj) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tJjj) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["job_name"] = t.JobName
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tJjj) clone(db *gorm.DB) tJjj {
	t.tJjjDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tJjj) replaceDB(db *gorm.DB) tJjj {
	t.tJjjDo.ReplaceDB(db)
	return t
}

type tJjjDo struct{ gormgen.DO }

type ITJjjDo interface {
	gormgen.SubQuery
	Debug() ITJjjDo
	WithContext(ctx context.Context) ITJjjDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITJjjDo
	WriteDB() ITJjjDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) ITJjjDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) ITJjjDo
	Not(conds ...gormgen.Condition) ITJjjDo
	Or(conds ...gormgen.Condition) ITJjjDo
	Select(conds ...field.Expr) ITJjjDo
	Where(conds ...gormgen.Condition) ITJjjDo
	Order(conds ...field.Expr) ITJjjDo
	Distinct(cols ...field.Expr) ITJjjDo
	Omit(cols ...field.Expr) ITJjjDo
	Join(table schema.Tabler, on ...field.Expr) ITJjjDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITJjjDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITJjjDo
	Group(cols ...field.Expr) ITJjjDo
	Having(conds ...gormgen.Condition) ITJjjDo
	Limit(limit int) ITJjjDo
	Offset(offset int) ITJjjDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITJjjDo
	Unscoped() ITJjjDo
	Create(values ...*model.TJjj) error
	CreateInBatches(values []*model.TJjj, batchSize int) error
	Save(values ...*model.TJjj) error
	First() (*model.TJjj, error)
	Take() (*model.TJjj, error)
	Last() (*model.TJjj, error)
	Find() ([]*model.TJjj, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TJjj, err error)
	FindInBatches(result *[]*model.TJjj, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TJjj) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) ITJjjDo
	Assign(attrs ...field.AssignExpr) ITJjjDo
	Joins(fields ...field.RelationField) ITJjjDo
	Preload(fields ...field.RelationField) ITJjjDo
	FirstOrInit() (*model.TJjj, error)
	FirstOrCreate() (*model.TJjj, error)
	FindByPage(offset int, limit int) (result []*model.TJjj, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITJjjDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tJjjDo) Debug() ITJjjDo {
	return t.withDO(t.DO.Debug())
}

func (t tJjjDo) WithContext(ctx context.Context) ITJjjDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tJjjDo) ReadDB() ITJjjDo {
	return t.Clauses(dbresolver.Read)
}

func (t tJjjDo) WriteDB() ITJjjDo {
	return t.Clauses(dbresolver.Write)
}

func (t tJjjDo) Session(config *gorm.Session) ITJjjDo {
	return t.withDO(t.DO.Session(config))
}

func (t tJjjDo) Clauses(conds ...clause.Expression) ITJjjDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tJjjDo) Returning(value interface{}, columns ...string) ITJjjDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tJjjDo) Not(conds ...gormgen.Condition) ITJjjDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tJjjDo) Or(conds ...gormgen.Condition) ITJjjDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tJjjDo) Select(conds ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tJjjDo) Where(conds ...gormgen.Condition) ITJjjDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tJjjDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITJjjDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tJjjDo) Order(conds ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tJjjDo) Distinct(cols ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tJjjDo) Omit(cols ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tJjjDo) Join(table schema.Tabler, on ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tJjjDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tJjjDo) RightJoin(table schema.Tabler, on ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tJjjDo) Group(cols ...field.Expr) ITJjjDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tJjjDo) Having(conds ...gormgen.Condition) ITJjjDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tJjjDo) Limit(limit int) ITJjjDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tJjjDo) Offset(offset int) ITJjjDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tJjjDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITJjjDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tJjjDo) Unscoped() ITJjjDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tJjjDo) Create(values ...*model.TJjj) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tJjjDo) CreateInBatches(values []*model.TJjj, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tJjjDo) Save(values ...*model.TJjj) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tJjjDo) First() (*model.TJjj, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJjj), nil
	}
}

func (t tJjjDo) Take() (*model.TJjj, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJjj), nil
	}
}

func (t tJjjDo) Last() (*model.TJjj, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJjj), nil
	}
}

func (t tJjjDo) Find() ([]*model.TJjj, error) {
	result, err := t.DO.Find()
	return result.([]*model.TJjj), err
}

func (t tJjjDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TJjj, err error) {
	buf := make([]*model.TJjj, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tJjjDo) FindInBatches(result *[]*model.TJjj, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tJjjDo) Attrs(attrs ...field.AssignExpr) ITJjjDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tJjjDo) Assign(attrs ...field.AssignExpr) ITJjjDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tJjjDo) Joins(fields ...field.RelationField) ITJjjDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tJjjDo) Preload(fields ...field.RelationField) ITJjjDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tJjjDo) FirstOrInit() (*model.TJjj, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJjj), nil
	}
}

func (t tJjjDo) FirstOrCreate() (*model.TJjj, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJjj), nil
	}
}

func (t tJjjDo) FindByPage(offset int, limit int) (result []*model.TJjj, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tJjjDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tJjjDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tJjjDo) Delete(models ...*model.TJjj) (result gormgen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tJjjDo) withDO(do gormgen.Dao) *tJjjDo {
	t.DO = *do.(*gormgen.DO)
	return t
}
