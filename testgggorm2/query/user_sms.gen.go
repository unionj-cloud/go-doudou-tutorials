// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm2/model"
)

func newUserSm(db *gorm.DB, opts ...gormgen.DOOption) userSm {
	_userSm := userSm{}

	_userSm.userSmDo.UseDB(db, opts...)
	_userSm.userSmDo.UseModel(&model.UserSm{})

	tableName := _userSm.userSmDo.TableName()
	_userSm.ALL = field.NewAsterisk(tableName)
	_userSm.ID = field.NewInt32(tableName, "id")
	_userSm.IP = field.NewString(tableName, "ip")
	_userSm.Phone = field.NewString(tableName, "phone")
	_userSm.SendCount = field.NewInt32(tableName, "send_count")
	_userSm.AddDay = field.NewString(tableName, "add_day")
	_userSm.AddTime = field.NewInt32(tableName, "add_time")
	_userSm.Sign = field.NewString(tableName, "sign")

	_userSm.fillFieldMap()

	return _userSm
}

type userSm struct {
	userSmDo userSmDo

	ALL       field.Asterisk
	ID        field.Int32
	IP        field.String // ip地址
	Phone     field.String // 手机号
	SendCount field.Int32  // 发送统计
	AddDay    field.String // 添加日期
	AddTime   field.Int32  // 添加时间
	Sign      field.String // 签名

	fieldMap map[string]field.Expr
}

func (u userSm) Table(newTableName string) *userSm {
	u.userSmDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userSm) As(alias string) *userSm {
	u.userSmDo.DO = *(u.userSmDo.As(alias).(*gormgen.DO))
	return u.updateTableName(alias)
}

func (u *userSm) updateTableName(table string) *userSm {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.IP = field.NewString(table, "ip")
	u.Phone = field.NewString(table, "phone")
	u.SendCount = field.NewInt32(table, "send_count")
	u.AddDay = field.NewString(table, "add_day")
	u.AddTime = field.NewInt32(table, "add_time")
	u.Sign = field.NewString(table, "sign")

	u.fillFieldMap()

	return u
}

func (u *userSm) WithContext(ctx context.Context) IUserSmDo { return u.userSmDo.WithContext(ctx) }

func (u userSm) TableName() string { return u.userSmDo.TableName() }

func (u userSm) Alias() string { return u.userSmDo.Alias() }

func (u userSm) Columns(cols ...field.Expr) gormgen.Columns { return u.userSmDo.Columns(cols...) }

func (u *userSm) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userSm) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["ip"] = u.IP
	u.fieldMap["phone"] = u.Phone
	u.fieldMap["send_count"] = u.SendCount
	u.fieldMap["add_day"] = u.AddDay
	u.fieldMap["add_time"] = u.AddTime
	u.fieldMap["sign"] = u.Sign
}

func (u userSm) clone(db *gorm.DB) userSm {
	u.userSmDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userSm) replaceDB(db *gorm.DB) userSm {
	u.userSmDo.ReplaceDB(db)
	return u
}

type userSmDo struct{ gormgen.DO }

type IUserSmDo interface {
	gormgen.SubQuery
	Debug() IUserSmDo
	WithContext(ctx context.Context) IUserSmDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserSmDo
	WriteDB() IUserSmDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IUserSmDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IUserSmDo
	Not(conds ...gormgen.Condition) IUserSmDo
	Or(conds ...gormgen.Condition) IUserSmDo
	Select(conds ...field.Expr) IUserSmDo
	Where(conds ...gormgen.Condition) IUserSmDo
	Order(conds ...field.Expr) IUserSmDo
	Distinct(cols ...field.Expr) IUserSmDo
	Omit(cols ...field.Expr) IUserSmDo
	Join(table schema.Tabler, on ...field.Expr) IUserSmDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserSmDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserSmDo
	Group(cols ...field.Expr) IUserSmDo
	Having(conds ...gormgen.Condition) IUserSmDo
	Limit(limit int) IUserSmDo
	Offset(offset int) IUserSmDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IUserSmDo
	Unscoped() IUserSmDo
	Create(values ...*model.UserSm) error
	CreateInBatches(values []*model.UserSm, batchSize int) error
	Save(values ...*model.UserSm) error
	First() (*model.UserSm, error)
	Take() (*model.UserSm, error)
	Last() (*model.UserSm, error)
	Find() ([]*model.UserSm, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.UserSm, err error)
	FindInBatches(result *[]*model.UserSm, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserSm) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IUserSmDo
	Assign(attrs ...field.AssignExpr) IUserSmDo
	Joins(fields ...field.RelationField) IUserSmDo
	Preload(fields ...field.RelationField) IUserSmDo
	FirstOrInit() (*model.UserSm, error)
	FirstOrCreate() (*model.UserSm, error)
	FindByPage(offset int, limit int) (result []*model.UserSm, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserSmDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userSmDo) Debug() IUserSmDo {
	return u.withDO(u.DO.Debug())
}

func (u userSmDo) WithContext(ctx context.Context) IUserSmDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userSmDo) ReadDB() IUserSmDo {
	return u.Clauses(dbresolver.Read)
}

func (u userSmDo) WriteDB() IUserSmDo {
	return u.Clauses(dbresolver.Write)
}

func (u userSmDo) Session(config *gorm.Session) IUserSmDo {
	return u.withDO(u.DO.Session(config))
}

func (u userSmDo) Clauses(conds ...clause.Expression) IUserSmDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userSmDo) Returning(value interface{}, columns ...string) IUserSmDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userSmDo) Not(conds ...gormgen.Condition) IUserSmDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userSmDo) Or(conds ...gormgen.Condition) IUserSmDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userSmDo) Select(conds ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userSmDo) Where(conds ...gormgen.Condition) IUserSmDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userSmDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserSmDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userSmDo) Order(conds ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userSmDo) Distinct(cols ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userSmDo) Omit(cols ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userSmDo) Join(table schema.Tabler, on ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userSmDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userSmDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userSmDo) Group(cols ...field.Expr) IUserSmDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userSmDo) Having(conds ...gormgen.Condition) IUserSmDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userSmDo) Limit(limit int) IUserSmDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userSmDo) Offset(offset int) IUserSmDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userSmDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IUserSmDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userSmDo) Unscoped() IUserSmDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userSmDo) Create(values ...*model.UserSm) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userSmDo) CreateInBatches(values []*model.UserSm, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userSmDo) Save(values ...*model.UserSm) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userSmDo) First() (*model.UserSm, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSm), nil
	}
}

func (u userSmDo) Take() (*model.UserSm, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSm), nil
	}
}

func (u userSmDo) Last() (*model.UserSm, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSm), nil
	}
}

func (u userSmDo) Find() ([]*model.UserSm, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserSm), err
}

func (u userSmDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.UserSm, err error) {
	buf := make([]*model.UserSm, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userSmDo) FindInBatches(result *[]*model.UserSm, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userSmDo) Attrs(attrs ...field.AssignExpr) IUserSmDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userSmDo) Assign(attrs ...field.AssignExpr) IUserSmDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userSmDo) Joins(fields ...field.RelationField) IUserSmDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userSmDo) Preload(fields ...field.RelationField) IUserSmDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userSmDo) FirstOrInit() (*model.UserSm, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSm), nil
	}
}

func (u userSmDo) FirstOrCreate() (*model.UserSm, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserSm), nil
	}
}

func (u userSmDo) FindByPage(offset int, limit int) (result []*model.UserSm, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userSmDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userSmDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userSmDo) Delete(models ...*model.UserSm) (result gormgen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userSmDo) withDO(do gormgen.Dao) *userSmDo {
	u.DO = *do.(*gormgen.DO)
	return u
}
