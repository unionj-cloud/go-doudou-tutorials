// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm2/model"
)

func newProductImage(db *gorm.DB, opts ...gormgen.DOOption) productImage {
	_productImage := productImage{}

	_productImage.productImageDo.UseDB(db, opts...)
	_productImage.productImageDo.UseModel(&model.ProductImage{})

	tableName := _productImage.productImageDo.TableName()
	_productImage.ALL = field.NewAsterisk(tableName)
	_productImage.ID = field.NewInt32(tableName, "id")
	_productImage.ProductID = field.NewInt32(tableName, "product_id")
	_productImage.ImgURL = field.NewString(tableName, "img_url")
	_productImage.ColorID = field.NewInt32(tableName, "color_id")
	_productImage.Sort = field.NewInt32(tableName, "sort")
	_productImage.AddTime = field.NewInt32(tableName, "add_time")
	_productImage.Status = field.NewInt32(tableName, "status")

	_productImage.fillFieldMap()

	return _productImage
}

type productImage struct {
	productImageDo productImageDo

	ALL       field.Asterisk
	ID        field.Int32
	ProductID field.Int32  // 商品编号
	ImgURL    field.String // 图片地址
	ColorID   field.Int32  // 颜色编号
	Sort      field.Int32  // 排序
	AddTime   field.Int32  // 添加时间
	Status    field.Int32  // 状态

	fieldMap map[string]field.Expr
}

func (p productImage) Table(newTableName string) *productImage {
	p.productImageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p productImage) As(alias string) *productImage {
	p.productImageDo.DO = *(p.productImageDo.As(alias).(*gormgen.DO))
	return p.updateTableName(alias)
}

func (p *productImage) updateTableName(table string) *productImage {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.ProductID = field.NewInt32(table, "product_id")
	p.ImgURL = field.NewString(table, "img_url")
	p.ColorID = field.NewInt32(table, "color_id")
	p.Sort = field.NewInt32(table, "sort")
	p.AddTime = field.NewInt32(table, "add_time")
	p.Status = field.NewInt32(table, "status")

	p.fillFieldMap()

	return p
}

func (p *productImage) WithContext(ctx context.Context) IProductImageDo {
	return p.productImageDo.WithContext(ctx)
}

func (p productImage) TableName() string { return p.productImageDo.TableName() }

func (p productImage) Alias() string { return p.productImageDo.Alias() }

func (p productImage) Columns(cols ...field.Expr) gormgen.Columns {
	return p.productImageDo.Columns(cols...)
}

func (p *productImage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *productImage) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["product_id"] = p.ProductID
	p.fieldMap["img_url"] = p.ImgURL
	p.fieldMap["color_id"] = p.ColorID
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["add_time"] = p.AddTime
	p.fieldMap["status"] = p.Status
}

func (p productImage) clone(db *gorm.DB) productImage {
	p.productImageDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p productImage) replaceDB(db *gorm.DB) productImage {
	p.productImageDo.ReplaceDB(db)
	return p
}

type productImageDo struct{ gormgen.DO }

type IProductImageDo interface {
	gormgen.SubQuery
	Debug() IProductImageDo
	WithContext(ctx context.Context) IProductImageDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductImageDo
	WriteDB() IProductImageDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IProductImageDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IProductImageDo
	Not(conds ...gormgen.Condition) IProductImageDo
	Or(conds ...gormgen.Condition) IProductImageDo
	Select(conds ...field.Expr) IProductImageDo
	Where(conds ...gormgen.Condition) IProductImageDo
	Order(conds ...field.Expr) IProductImageDo
	Distinct(cols ...field.Expr) IProductImageDo
	Omit(cols ...field.Expr) IProductImageDo
	Join(table schema.Tabler, on ...field.Expr) IProductImageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductImageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductImageDo
	Group(cols ...field.Expr) IProductImageDo
	Having(conds ...gormgen.Condition) IProductImageDo
	Limit(limit int) IProductImageDo
	Offset(offset int) IProductImageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IProductImageDo
	Unscoped() IProductImageDo
	Create(values ...*model.ProductImage) error
	CreateInBatches(values []*model.ProductImage, batchSize int) error
	Save(values ...*model.ProductImage) error
	First() (*model.ProductImage, error)
	Take() (*model.ProductImage, error)
	Last() (*model.ProductImage, error)
	Find() ([]*model.ProductImage, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ProductImage, err error)
	FindInBatches(result *[]*model.ProductImage, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProductImage) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IProductImageDo
	Assign(attrs ...field.AssignExpr) IProductImageDo
	Joins(fields ...field.RelationField) IProductImageDo
	Preload(fields ...field.RelationField) IProductImageDo
	FirstOrInit() (*model.ProductImage, error)
	FirstOrCreate() (*model.ProductImage, error)
	FindByPage(offset int, limit int) (result []*model.ProductImage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductImageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productImageDo) Debug() IProductImageDo {
	return p.withDO(p.DO.Debug())
}

func (p productImageDo) WithContext(ctx context.Context) IProductImageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productImageDo) ReadDB() IProductImageDo {
	return p.Clauses(dbresolver.Read)
}

func (p productImageDo) WriteDB() IProductImageDo {
	return p.Clauses(dbresolver.Write)
}

func (p productImageDo) Session(config *gorm.Session) IProductImageDo {
	return p.withDO(p.DO.Session(config))
}

func (p productImageDo) Clauses(conds ...clause.Expression) IProductImageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productImageDo) Returning(value interface{}, columns ...string) IProductImageDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productImageDo) Not(conds ...gormgen.Condition) IProductImageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productImageDo) Or(conds ...gormgen.Condition) IProductImageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productImageDo) Select(conds ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productImageDo) Where(conds ...gormgen.Condition) IProductImageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productImageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProductImageDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p productImageDo) Order(conds ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productImageDo) Distinct(cols ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productImageDo) Omit(cols ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productImageDo) Join(table schema.Tabler, on ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productImageDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productImageDo) Group(cols ...field.Expr) IProductImageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productImageDo) Having(conds ...gormgen.Condition) IProductImageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productImageDo) Limit(limit int) IProductImageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productImageDo) Offset(offset int) IProductImageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productImageDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IProductImageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productImageDo) Unscoped() IProductImageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productImageDo) Create(values ...*model.ProductImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productImageDo) CreateInBatches(values []*model.ProductImage, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productImageDo) Save(values ...*model.ProductImage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productImageDo) First() (*model.ProductImage, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductImage), nil
	}
}

func (p productImageDo) Take() (*model.ProductImage, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductImage), nil
	}
}

func (p productImageDo) Last() (*model.ProductImage, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductImage), nil
	}
}

func (p productImageDo) Find() ([]*model.ProductImage, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProductImage), err
}

func (p productImageDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.ProductImage, err error) {
	buf := make([]*model.ProductImage, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productImageDo) FindInBatches(result *[]*model.ProductImage, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productImageDo) Attrs(attrs ...field.AssignExpr) IProductImageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productImageDo) Assign(attrs ...field.AssignExpr) IProductImageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productImageDo) Joins(fields ...field.RelationField) IProductImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productImageDo) Preload(fields ...field.RelationField) IProductImageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productImageDo) FirstOrInit() (*model.ProductImage, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductImage), nil
	}
}

func (p productImageDo) FirstOrCreate() (*model.ProductImage, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProductImage), nil
	}
}

func (p productImageDo) FindByPage(offset int, limit int) (result []*model.ProductImage, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productImageDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productImageDo) Delete(models ...*model.ProductImage) (result gormgen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productImageDo) withDO(do gormgen.Dao) *productImageDo {
	p.DO = *do.(*gormgen.DO)
	return p
}
