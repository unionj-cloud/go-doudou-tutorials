// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormdemo/model"
)

func newQrtzCalendar(db *gorm.DB, opts ...gen.DOOption) qrtzCalendar {
	_qrtzCalendar := qrtzCalendar{}

	_qrtzCalendar.qrtzCalendarDo.UseDB(db, opts...)
	_qrtzCalendar.qrtzCalendarDo.UseModel(&model.QrtzCalendar{})

	tableName := _qrtzCalendar.qrtzCalendarDo.TableName()
	_qrtzCalendar.ALL = field.NewAsterisk(tableName)
	_qrtzCalendar.SCHEDNAME = field.NewString(tableName, "SCHED_NAME")
	_qrtzCalendar.CALENDARNAME = field.NewString(tableName, "CALENDAR_NAME")
	_qrtzCalendar.CALENDAR = field.NewBytes(tableName, "CALENDAR")

	_qrtzCalendar.fillFieldMap()

	return _qrtzCalendar
}

type qrtzCalendar struct {
	qrtzCalendarDo qrtzCalendarDo

	ALL          field.Asterisk
	SCHEDNAME    field.String
	CALENDARNAME field.String
	CALENDAR     field.Bytes

	fieldMap map[string]field.Expr
}

func (q qrtzCalendar) Table(newTableName string) *qrtzCalendar {
	q.qrtzCalendarDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q qrtzCalendar) As(alias string) *qrtzCalendar {
	q.qrtzCalendarDo.DO = *(q.qrtzCalendarDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *qrtzCalendar) updateTableName(table string) *qrtzCalendar {
	q.ALL = field.NewAsterisk(table)
	q.SCHEDNAME = field.NewString(table, "SCHED_NAME")
	q.CALENDARNAME = field.NewString(table, "CALENDAR_NAME")
	q.CALENDAR = field.NewBytes(table, "CALENDAR")

	q.fillFieldMap()

	return q
}

func (q *qrtzCalendar) WithContext(ctx context.Context) IQrtzCalendarDo {
	return q.qrtzCalendarDo.WithContext(ctx)
}

func (q qrtzCalendar) TableName() string { return q.qrtzCalendarDo.TableName() }

func (q qrtzCalendar) Alias() string { return q.qrtzCalendarDo.Alias() }

func (q qrtzCalendar) Columns(cols ...field.Expr) gen.Columns {
	return q.qrtzCalendarDo.Columns(cols...)
}

func (q *qrtzCalendar) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *qrtzCalendar) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 3)
	q.fieldMap["SCHED_NAME"] = q.SCHEDNAME
	q.fieldMap["CALENDAR_NAME"] = q.CALENDARNAME
	q.fieldMap["CALENDAR"] = q.CALENDAR
}

func (q qrtzCalendar) clone(db *gorm.DB) qrtzCalendar {
	q.qrtzCalendarDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q qrtzCalendar) replaceDB(db *gorm.DB) qrtzCalendar {
	q.qrtzCalendarDo.ReplaceDB(db)
	return q
}

type qrtzCalendarDo struct{ gen.DO }

type IQrtzCalendarDo interface {
	gen.SubQuery
	Debug() IQrtzCalendarDo
	WithContext(ctx context.Context) IQrtzCalendarDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQrtzCalendarDo
	WriteDB() IQrtzCalendarDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQrtzCalendarDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQrtzCalendarDo
	Not(conds ...gen.Condition) IQrtzCalendarDo
	Or(conds ...gen.Condition) IQrtzCalendarDo
	Select(conds ...field.Expr) IQrtzCalendarDo
	Where(conds ...gen.Condition) IQrtzCalendarDo
	Order(conds ...field.Expr) IQrtzCalendarDo
	Distinct(cols ...field.Expr) IQrtzCalendarDo
	Omit(cols ...field.Expr) IQrtzCalendarDo
	Join(table schema.Tabler, on ...field.Expr) IQrtzCalendarDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzCalendarDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQrtzCalendarDo
	Group(cols ...field.Expr) IQrtzCalendarDo
	Having(conds ...gen.Condition) IQrtzCalendarDo
	Limit(limit int) IQrtzCalendarDo
	Offset(offset int) IQrtzCalendarDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzCalendarDo
	Unscoped() IQrtzCalendarDo
	Create(values ...*model.QrtzCalendar) error
	CreateInBatches(values []*model.QrtzCalendar, batchSize int) error
	Save(values ...*model.QrtzCalendar) error
	First() (*model.QrtzCalendar, error)
	Take() (*model.QrtzCalendar, error)
	Last() (*model.QrtzCalendar, error)
	Find() ([]*model.QrtzCalendar, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzCalendar, err error)
	FindInBatches(result *[]*model.QrtzCalendar, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.QrtzCalendar) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQrtzCalendarDo
	Assign(attrs ...field.AssignExpr) IQrtzCalendarDo
	Joins(fields ...field.RelationField) IQrtzCalendarDo
	Preload(fields ...field.RelationField) IQrtzCalendarDo
	FirstOrInit() (*model.QrtzCalendar, error)
	FirstOrCreate() (*model.QrtzCalendar, error)
	FindByPage(offset int, limit int) (result []*model.QrtzCalendar, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQrtzCalendarDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q qrtzCalendarDo) Debug() IQrtzCalendarDo {
	return q.withDO(q.DO.Debug())
}

func (q qrtzCalendarDo) WithContext(ctx context.Context) IQrtzCalendarDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q qrtzCalendarDo) ReadDB() IQrtzCalendarDo {
	return q.Clauses(dbresolver.Read)
}

func (q qrtzCalendarDo) WriteDB() IQrtzCalendarDo {
	return q.Clauses(dbresolver.Write)
}

func (q qrtzCalendarDo) Session(config *gorm.Session) IQrtzCalendarDo {
	return q.withDO(q.DO.Session(config))
}

func (q qrtzCalendarDo) Clauses(conds ...clause.Expression) IQrtzCalendarDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q qrtzCalendarDo) Returning(value interface{}, columns ...string) IQrtzCalendarDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q qrtzCalendarDo) Not(conds ...gen.Condition) IQrtzCalendarDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q qrtzCalendarDo) Or(conds ...gen.Condition) IQrtzCalendarDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q qrtzCalendarDo) Select(conds ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q qrtzCalendarDo) Where(conds ...gen.Condition) IQrtzCalendarDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q qrtzCalendarDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IQrtzCalendarDo {
	return q.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (q qrtzCalendarDo) Order(conds ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q qrtzCalendarDo) Distinct(cols ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q qrtzCalendarDo) Omit(cols ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q qrtzCalendarDo) Join(table schema.Tabler, on ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q qrtzCalendarDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q qrtzCalendarDo) RightJoin(table schema.Tabler, on ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q qrtzCalendarDo) Group(cols ...field.Expr) IQrtzCalendarDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q qrtzCalendarDo) Having(conds ...gen.Condition) IQrtzCalendarDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q qrtzCalendarDo) Limit(limit int) IQrtzCalendarDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q qrtzCalendarDo) Offset(offset int) IQrtzCalendarDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q qrtzCalendarDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQrtzCalendarDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q qrtzCalendarDo) Unscoped() IQrtzCalendarDo {
	return q.withDO(q.DO.Unscoped())
}

func (q qrtzCalendarDo) Create(values ...*model.QrtzCalendar) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q qrtzCalendarDo) CreateInBatches(values []*model.QrtzCalendar, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q qrtzCalendarDo) Save(values ...*model.QrtzCalendar) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q qrtzCalendarDo) First() (*model.QrtzCalendar, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCalendar), nil
	}
}

func (q qrtzCalendarDo) Take() (*model.QrtzCalendar, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCalendar), nil
	}
}

func (q qrtzCalendarDo) Last() (*model.QrtzCalendar, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCalendar), nil
	}
}

func (q qrtzCalendarDo) Find() ([]*model.QrtzCalendar, error) {
	result, err := q.DO.Find()
	return result.([]*model.QrtzCalendar), err
}

func (q qrtzCalendarDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.QrtzCalendar, err error) {
	buf := make([]*model.QrtzCalendar, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q qrtzCalendarDo) FindInBatches(result *[]*model.QrtzCalendar, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q qrtzCalendarDo) Attrs(attrs ...field.AssignExpr) IQrtzCalendarDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q qrtzCalendarDo) Assign(attrs ...field.AssignExpr) IQrtzCalendarDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q qrtzCalendarDo) Joins(fields ...field.RelationField) IQrtzCalendarDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q qrtzCalendarDo) Preload(fields ...field.RelationField) IQrtzCalendarDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q qrtzCalendarDo) FirstOrInit() (*model.QrtzCalendar, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCalendar), nil
	}
}

func (q qrtzCalendarDo) FirstOrCreate() (*model.QrtzCalendar, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.QrtzCalendar), nil
	}
}

func (q qrtzCalendarDo) FindByPage(offset int, limit int) (result []*model.QrtzCalendar, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q qrtzCalendarDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q qrtzCalendarDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q qrtzCalendarDo) Delete(models ...*model.QrtzCalendar) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *qrtzCalendarDo) withDO(do gen.Dao) *qrtzCalendarDo {
	q.DO = *do.(*gen.DO)
	return q
}
