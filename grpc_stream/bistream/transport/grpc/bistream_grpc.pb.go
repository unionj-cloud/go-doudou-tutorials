// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BistreamServiceClient is the client API for BistreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BistreamServiceClient interface {
	RegisterRpc(ctx context.Context, opts ...grpc.CallOption) (BistreamService_RegisterRpcClient, error)
}

type bistreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBistreamServiceClient(cc grpc.ClientConnInterface) BistreamServiceClient {
	return &bistreamServiceClient{cc}
}

func (c *bistreamServiceClient) RegisterRpc(ctx context.Context, opts ...grpc.CallOption) (BistreamService_RegisterRpcClient, error) {
	stream, err := c.cc.NewStream(ctx, &BistreamService_ServiceDesc.Streams[0], "/bistream.BistreamService/RegisterRpc", opts...)
	if err != nil {
		return nil, err
	}
	x := &bistreamServiceRegisterRpcClient{stream}
	return x, nil
}

type BistreamService_RegisterRpcClient interface {
	Send(*Service) error
	Recv() (*Service, error)
	grpc.ClientStream
}

type bistreamServiceRegisterRpcClient struct {
	grpc.ClientStream
}

func (x *bistreamServiceRegisterRpcClient) Send(m *Service) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bistreamServiceRegisterRpcClient) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BistreamServiceServer is the server API for BistreamService service.
// All implementations must embed UnimplementedBistreamServiceServer
// for forward compatibility
type BistreamServiceServer interface {
	RegisterRpc(BistreamService_RegisterRpcServer) error
	mustEmbedUnimplementedBistreamServiceServer()
}

// UnimplementedBistreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBistreamServiceServer struct {
}

func (UnimplementedBistreamServiceServer) RegisterRpc(BistreamService_RegisterRpcServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterRpc not implemented")
}
func (UnimplementedBistreamServiceServer) mustEmbedUnimplementedBistreamServiceServer() {}

// UnsafeBistreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BistreamServiceServer will
// result in compilation errors.
type UnsafeBistreamServiceServer interface {
	mustEmbedUnimplementedBistreamServiceServer()
}

func RegisterBistreamServiceServer(s grpc.ServiceRegistrar, srv BistreamServiceServer) {
	s.RegisterService(&BistreamService_ServiceDesc, srv)
}

func _BistreamService_RegisterRpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BistreamServiceServer).RegisterRpc(&bistreamServiceRegisterRpcServer{stream})
}

type BistreamService_RegisterRpcServer interface {
	Send(*Service) error
	Recv() (*Service, error)
	grpc.ServerStream
}

type bistreamServiceRegisterRpcServer struct {
	grpc.ServerStream
}

func (x *bistreamServiceRegisterRpcServer) Send(m *Service) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bistreamServiceRegisterRpcServer) Recv() (*Service, error) {
	m := new(Service)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BistreamService_ServiceDesc is the grpc.ServiceDesc for BistreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BistreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bistream.BistreamService",
	HandlerType: (*BistreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterRpc",
			Handler:       _BistreamService_RegisterRpc_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport/grpc/bistream.proto",
}
