/**
* Generated by go-doudou v2.0.0.
* You can edit it as your need.
 */
package service

import (
	"annotation/config"
	"context"
	"os"
	"strconv"

	"github.com/brianvoe/gofakeit/v6"
	"google.golang.org/protobuf/types/known/emptypb"

	pb "annotation/transport/grpc"
)

var _ Annotation = (*AnnotationImpl)(nil)

var _ pb.AnnotationServiceServer = (*AnnotationImpl)(nil)

type AnnotationImpl struct {
	pb.UnimplementedAnnotationServiceServer

	conf *config.Config
}

func NewAnnotation(conf *config.Config) *AnnotationImpl {
	return &AnnotationImpl{
		conf: conf,
	}
}

func (receiver *AnnotationImpl) GetGuest(ctx context.Context) (data string, err error) {
	return strconv.Itoa(os.Getpid()), nil
}
func (receiver *AnnotationImpl) GetUser(ctx context.Context) (data string, err error) {
	var _result struct {
		Data string
	}
	_ = gofakeit.Struct(&_result)
	return _result.Data, nil
}
func (receiver *AnnotationImpl) GetAdmin(ctx context.Context) (data string, err error) {
	var _result struct {
		Data string
	}
	_ = gofakeit.Struct(&_result)
	return _result.Data, nil
}

func (receiver *AnnotationImpl) GetGuestRpc(ctx context.Context, request *emptypb.Empty) (*pb.GetGuestRpcResponse, error) {
	ret, err := receiver.GetGuest(ctx)
	if err != nil {
		panic(err)
	}
	return &pb.GetGuestRpcResponse{
		Data: ret,
	}, nil
}
func (receiver *AnnotationImpl) GetUserRpc(ctx context.Context, request *emptypb.Empty) (*pb.GetUserRpcResponse, error) {
	ret, err := receiver.GetUser(ctx)
	if err != nil {
		panic(err)
	}
	return &pb.GetUserRpcResponse{
		Data: ret,
	}, nil
}
func (receiver *AnnotationImpl) GetAdminRpc(ctx context.Context, request *emptypb.Empty) (*pb.GetAdminRpcResponse, error) {
	ret, err := receiver.GetAdmin(ctx)
	if err != nil {
		panic(err)
	}
	return &pb.GetAdminRpcResponse{
		Data: ret,
	}, nil
}

//func (receiver *AnnotationImpl) AuthFuncOverride(ctx context.Context, fullMethodName string) (context.Context, error) {
//
//}
