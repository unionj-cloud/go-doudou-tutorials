// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"testgorm/model"
)

func newCadCommonConfig(db *gorm.DB, opts ...gen.DOOption) cadCommonConfig {
	_cadCommonConfig := cadCommonConfig{}

	_cadCommonConfig.cadCommonConfigDo.UseDB(db, opts...)
	_cadCommonConfig.cadCommonConfigDo.UseModel(&model.CadCommonConfig{})

	tableName := _cadCommonConfig.cadCommonConfigDo.TableName()
	_cadCommonConfig.ALL = field.NewAsterisk(tableName)
	_cadCommonConfig.ID = field.NewString(tableName, "id")
	_cadCommonConfig.DelFlag = field.NewInt32(tableName, "del_flag")
	_cadCommonConfig.Name = field.NewString(tableName, "name")
	_cadCommonConfig.Code = field.NewString(tableName, "code")
	_cadCommonConfig.Value = field.NewString(tableName, "value")
	_cadCommonConfig.DefaultValue = field.NewString(tableName, "default_value")
	_cadCommonConfig.ConfigDesc = field.NewString(tableName, "config_desc")
	_cadCommonConfig.CreateTime = field.NewTime(tableName, "create_time")
	_cadCommonConfig.CreateBy = field.NewString(tableName, "create_by")
	_cadCommonConfig.UpdateTime = field.NewTime(tableName, "update_time")
	_cadCommonConfig.UpdateBy = field.NewString(tableName, "update_by")
	_cadCommonConfig.SysOrgCode = field.NewString(tableName, "sys_org_code")

	_cadCommonConfig.fillFieldMap()

	return _cadCommonConfig
}

type cadCommonConfig struct {
	cadCommonConfigDo cadCommonConfigDo

	ALL          field.Asterisk
	ID           field.String
	DelFlag      field.Int32
	Name         field.String
	Code         field.String
	Value        field.String
	DefaultValue field.String
	ConfigDesc   field.String
	CreateTime   field.Time
	CreateBy     field.String
	UpdateTime   field.Time
	UpdateBy     field.String
	SysOrgCode   field.String

	fieldMap map[string]field.Expr
}

func (c cadCommonConfig) Table(newTableName string) *cadCommonConfig {
	c.cadCommonConfigDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cadCommonConfig) As(alias string) *cadCommonConfig {
	c.cadCommonConfigDo.DO = *(c.cadCommonConfigDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cadCommonConfig) updateTableName(table string) *cadCommonConfig {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.DelFlag = field.NewInt32(table, "del_flag")
	c.Name = field.NewString(table, "name")
	c.Code = field.NewString(table, "code")
	c.Value = field.NewString(table, "value")
	c.DefaultValue = field.NewString(table, "default_value")
	c.ConfigDesc = field.NewString(table, "config_desc")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewString(table, "create_by")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.UpdateBy = field.NewString(table, "update_by")
	c.SysOrgCode = field.NewString(table, "sys_org_code")

	c.fillFieldMap()

	return c
}

func (c *cadCommonConfig) WithContext(ctx context.Context) ICadCommonConfigDo {
	return c.cadCommonConfigDo.WithContext(ctx)
}

func (c cadCommonConfig) TableName() string { return c.cadCommonConfigDo.TableName() }

func (c cadCommonConfig) Alias() string { return c.cadCommonConfigDo.Alias() }

func (c cadCommonConfig) Columns(cols ...field.Expr) gen.Columns {
	return c.cadCommonConfigDo.Columns(cols...)
}

func (c *cadCommonConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cadCommonConfig) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 12)
	c.fieldMap["id"] = c.ID
	c.fieldMap["del_flag"] = c.DelFlag
	c.fieldMap["name"] = c.Name
	c.fieldMap["code"] = c.Code
	c.fieldMap["value"] = c.Value
	c.fieldMap["default_value"] = c.DefaultValue
	c.fieldMap["config_desc"] = c.ConfigDesc
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["update_by"] = c.UpdateBy
	c.fieldMap["sys_org_code"] = c.SysOrgCode
}

func (c cadCommonConfig) clone(db *gorm.DB) cadCommonConfig {
	c.cadCommonConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cadCommonConfig) replaceDB(db *gorm.DB) cadCommonConfig {
	c.cadCommonConfigDo.ReplaceDB(db)
	return c
}

type cadCommonConfigDo struct{ gen.DO }

type ICadCommonConfigDo interface {
	gen.SubQuery
	Debug() ICadCommonConfigDo
	WithContext(ctx context.Context) ICadCommonConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICadCommonConfigDo
	WriteDB() ICadCommonConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICadCommonConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICadCommonConfigDo
	Not(conds ...gen.Condition) ICadCommonConfigDo
	Or(conds ...gen.Condition) ICadCommonConfigDo
	Select(conds ...field.Expr) ICadCommonConfigDo
	Where(conds ...gen.Condition) ICadCommonConfigDo
	Order(conds ...field.Expr) ICadCommonConfigDo
	Distinct(cols ...field.Expr) ICadCommonConfigDo
	Omit(cols ...field.Expr) ICadCommonConfigDo
	Join(table schema.Tabler, on ...field.Expr) ICadCommonConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonConfigDo
	Group(cols ...field.Expr) ICadCommonConfigDo
	Having(conds ...gen.Condition) ICadCommonConfigDo
	Limit(limit int) ICadCommonConfigDo
	Offset(offset int) ICadCommonConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonConfigDo
	Unscoped() ICadCommonConfigDo
	Create(values ...*model.CadCommonConfig) error
	CreateInBatches(values []*model.CadCommonConfig, batchSize int) error
	Save(values ...*model.CadCommonConfig) error
	First() (*model.CadCommonConfig, error)
	Take() (*model.CadCommonConfig, error)
	Last() (*model.CadCommonConfig, error)
	Find() ([]*model.CadCommonConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonConfig, err error)
	FindInBatches(result *[]*model.CadCommonConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CadCommonConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICadCommonConfigDo
	Assign(attrs ...field.AssignExpr) ICadCommonConfigDo
	Joins(fields ...field.RelationField) ICadCommonConfigDo
	Preload(fields ...field.RelationField) ICadCommonConfigDo
	FirstOrInit() (*model.CadCommonConfig, error)
	FirstOrCreate() (*model.CadCommonConfig, error)
	FindByPage(offset int, limit int) (result []*model.CadCommonConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICadCommonConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cadCommonConfigDo) Debug() ICadCommonConfigDo {
	return c.withDO(c.DO.Debug())
}

func (c cadCommonConfigDo) WithContext(ctx context.Context) ICadCommonConfigDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cadCommonConfigDo) ReadDB() ICadCommonConfigDo {
	return c.Clauses(dbresolver.Read)
}

func (c cadCommonConfigDo) WriteDB() ICadCommonConfigDo {
	return c.Clauses(dbresolver.Write)
}

func (c cadCommonConfigDo) Session(config *gorm.Session) ICadCommonConfigDo {
	return c.withDO(c.DO.Session(config))
}

func (c cadCommonConfigDo) Clauses(conds ...clause.Expression) ICadCommonConfigDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cadCommonConfigDo) Returning(value interface{}, columns ...string) ICadCommonConfigDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cadCommonConfigDo) Not(conds ...gen.Condition) ICadCommonConfigDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cadCommonConfigDo) Or(conds ...gen.Condition) ICadCommonConfigDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cadCommonConfigDo) Select(conds ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cadCommonConfigDo) Where(conds ...gen.Condition) ICadCommonConfigDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cadCommonConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICadCommonConfigDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cadCommonConfigDo) Order(conds ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cadCommonConfigDo) Distinct(cols ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cadCommonConfigDo) Omit(cols ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cadCommonConfigDo) Join(table schema.Tabler, on ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cadCommonConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cadCommonConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cadCommonConfigDo) Group(cols ...field.Expr) ICadCommonConfigDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cadCommonConfigDo) Having(conds ...gen.Condition) ICadCommonConfigDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cadCommonConfigDo) Limit(limit int) ICadCommonConfigDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cadCommonConfigDo) Offset(offset int) ICadCommonConfigDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cadCommonConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonConfigDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cadCommonConfigDo) Unscoped() ICadCommonConfigDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cadCommonConfigDo) Create(values ...*model.CadCommonConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cadCommonConfigDo) CreateInBatches(values []*model.CadCommonConfig, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cadCommonConfigDo) Save(values ...*model.CadCommonConfig) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cadCommonConfigDo) First() (*model.CadCommonConfig, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonConfig), nil
	}
}

func (c cadCommonConfigDo) Take() (*model.CadCommonConfig, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonConfig), nil
	}
}

func (c cadCommonConfigDo) Last() (*model.CadCommonConfig, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonConfig), nil
	}
}

func (c cadCommonConfigDo) Find() ([]*model.CadCommonConfig, error) {
	result, err := c.DO.Find()
	return result.([]*model.CadCommonConfig), err
}

func (c cadCommonConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonConfig, err error) {
	buf := make([]*model.CadCommonConfig, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cadCommonConfigDo) FindInBatches(result *[]*model.CadCommonConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cadCommonConfigDo) Attrs(attrs ...field.AssignExpr) ICadCommonConfigDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cadCommonConfigDo) Assign(attrs ...field.AssignExpr) ICadCommonConfigDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cadCommonConfigDo) Joins(fields ...field.RelationField) ICadCommonConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cadCommonConfigDo) Preload(fields ...field.RelationField) ICadCommonConfigDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cadCommonConfigDo) FirstOrInit() (*model.CadCommonConfig, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonConfig), nil
	}
}

func (c cadCommonConfigDo) FirstOrCreate() (*model.CadCommonConfig, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonConfig), nil
	}
}

func (c cadCommonConfigDo) FindByPage(offset int, limit int) (result []*model.CadCommonConfig, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cadCommonConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cadCommonConfigDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cadCommonConfigDo) Delete(models ...*model.CadCommonConfig) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cadCommonConfigDo) withDO(do gen.Dao) *cadCommonConfigDo {
	c.DO = *do.(*gen.DO)
	return c
}
