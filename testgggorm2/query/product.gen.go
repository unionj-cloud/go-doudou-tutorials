// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm2/model"
)

func newProduct(db *gorm.DB, opts ...gormgen.DOOption) product {
	_product := product{}

	_product.productDo.UseDB(db, opts...)
	_product.productDo.UseModel(&model.Product{})

	tableName := _product.productDo.TableName()
	_product.ALL = field.NewAsterisk(tableName)
	_product.ID = field.NewInt32(tableName, "id")
	_product.Title = field.NewString(tableName, "title")
	_product.SubTitle = field.NewString(tableName, "sub_title")
	_product.ProductSn = field.NewString(tableName, "product_sn")
	_product.CateID = field.NewInt32(tableName, "cate_id")
	_product.ClickCount = field.NewInt32(tableName, "click_count")
	_product.ProductNumber = field.NewInt32(tableName, "product_number")
	_product.Price = field.NewFloat64(tableName, "price")
	_product.MarketPrice = field.NewFloat64(tableName, "market_price")
	_product.RelationProduct = field.NewString(tableName, "relation_product")
	_product.ProductAttr = field.NewString(tableName, "product_attr")
	_product.ProductVersion = field.NewString(tableName, "product_version")
	_product.ProductImg = field.NewString(tableName, "product_img")
	_product.ProductGift = field.NewString(tableName, "product_gift")
	_product.ProductFitting = field.NewString(tableName, "product_fitting")
	_product.ProductColor = field.NewString(tableName, "product_color")
	_product.ProductKeywords = field.NewString(tableName, "product_keywords")
	_product.ProductDesc = field.NewString(tableName, "product_desc")
	_product.ProductContent = field.NewString(tableName, "product_content")
	_product.IsDelete = field.NewInt32(tableName, "is_delete")
	_product.IsHot = field.NewInt32(tableName, "is_hot")
	_product.IsBest = field.NewInt32(tableName, "is_best")
	_product.IsNew = field.NewInt32(tableName, "is_new")
	_product.ProductTypeID = field.NewInt32(tableName, "product_type_id")
	_product.Sort = field.NewInt32(tableName, "sort")
	_product.Status = field.NewInt32(tableName, "status")
	_product.AddTime = field.NewInt32(tableName, "add_time")

	_product.fillFieldMap()

	return _product
}

type product struct {
	productDo productDo

	ALL             field.Asterisk
	ID              field.Int32
	Title           field.String // 标题
	SubTitle        field.String // 子标题
	ProductSn       field.String
	CateID          field.Int32   // 分类id
	ClickCount      field.Int32   // 点击数
	ProductNumber   field.Int32   // 商品编号
	Price           field.Float64 // 价格
	MarketPrice     field.Float64 // 市场价格
	RelationProduct field.String  // 关联商品
	ProductAttr     field.String  // 商品属性
	ProductVersion  field.String  // 商品版本
	ProductImg      field.String  // 商品图片
	ProductGift     field.String
	ProductFitting  field.String
	ProductColor    field.String // 商品颜色
	ProductKeywords field.String // 关键词
	ProductDesc     field.String // 描述
	ProductContent  field.String // 内容
	IsDelete        field.Int32  // 是否删除
	IsHot           field.Int32  // 是否热门
	IsBest          field.Int32  // 是否畅销
	IsNew           field.Int32  // 是否新品
	ProductTypeID   field.Int32  // 商品类型编号
	Sort            field.Int32  // 商品分类
	Status          field.Int32  // 商品状态
	AddTime         field.Int32  // 添加时间

	fieldMap map[string]field.Expr
}

func (p product) Table(newTableName string) *product {
	p.productDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p product) As(alias string) *product {
	p.productDo.DO = *(p.productDo.As(alias).(*gormgen.DO))
	return p.updateTableName(alias)
}

func (p *product) updateTableName(table string) *product {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Title = field.NewString(table, "title")
	p.SubTitle = field.NewString(table, "sub_title")
	p.ProductSn = field.NewString(table, "product_sn")
	p.CateID = field.NewInt32(table, "cate_id")
	p.ClickCount = field.NewInt32(table, "click_count")
	p.ProductNumber = field.NewInt32(table, "product_number")
	p.Price = field.NewFloat64(table, "price")
	p.MarketPrice = field.NewFloat64(table, "market_price")
	p.RelationProduct = field.NewString(table, "relation_product")
	p.ProductAttr = field.NewString(table, "product_attr")
	p.ProductVersion = field.NewString(table, "product_version")
	p.ProductImg = field.NewString(table, "product_img")
	p.ProductGift = field.NewString(table, "product_gift")
	p.ProductFitting = field.NewString(table, "product_fitting")
	p.ProductColor = field.NewString(table, "product_color")
	p.ProductKeywords = field.NewString(table, "product_keywords")
	p.ProductDesc = field.NewString(table, "product_desc")
	p.ProductContent = field.NewString(table, "product_content")
	p.IsDelete = field.NewInt32(table, "is_delete")
	p.IsHot = field.NewInt32(table, "is_hot")
	p.IsBest = field.NewInt32(table, "is_best")
	p.IsNew = field.NewInt32(table, "is_new")
	p.ProductTypeID = field.NewInt32(table, "product_type_id")
	p.Sort = field.NewInt32(table, "sort")
	p.Status = field.NewInt32(table, "status")
	p.AddTime = field.NewInt32(table, "add_time")

	p.fillFieldMap()

	return p
}

func (p *product) WithContext(ctx context.Context) IProductDo { return p.productDo.WithContext(ctx) }

func (p product) TableName() string { return p.productDo.TableName() }

func (p product) Alias() string { return p.productDo.Alias() }

func (p product) Columns(cols ...field.Expr) gormgen.Columns { return p.productDo.Columns(cols...) }

func (p *product) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *product) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 27)
	p.fieldMap["id"] = p.ID
	p.fieldMap["title"] = p.Title
	p.fieldMap["sub_title"] = p.SubTitle
	p.fieldMap["product_sn"] = p.ProductSn
	p.fieldMap["cate_id"] = p.CateID
	p.fieldMap["click_count"] = p.ClickCount
	p.fieldMap["product_number"] = p.ProductNumber
	p.fieldMap["price"] = p.Price
	p.fieldMap["market_price"] = p.MarketPrice
	p.fieldMap["relation_product"] = p.RelationProduct
	p.fieldMap["product_attr"] = p.ProductAttr
	p.fieldMap["product_version"] = p.ProductVersion
	p.fieldMap["product_img"] = p.ProductImg
	p.fieldMap["product_gift"] = p.ProductGift
	p.fieldMap["product_fitting"] = p.ProductFitting
	p.fieldMap["product_color"] = p.ProductColor
	p.fieldMap["product_keywords"] = p.ProductKeywords
	p.fieldMap["product_desc"] = p.ProductDesc
	p.fieldMap["product_content"] = p.ProductContent
	p.fieldMap["is_delete"] = p.IsDelete
	p.fieldMap["is_hot"] = p.IsHot
	p.fieldMap["is_best"] = p.IsBest
	p.fieldMap["is_new"] = p.IsNew
	p.fieldMap["product_type_id"] = p.ProductTypeID
	p.fieldMap["sort"] = p.Sort
	p.fieldMap["status"] = p.Status
	p.fieldMap["add_time"] = p.AddTime
}

func (p product) clone(db *gorm.DB) product {
	p.productDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p product) replaceDB(db *gorm.DB) product {
	p.productDo.ReplaceDB(db)
	return p
}

type productDo struct{ gormgen.DO }

type IProductDo interface {
	gormgen.SubQuery
	Debug() IProductDo
	WithContext(ctx context.Context) IProductDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProductDo
	WriteDB() IProductDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) IProductDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) IProductDo
	Not(conds ...gormgen.Condition) IProductDo
	Or(conds ...gormgen.Condition) IProductDo
	Select(conds ...field.Expr) IProductDo
	Where(conds ...gormgen.Condition) IProductDo
	Order(conds ...field.Expr) IProductDo
	Distinct(cols ...field.Expr) IProductDo
	Omit(cols ...field.Expr) IProductDo
	Join(table schema.Tabler, on ...field.Expr) IProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProductDo
	Group(cols ...field.Expr) IProductDo
	Having(conds ...gormgen.Condition) IProductDo
	Limit(limit int) IProductDo
	Offset(offset int) IProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IProductDo
	Unscoped() IProductDo
	Create(values ...*model.Product) error
	CreateInBatches(values []*model.Product, batchSize int) error
	Save(values ...*model.Product) error
	First() (*model.Product, error)
	Take() (*model.Product, error)
	Last() (*model.Product, error)
	Find() ([]*model.Product, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Product, err error)
	FindInBatches(result *[]*model.Product, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Product) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) IProductDo
	Assign(attrs ...field.AssignExpr) IProductDo
	Joins(fields ...field.RelationField) IProductDo
	Preload(fields ...field.RelationField) IProductDo
	FirstOrInit() (*model.Product, error)
	FirstOrCreate() (*model.Product, error)
	FindByPage(offset int, limit int) (result []*model.Product, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p productDo) Debug() IProductDo {
	return p.withDO(p.DO.Debug())
}

func (p productDo) WithContext(ctx context.Context) IProductDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p productDo) ReadDB() IProductDo {
	return p.Clauses(dbresolver.Read)
}

func (p productDo) WriteDB() IProductDo {
	return p.Clauses(dbresolver.Write)
}

func (p productDo) Session(config *gorm.Session) IProductDo {
	return p.withDO(p.DO.Session(config))
}

func (p productDo) Clauses(conds ...clause.Expression) IProductDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p productDo) Returning(value interface{}, columns ...string) IProductDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p productDo) Not(conds ...gormgen.Condition) IProductDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p productDo) Or(conds ...gormgen.Condition) IProductDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p productDo) Select(conds ...field.Expr) IProductDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p productDo) Where(conds ...gormgen.Condition) IProductDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p productDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProductDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p productDo) Order(conds ...field.Expr) IProductDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p productDo) Distinct(cols ...field.Expr) IProductDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p productDo) Omit(cols ...field.Expr) IProductDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p productDo) Join(table schema.Tabler, on ...field.Expr) IProductDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p productDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProductDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p productDo) RightJoin(table schema.Tabler, on ...field.Expr) IProductDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p productDo) Group(cols ...field.Expr) IProductDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p productDo) Having(conds ...gormgen.Condition) IProductDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p productDo) Limit(limit int) IProductDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p productDo) Offset(offset int) IProductDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p productDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) IProductDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p productDo) Unscoped() IProductDo {
	return p.withDO(p.DO.Unscoped())
}

func (p productDo) Create(values ...*model.Product) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p productDo) CreateInBatches(values []*model.Product, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p productDo) Save(values ...*model.Product) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p productDo) First() (*model.Product, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) Take() (*model.Product, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) Last() (*model.Product, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) Find() ([]*model.Product, error) {
	result, err := p.DO.Find()
	return result.([]*model.Product), err
}

func (p productDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.Product, err error) {
	buf := make([]*model.Product, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p productDo) FindInBatches(result *[]*model.Product, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p productDo) Attrs(attrs ...field.AssignExpr) IProductDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p productDo) Assign(attrs ...field.AssignExpr) IProductDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p productDo) Joins(fields ...field.RelationField) IProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p productDo) Preload(fields ...field.RelationField) IProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p productDo) FirstOrInit() (*model.Product, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) FirstOrCreate() (*model.Product, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Product), nil
	}
}

func (p productDo) FindByPage(offset int, limit int) (result []*model.Product, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p productDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p productDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p productDo) Delete(models ...*model.Product) (result gormgen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *productDo) withDO(do gormgen.Dao) *productDo {
	p.DO = *do.(*gormgen.DO)
	return p
}
