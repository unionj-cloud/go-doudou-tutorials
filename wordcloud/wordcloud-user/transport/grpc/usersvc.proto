/**
* Generated by go-doudou v2.0.1.
* Don't edit!
*
* Version No.: v20221122
*/
syntax = "proto3";

package usersvc;
option go_package = "github.com/unionj-cloud/go-doudou-tutorials/wordcloud/wordcloud-user/transport/grpc";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";


message GetLogoutRpcResponse {
  // 成功返回OK
// return OK if success
  string data = 1 [json_name="data"];
}

message GetTokenValidateRpcRequest {
  string token = 1 [json_name="token"];
}

message GetUserRpcRequest {
  // 用户ID
// user id
  int32 userId = 1 [json_name="userId"];
}

message LogInRpcRequest {
  // 用户名
// username
  string username = 1 [json_name="username"];
  // 密码
// password
  string password = 2 [json_name="password"];
}

message LogInRpcResponse {
  // token
  string data = 1 [json_name="data"];
}

message Order {
  string col = 1 [json_name="col"];
  string sort = 2 [json_name="sort"];
}

message Page {
  // 排序规则
  repeated Order orders = 1 [json_name="orders"];
  // 页码
  int32 pageNo = 2 [json_name="pageNo"];
  // 每页行数
  int32 size = 3 [json_name="size"];
}

message PageFilter {
  // 真实姓名，前缀匹配
  string name = 1 [json_name="name"];
  // 所属部门
  string dept = 2 [json_name="dept"];
}

// 分页筛选条件
message PageQuery {
  PageFilter filter = 1 [json_name="filter"];
  Page page = 2 [json_name="page"];
}

message PageRet {
  google.protobuf.Any items = 1 [json_name="items"];
  int32 pageNo = 2 [json_name="pageNo"];
  int32 pageSize = 3 [json_name="pageSize"];
  int32 total = 4 [json_name="total"];
  bool hasNext = 5 [json_name="hasNext"];
}

message SignUpRpcRequest {
  // 用户名
// username
  string username = 1 [json_name="username"];
  // 密码
// password
  string password = 2 [json_name="password"];
}

message SignUpRpcResponse {
  // 成功返回用户ID
// return user ID if success
  int32 data = 1 [json_name="data"];
}

message UserVo {
  int32 id = 1 [json_name="id"];
  string username = 2 [json_name="username"];
  string name = 3 [json_name="name"];
  string phone = 4 [json_name="phone"];
  string dept = 5 [json_name="dept"];
}

service UsersvcService {
  // GetUser 用户详情接口
// 展示如何定义带查询字符串参数的GET请求接口
// GetUser is user detail api
// demo how to define get http request with query string parameters
// @role(USER)
  rpc GetUserRpc(GetUserRpcRequest) returns (UserVo);
  // GetMe 获取当前登录用户详情接口
// GetMe is used for getting user info from token in header.
// @role(USER)
  rpc GetMeRpc(google.protobuf.Empty) returns (UserVo);
  // PublicSignUp 用户注册接口
// 展示如何定义POST请求且Content-Type是application/x-www-form-urlencoded的接口
// PublicSignUp is user signup api
// demo how to define post request api which accepts application/x-www-form-urlencoded content-type
  rpc SignUpRpc(SignUpRpcRequest) returns (SignUpRpcResponse);
  // PublicLogIn 用户登录接口
// 展示如何鉴权并返回token
// PublicLogIn is user login api
// demo how to do authentication and issue token
  rpc LogInRpc(LogInRpcRequest) returns (LogInRpcResponse);
  // GetLogout 注销token
// GetLogout is used for revoking a token
// https://github.com/dgrijalva/jwt-go/issues/214
// @role(USER)
  rpc GetLogoutRpc(google.protobuf.Empty) returns (GetLogoutRpcResponse);
  // PublicTokenValidate token校验接口
// 如果token有效，返回用户信息，否则返回空对象
// PublicTokenValidate validates token string
// if token is valid, return user information, otherwise, return empty data
  rpc GetTokenValidateRpc(GetTokenValidateRpcRequest) returns (UserVo);
}
