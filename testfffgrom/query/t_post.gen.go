// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testfffgrom/model"
)

func newTPost(db *gorm.DB, opts ...gormgen.DOOption) tPost {
	_tPost := tPost{}

	_tPost.tPostDo.UseDB(db, opts...)
	_tPost.tPostDo.UseModel(&model.TPost{})

	tableName := _tPost.tPostDo.TableName()
	_tPost.ALL = field.NewAsterisk(tableName)
	_tPost.ID = field.NewInt32(tableName, "id")
	_tPost.Title = field.NewString(tableName, "title")
	_tPost.DeleteAt = field.NewTime(tableName, "delete_at")

	_tPost.fillFieldMap()

	return _tPost
}

type tPost struct {
	tPostDo tPostDo

	ALL      field.Asterisk
	ID       field.Int32
	Title    field.String
	DeleteAt field.Time

	fieldMap map[string]field.Expr
}

func (t tPost) Table(newTableName string) *tPost {
	t.tPostDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPost) As(alias string) *tPost {
	t.tPostDo.DO = *(t.tPostDo.As(alias).(*gormgen.DO))
	return t.updateTableName(alias)
}

func (t *tPost) updateTableName(table string) *tPost {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Title = field.NewString(table, "title")
	t.DeleteAt = field.NewTime(table, "delete_at")

	t.fillFieldMap()

	return t
}

func (t *tPost) WithContext(ctx context.Context) ITPostDo { return t.tPostDo.WithContext(ctx) }

func (t tPost) TableName() string { return t.tPostDo.TableName() }

func (t tPost) Alias() string { return t.tPostDo.Alias() }

func (t tPost) Columns(cols ...field.Expr) gormgen.Columns { return t.tPostDo.Columns(cols...) }

func (t *tPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPost) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.ID
	t.fieldMap["title"] = t.Title
	t.fieldMap["delete_at"] = t.DeleteAt
}

func (t tPost) clone(db *gorm.DB) tPost {
	t.tPostDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tPost) replaceDB(db *gorm.DB) tPost {
	t.tPostDo.ReplaceDB(db)
	return t
}

type tPostDo struct{ gormgen.DO }

type ITPostDo interface {
	gormgen.SubQuery
	Debug() ITPostDo
	WithContext(ctx context.Context) ITPostDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITPostDo
	WriteDB() ITPostDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) ITPostDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) ITPostDo
	Not(conds ...gormgen.Condition) ITPostDo
	Or(conds ...gormgen.Condition) ITPostDo
	Select(conds ...field.Expr) ITPostDo
	Where(conds ...gormgen.Condition) ITPostDo
	Order(conds ...field.Expr) ITPostDo
	Distinct(cols ...field.Expr) ITPostDo
	Omit(cols ...field.Expr) ITPostDo
	Join(table schema.Tabler, on ...field.Expr) ITPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPostDo
	Group(cols ...field.Expr) ITPostDo
	Having(conds ...gormgen.Condition) ITPostDo
	Limit(limit int) ITPostDo
	Offset(offset int) ITPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITPostDo
	Unscoped() ITPostDo
	Create(values ...*model.TPost) error
	CreateInBatches(values []*model.TPost, batchSize int) error
	Save(values ...*model.TPost) error
	First() (*model.TPost, error)
	Take() (*model.TPost, error)
	Last() (*model.TPost, error)
	Find() ([]*model.TPost, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TPost, err error)
	FindInBatches(result *[]*model.TPost, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TPost) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) ITPostDo
	Assign(attrs ...field.AssignExpr) ITPostDo
	Joins(fields ...field.RelationField) ITPostDo
	Preload(fields ...field.RelationField) ITPostDo
	FirstOrInit() (*model.TPost, error)
	FirstOrCreate() (*model.TPost, error)
	FindByPage(offset int, limit int) (result []*model.TPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPostDo) Debug() ITPostDo {
	return t.withDO(t.DO.Debug())
}

func (t tPostDo) WithContext(ctx context.Context) ITPostDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPostDo) ReadDB() ITPostDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPostDo) WriteDB() ITPostDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPostDo) Session(config *gorm.Session) ITPostDo {
	return t.withDO(t.DO.Session(config))
}

func (t tPostDo) Clauses(conds ...clause.Expression) ITPostDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPostDo) Returning(value interface{}, columns ...string) ITPostDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPostDo) Not(conds ...gormgen.Condition) ITPostDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPostDo) Or(conds ...gormgen.Condition) ITPostDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPostDo) Select(conds ...field.Expr) ITPostDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPostDo) Where(conds ...gormgen.Condition) ITPostDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPostDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITPostDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPostDo) Order(conds ...field.Expr) ITPostDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPostDo) Distinct(cols ...field.Expr) ITPostDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPostDo) Omit(cols ...field.Expr) ITPostDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPostDo) Join(table schema.Tabler, on ...field.Expr) ITPostDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPostDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPostDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPostDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPostDo) Group(cols ...field.Expr) ITPostDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPostDo) Having(conds ...gormgen.Condition) ITPostDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPostDo) Limit(limit int) ITPostDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPostDo) Offset(offset int) ITPostDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPostDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITPostDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPostDo) Unscoped() ITPostDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPostDo) Create(values ...*model.TPost) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPostDo) CreateInBatches(values []*model.TPost, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPostDo) Save(values ...*model.TPost) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPostDo) First() (*model.TPost, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPost), nil
	}
}

func (t tPostDo) Take() (*model.TPost, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPost), nil
	}
}

func (t tPostDo) Last() (*model.TPost, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPost), nil
	}
}

func (t tPostDo) Find() ([]*model.TPost, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPost), err
}

func (t tPostDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TPost, err error) {
	buf := make([]*model.TPost, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPostDo) FindInBatches(result *[]*model.TPost, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPostDo) Attrs(attrs ...field.AssignExpr) ITPostDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPostDo) Assign(attrs ...field.AssignExpr) ITPostDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPostDo) Joins(fields ...field.RelationField) ITPostDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPostDo) Preload(fields ...field.RelationField) ITPostDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPostDo) FirstOrInit() (*model.TPost, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPost), nil
	}
}

func (t tPostDo) FirstOrCreate() (*model.TPost, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPost), nil
	}
}

func (t tPostDo) FindByPage(offset int, limit int) (result []*model.TPost, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPostDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPostDo) Delete(models ...*model.TPost) (result gormgen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPostDo) withDO(do gormgen.Dao) *tPostDo {
	t.DO = *do.(*gormgen.DO)
	return t
}
