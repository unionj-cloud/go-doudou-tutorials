// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"testgorm/model"
)

func newCadCommonFollow(db *gorm.DB, opts ...gen.DOOption) cadCommonFollow {
	_cadCommonFollow := cadCommonFollow{}

	_cadCommonFollow.cadCommonFollowDo.UseDB(db, opts...)
	_cadCommonFollow.cadCommonFollowDo.UseModel(&model.CadCommonFollow{})

	tableName := _cadCommonFollow.cadCommonFollowDo.TableName()
	_cadCommonFollow.ALL = field.NewAsterisk(tableName)
	_cadCommonFollow.ID = field.NewString(tableName, "id")
	_cadCommonFollow.RelateBusinessTable = field.NewString(tableName, "relate_business_table")
	_cadCommonFollow.RelateBusinessID = field.NewString(tableName, "relate_business_id")
	_cadCommonFollow.CreateTime = field.NewTime(tableName, "create_time")
	_cadCommonFollow.CreateBy = field.NewString(tableName, "create_by")
	_cadCommonFollow.SysOrgCode = field.NewString(tableName, "sys_org_code")

	_cadCommonFollow.fillFieldMap()

	return _cadCommonFollow
}

type cadCommonFollow struct {
	cadCommonFollowDo cadCommonFollowDo

	ALL                 field.Asterisk
	ID                  field.String
	RelateBusinessTable field.String
	RelateBusinessID    field.String
	CreateTime          field.Time
	CreateBy            field.String
	SysOrgCode          field.String

	fieldMap map[string]field.Expr
}

func (c cadCommonFollow) Table(newTableName string) *cadCommonFollow {
	c.cadCommonFollowDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cadCommonFollow) As(alias string) *cadCommonFollow {
	c.cadCommonFollowDo.DO = *(c.cadCommonFollowDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cadCommonFollow) updateTableName(table string) *cadCommonFollow {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.RelateBusinessTable = field.NewString(table, "relate_business_table")
	c.RelateBusinessID = field.NewString(table, "relate_business_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewString(table, "create_by")
	c.SysOrgCode = field.NewString(table, "sys_org_code")

	c.fillFieldMap()

	return c
}

func (c *cadCommonFollow) WithContext(ctx context.Context) ICadCommonFollowDo {
	return c.cadCommonFollowDo.WithContext(ctx)
}

func (c cadCommonFollow) TableName() string { return c.cadCommonFollowDo.TableName() }

func (c cadCommonFollow) Alias() string { return c.cadCommonFollowDo.Alias() }

func (c cadCommonFollow) Columns(cols ...field.Expr) gen.Columns {
	return c.cadCommonFollowDo.Columns(cols...)
}

func (c *cadCommonFollow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cadCommonFollow) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["relate_business_table"] = c.RelateBusinessTable
	c.fieldMap["relate_business_id"] = c.RelateBusinessID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["sys_org_code"] = c.SysOrgCode
}

func (c cadCommonFollow) clone(db *gorm.DB) cadCommonFollow {
	c.cadCommonFollowDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cadCommonFollow) replaceDB(db *gorm.DB) cadCommonFollow {
	c.cadCommonFollowDo.ReplaceDB(db)
	return c
}

type cadCommonFollowDo struct{ gen.DO }

type ICadCommonFollowDo interface {
	gen.SubQuery
	Debug() ICadCommonFollowDo
	WithContext(ctx context.Context) ICadCommonFollowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICadCommonFollowDo
	WriteDB() ICadCommonFollowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICadCommonFollowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICadCommonFollowDo
	Not(conds ...gen.Condition) ICadCommonFollowDo
	Or(conds ...gen.Condition) ICadCommonFollowDo
	Select(conds ...field.Expr) ICadCommonFollowDo
	Where(conds ...gen.Condition) ICadCommonFollowDo
	Order(conds ...field.Expr) ICadCommonFollowDo
	Distinct(cols ...field.Expr) ICadCommonFollowDo
	Omit(cols ...field.Expr) ICadCommonFollowDo
	Join(table schema.Tabler, on ...field.Expr) ICadCommonFollowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonFollowDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonFollowDo
	Group(cols ...field.Expr) ICadCommonFollowDo
	Having(conds ...gen.Condition) ICadCommonFollowDo
	Limit(limit int) ICadCommonFollowDo
	Offset(offset int) ICadCommonFollowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonFollowDo
	Unscoped() ICadCommonFollowDo
	Create(values ...*model.CadCommonFollow) error
	CreateInBatches(values []*model.CadCommonFollow, batchSize int) error
	Save(values ...*model.CadCommonFollow) error
	First() (*model.CadCommonFollow, error)
	Take() (*model.CadCommonFollow, error)
	Last() (*model.CadCommonFollow, error)
	Find() ([]*model.CadCommonFollow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonFollow, err error)
	FindInBatches(result *[]*model.CadCommonFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CadCommonFollow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICadCommonFollowDo
	Assign(attrs ...field.AssignExpr) ICadCommonFollowDo
	Joins(fields ...field.RelationField) ICadCommonFollowDo
	Preload(fields ...field.RelationField) ICadCommonFollowDo
	FirstOrInit() (*model.CadCommonFollow, error)
	FirstOrCreate() (*model.CadCommonFollow, error)
	FindByPage(offset int, limit int) (result []*model.CadCommonFollow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICadCommonFollowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cadCommonFollowDo) Debug() ICadCommonFollowDo {
	return c.withDO(c.DO.Debug())
}

func (c cadCommonFollowDo) WithContext(ctx context.Context) ICadCommonFollowDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cadCommonFollowDo) ReadDB() ICadCommonFollowDo {
	return c.Clauses(dbresolver.Read)
}

func (c cadCommonFollowDo) WriteDB() ICadCommonFollowDo {
	return c.Clauses(dbresolver.Write)
}

func (c cadCommonFollowDo) Session(config *gorm.Session) ICadCommonFollowDo {
	return c.withDO(c.DO.Session(config))
}

func (c cadCommonFollowDo) Clauses(conds ...clause.Expression) ICadCommonFollowDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cadCommonFollowDo) Returning(value interface{}, columns ...string) ICadCommonFollowDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cadCommonFollowDo) Not(conds ...gen.Condition) ICadCommonFollowDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cadCommonFollowDo) Or(conds ...gen.Condition) ICadCommonFollowDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cadCommonFollowDo) Select(conds ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cadCommonFollowDo) Where(conds ...gen.Condition) ICadCommonFollowDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cadCommonFollowDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICadCommonFollowDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cadCommonFollowDo) Order(conds ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cadCommonFollowDo) Distinct(cols ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cadCommonFollowDo) Omit(cols ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cadCommonFollowDo) Join(table schema.Tabler, on ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cadCommonFollowDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cadCommonFollowDo) RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cadCommonFollowDo) Group(cols ...field.Expr) ICadCommonFollowDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cadCommonFollowDo) Having(conds ...gen.Condition) ICadCommonFollowDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cadCommonFollowDo) Limit(limit int) ICadCommonFollowDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cadCommonFollowDo) Offset(offset int) ICadCommonFollowDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cadCommonFollowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonFollowDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cadCommonFollowDo) Unscoped() ICadCommonFollowDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cadCommonFollowDo) Create(values ...*model.CadCommonFollow) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cadCommonFollowDo) CreateInBatches(values []*model.CadCommonFollow, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cadCommonFollowDo) Save(values ...*model.CadCommonFollow) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cadCommonFollowDo) First() (*model.CadCommonFollow, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFollow), nil
	}
}

func (c cadCommonFollowDo) Take() (*model.CadCommonFollow, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFollow), nil
	}
}

func (c cadCommonFollowDo) Last() (*model.CadCommonFollow, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFollow), nil
	}
}

func (c cadCommonFollowDo) Find() ([]*model.CadCommonFollow, error) {
	result, err := c.DO.Find()
	return result.([]*model.CadCommonFollow), err
}

func (c cadCommonFollowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonFollow, err error) {
	buf := make([]*model.CadCommonFollow, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cadCommonFollowDo) FindInBatches(result *[]*model.CadCommonFollow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cadCommonFollowDo) Attrs(attrs ...field.AssignExpr) ICadCommonFollowDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cadCommonFollowDo) Assign(attrs ...field.AssignExpr) ICadCommonFollowDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cadCommonFollowDo) Joins(fields ...field.RelationField) ICadCommonFollowDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cadCommonFollowDo) Preload(fields ...field.RelationField) ICadCommonFollowDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cadCommonFollowDo) FirstOrInit() (*model.CadCommonFollow, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFollow), nil
	}
}

func (c cadCommonFollowDo) FirstOrCreate() (*model.CadCommonFollow, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonFollow), nil
	}
}

func (c cadCommonFollowDo) FindByPage(offset int, limit int) (result []*model.CadCommonFollow, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cadCommonFollowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cadCommonFollowDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cadCommonFollowDo) Delete(models ...*model.CadCommonFollow) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cadCommonFollowDo) withDO(do gen.Dao) *cadCommonFollowDo {
	c.DO = *do.(*gen.DO)
	return c
}
