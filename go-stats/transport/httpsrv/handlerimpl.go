/**
* Generated by go-doudou v2.0.3.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	service "go-doudou-tutorials/go-stats"
	"go-doudou-tutorials/go-stats/vo"
	"net/http"

	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest/httprouter"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/cast"
)

type GoStatsHandlerImpl struct {
	goStats service.GoStats
}

func (receiver *GoStatsHandlerImpl) LargestRemainder(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx     context.Context
		payload vo.PercentageReqVo
		data    []vo.PercentageRespVo
		err     error
	)
	ctx = _req.Context()
	if _req.Body == nil {
		http.Error(_writer, "missing request body", http.StatusBadRequest)
		return
	} else {
		if _err := json.NewDecoder(_req.Body).Decode(&payload); _err != nil {
			http.Error(_writer, _err.Error(), http.StatusBadRequest)
			return
		} else {
			if _err := rest.ValidateStruct(payload); _err != nil {
				http.Error(_writer, _err.Error(), http.StatusBadRequest)
				return
			}
		}
	}
	data, err = receiver.goStats.LargestRemainder(
		ctx,
		payload,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data []vo.PercentageRespVo `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}
func (receiver *GoStatsHandlerImpl) GetShelves_ShelfBooks_Book(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx   context.Context
		shelf int
		book  string
		data  string
		err   error
	)
	paramsFromCtx := httprouter.ParamsFromContext(_req.Context())
	ctx = _req.Context()
	if casted, _err := cast.ToIntE(paramsFromCtx.ByName("shelf")); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	} else {
		shelf = casted
	}
	if _err := rest.ValidateVar(shelf, "", "shelf"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	book = paramsFromCtx.ByName("book")
	if _err := rest.ValidateVar(book, "", "book"); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusBadRequest)
		return
	}
	data, err = receiver.goStats.GetShelves_ShelfBooks_Book(
		ctx,
		shelf,
		book,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data string `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}

func NewGoStatsHandler(goStats service.GoStats) GoStatsHandler {
	return &GoStatsHandlerImpl{
		goStats,
	}
}
