/**
* Generated by go-doudou v2.0.8.
* You can edit it as your need.
 */
package client

import (
	"context"
	"testgorm/dto"
	"time"

	"github.com/go-resty/resty/v2"
	"github.com/pkg/errors"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/rs/zerolog"
	"github.com/slok/goresilience"
	"github.com/slok/goresilience/circuitbreaker"
	rerrors "github.com/slok/goresilience/errors"
	"github.com/slok/goresilience/metrics"
	"github.com/slok/goresilience/retry"
	"github.com/slok/goresilience/timeout"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/zlogger"
)

type TestgormClientProxy struct {
	client *TestgormClient
	logger zerolog.Logger
	runner goresilience.Runner
}

func (receiver *TestgormClientProxy) PostCadCommonComment(ctx context.Context, _headers map[string]string, body dto.CadCommonComment, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostCadCommonComment(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostCadCommonComment fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostCadCommonComment fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonComment_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.CadCommonComment, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonComment_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonComment_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonComment_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutCadCommonComment(ctx context.Context, _headers map[string]string, body dto.CadCommonComment, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutCadCommonComment(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutCadCommonComment fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutCadCommonComment fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteCadCommonComment_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteCadCommonComment_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteCadCommonComment_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteCadCommonComment_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonComments(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonComments(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonComments fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonComments fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostCadCommonLike(ctx context.Context, _headers map[string]string, body dto.CadCommonLike, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostCadCommonLike(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostCadCommonLike fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostCadCommonLike fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonLike_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.CadCommonLike, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonLike_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonLike_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonLike_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutCadCommonLike(ctx context.Context, _headers map[string]string, body dto.CadCommonLike, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutCadCommonLike(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutCadCommonLike fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutCadCommonLike fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteCadCommonLike_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteCadCommonLike_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteCadCommonLike_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteCadCommonLike_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonLikes(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonLikes(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonLikes fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonLikes fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostQrtzJobDetail(ctx context.Context, _headers map[string]string, body dto.QrtzJobDetail, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostQrtzJobDetail(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostQrtzJobDetail fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostQrtzJobDetail fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzJobDetail_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.QrtzJobDetail, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzJobDetail_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzJobDetail_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzJobDetail_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutQrtzJobDetail(ctx context.Context, _headers map[string]string, body dto.QrtzJobDetail, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutQrtzJobDetail(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutQrtzJobDetail fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutQrtzJobDetail fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteQrtzJobDetail_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteQrtzJobDetail_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteQrtzJobDetail_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteQrtzJobDetail_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzJobDetails(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzJobDetails(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzJobDetails fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzJobDetails fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostTInvalidToken(ctx context.Context, _headers map[string]string, body dto.TInvalidToken, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTInvalidToken(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTInvalidToken fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTInvalidToken fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTInvalidToken_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TInvalidToken, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTInvalidToken_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTInvalidToken_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTInvalidToken_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutTInvalidToken(ctx context.Context, _headers map[string]string, body dto.TInvalidToken, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTInvalidToken(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTInvalidToken fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTInvalidToken fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteTInvalidToken_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTInvalidToken_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTInvalidToken_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTInvalidToken_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTInvalidTokens(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTInvalidTokens(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTInvalidTokens fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTInvalidTokens fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostCadCommonConfig(ctx context.Context, _headers map[string]string, body dto.CadCommonConfig, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostCadCommonConfig(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostCadCommonConfig fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostCadCommonConfig fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonConfig_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.CadCommonConfig, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonConfig_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonConfig_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonConfig_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutCadCommonConfig(ctx context.Context, _headers map[string]string, body dto.CadCommonConfig, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutCadCommonConfig(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutCadCommonConfig fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutCadCommonConfig fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteCadCommonConfig_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteCadCommonConfig_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteCadCommonConfig_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteCadCommonConfig_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonConfigs(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonConfigs(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonConfigs fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonConfigs fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostQrtzBlobTrigger(ctx context.Context, _headers map[string]string, body dto.QrtzBlobTrigger, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostQrtzBlobTrigger(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostQrtzBlobTrigger fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostQrtzBlobTrigger fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzBlobTrigger_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.QrtzBlobTrigger, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzBlobTrigger_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzBlobTrigger_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzBlobTrigger_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutQrtzBlobTrigger(ctx context.Context, _headers map[string]string, body dto.QrtzBlobTrigger, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutQrtzBlobTrigger(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutQrtzBlobTrigger fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutQrtzBlobTrigger fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteQrtzBlobTrigger_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteQrtzBlobTrigger_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteQrtzBlobTrigger_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteQrtzBlobTrigger_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzBlobTriggers(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzBlobTriggers(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzBlobTriggers fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzBlobTriggers fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostQrtzCalendar(ctx context.Context, _headers map[string]string, body dto.QrtzCalendar, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostQrtzCalendar(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostQrtzCalendar fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostQrtzCalendar fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzCalendar_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.QrtzCalendar, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzCalendar_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzCalendar_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzCalendar_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutQrtzCalendar(ctx context.Context, _headers map[string]string, body dto.QrtzCalendar, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutQrtzCalendar(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutQrtzCalendar fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutQrtzCalendar fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteQrtzCalendar_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteQrtzCalendar_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteQrtzCalendar_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteQrtzCalendar_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzCalendars(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzCalendars(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzCalendars fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzCalendars fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostTUser(ctx context.Context, _headers map[string]string, body dto.TUser, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTUser(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTUser fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTUser fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TUser, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTUser_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTUser_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTUser_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutTUser(ctx context.Context, _headers map[string]string, body dto.TUser, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTUser(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTUser fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTUser fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTUser_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTUser_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTUser_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTUsers(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTUsers(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTUsers fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTUsers fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostTWordCloudTask(ctx context.Context, _headers map[string]string, body dto.TWordCloudTask, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTWordCloudTask(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTWordCloudTask fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTWordCloudTask fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTWordCloudTask_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TWordCloudTask, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTWordCloudTask_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTWordCloudTask_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTWordCloudTask_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutTWordCloudTask(ctx context.Context, _headers map[string]string, body dto.TWordCloudTask, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTWordCloudTask(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTWordCloudTask fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTWordCloudTask fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteTWordCloudTask_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTWordCloudTask_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTWordCloudTask_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTWordCloudTask_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTWordCloudTasks(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTWordCloudTasks(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTWordCloudTasks fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTWordCloudTasks fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostCadCommonFile(ctx context.Context, _headers map[string]string, body dto.CadCommonFile, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostCadCommonFile(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostCadCommonFile fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostCadCommonFile fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonFile_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.CadCommonFile, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonFile_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonFile_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonFile_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutCadCommonFile(ctx context.Context, _headers map[string]string, body dto.CadCommonFile, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutCadCommonFile(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutCadCommonFile fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutCadCommonFile fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteCadCommonFile_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteCadCommonFile_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteCadCommonFile_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteCadCommonFile_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonFiles(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonFiles(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonFiles fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonFiles fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostCadCommonFollow(ctx context.Context, _headers map[string]string, body dto.CadCommonFollow, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostCadCommonFollow(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostCadCommonFollow fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostCadCommonFollow fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonFollow_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.CadCommonFollow, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonFollow_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonFollow_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonFollow_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutCadCommonFollow(ctx context.Context, _headers map[string]string, body dto.CadCommonFollow, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutCadCommonFollow(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutCadCommonFollow fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutCadCommonFollow fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteCadCommonFollow_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteCadCommonFollow_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteCadCommonFollow_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteCadCommonFollow_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetCadCommonFollows(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetCadCommonFollows(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetCadCommonFollows fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetCadCommonFollows fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostQrtzFiredTrigger(ctx context.Context, _headers map[string]string, body dto.QrtzFiredTrigger, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostQrtzFiredTrigger(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostQrtzFiredTrigger fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostQrtzFiredTrigger fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzFiredTrigger_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.QrtzFiredTrigger, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzFiredTrigger_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzFiredTrigger_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzFiredTrigger_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutQrtzFiredTrigger(ctx context.Context, _headers map[string]string, body dto.QrtzFiredTrigger, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutQrtzFiredTrigger(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutQrtzFiredTrigger fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutQrtzFiredTrigger fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteQrtzFiredTrigger_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteQrtzFiredTrigger_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteQrtzFiredTrigger_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteQrtzFiredTrigger_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzFiredTriggers(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzFiredTriggers(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzFiredTriggers fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzFiredTriggers fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostTClient(ctx context.Context, _headers map[string]string, body dto.TClient, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTClient(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTClient fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTClient fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTClient_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TClient, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTClient_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTClient_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTClient_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutTClient(ctx context.Context, _headers map[string]string, body dto.TClient, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTClient(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTClient fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTClient fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteTClient_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTClient_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTClient_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTClient_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetTClients(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTClients(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTClients fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTClients fail")
	}
	return
}
func (receiver *TestgormClientProxy) PostQrtzCronTrigger(ctx context.Context, _headers map[string]string, body dto.QrtzCronTrigger, options Options) (_resp *resty.Response, data string, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostQrtzCronTrigger(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostQrtzCronTrigger fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostQrtzCronTrigger fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzCronTrigger_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, data dto.QrtzCronTrigger, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzCronTrigger_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzCronTrigger_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzCronTrigger_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) PutQrtzCronTrigger(ctx context.Context, _headers map[string]string, body dto.QrtzCronTrigger, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutQrtzCronTrigger(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutQrtzCronTrigger fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutQrtzCronTrigger fail")
	}
	return
}
func (receiver *TestgormClientProxy) DeleteQrtzCronTrigger_Id(ctx context.Context, _headers map[string]string, id string, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteQrtzCronTrigger_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteQrtzCronTrigger_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteQrtzCronTrigger_Id fail")
	}
	return
}
func (receiver *TestgormClientProxy) GetQrtzCronTriggers(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetQrtzCronTriggers(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetQrtzCronTriggers fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetQrtzCronTriggers fail")
	}
	return
}

type ProxyOption func(*TestgormClientProxy)

func WithRunner(runner goresilience.Runner) ProxyOption {
	return func(proxy *TestgormClientProxy) {
		proxy.runner = runner
	}
}

func WithLogger(logger zerolog.Logger) ProxyOption {
	return func(proxy *TestgormClientProxy) {
		proxy.logger = logger
	}
}

func NewTestgormClientProxy(client *TestgormClient, opts ...ProxyOption) *TestgormClientProxy {
	cp := &TestgormClientProxy{
		client: client,
		logger: zlogger.Logger,
	}

	for _, opt := range opts {
		opt(cp)
	}

	if cp.runner == nil {
		var mid []goresilience.Middleware
		mid = append(mid, metrics.NewMiddleware("testgorm_client", metrics.NewPrometheusRecorder(prometheus.DefaultRegisterer)))
		mid = append(mid, circuitbreaker.NewMiddleware(circuitbreaker.Config{
			ErrorPercentThresholdToOpen:        50,
			MinimumRequestToOpen:               6,
			SuccessfulRequiredOnHalfOpen:       1,
			WaitDurationInOpenState:            5 * time.Second,
			MetricsSlidingWindowBucketQuantity: 10,
			MetricsBucketDuration:              1 * time.Second,
		}),
			timeout.NewMiddleware(timeout.Config{
				Timeout: 3 * time.Minute,
			}),
			retry.NewMiddleware(retry.Config{
				Times: 3,
			}))

		cp.runner = goresilience.RunnerChain(mid...)
	}

	return cp
}
