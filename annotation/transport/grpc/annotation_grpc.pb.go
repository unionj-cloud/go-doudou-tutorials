// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnnotationServiceClient is the client API for AnnotationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnotationServiceClient interface {
	// 此接口可公开访问，无需校验登录和权限
	GetGuestRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGuestRpcResponse, error)
	// 此接口只有登录用户有权访问
	// @role(USER,ADMIN)
	GetUserRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserRpcResponse, error)
	// 此接口只有管理员有权访问
	// @role(ADMIN)
	GetAdminRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAdminRpcResponse, error)
}

type annotationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnotationServiceClient(cc grpc.ClientConnInterface) AnnotationServiceClient {
	return &annotationServiceClient{cc}
}

func (c *annotationServiceClient) GetGuestRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGuestRpcResponse, error) {
	out := new(GetGuestRpcResponse)
	err := c.cc.Invoke(ctx, "/annotation.AnnotationService/GetGuestRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) GetUserRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetUserRpcResponse, error) {
	out := new(GetUserRpcResponse)
	err := c.cc.Invoke(ctx, "/annotation.AnnotationService/GetUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotationServiceClient) GetAdminRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAdminRpcResponse, error) {
	out := new(GetAdminRpcResponse)
	err := c.cc.Invoke(ctx, "/annotation.AnnotationService/GetAdminRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnnotationServiceServer is the server API for AnnotationService service.
// All implementations must embed UnimplementedAnnotationServiceServer
// for forward compatibility
type AnnotationServiceServer interface {
	// 此接口可公开访问，无需校验登录和权限
	GetGuestRpc(context.Context, *emptypb.Empty) (*GetGuestRpcResponse, error)
	// 此接口只有登录用户有权访问
	// @role(USER,ADMIN)
	GetUserRpc(context.Context, *emptypb.Empty) (*GetUserRpcResponse, error)
	// 此接口只有管理员有权访问
	// @role(ADMIN)
	GetAdminRpc(context.Context, *emptypb.Empty) (*GetAdminRpcResponse, error)
	mustEmbedUnimplementedAnnotationServiceServer()
}

// UnimplementedAnnotationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnotationServiceServer struct {
}

func (UnimplementedAnnotationServiceServer) GetGuestRpc(context.Context, *emptypb.Empty) (*GetGuestRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGuestRpc not implemented")
}
func (UnimplementedAnnotationServiceServer) GetUserRpc(context.Context, *emptypb.Empty) (*GetUserRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRpc not implemented")
}
func (UnimplementedAnnotationServiceServer) GetAdminRpc(context.Context, *emptypb.Empty) (*GetAdminRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminRpc not implemented")
}
func (UnimplementedAnnotationServiceServer) mustEmbedUnimplementedAnnotationServiceServer() {}

// UnsafeAnnotationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnotationServiceServer will
// result in compilation errors.
type UnsafeAnnotationServiceServer interface {
	mustEmbedUnimplementedAnnotationServiceServer()
}

func RegisterAnnotationServiceServer(s grpc.ServiceRegistrar, srv AnnotationServiceServer) {
	s.RegisterService(&AnnotationService_ServiceDesc, srv)
}

func _AnnotationService_GetGuestRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).GetGuestRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/annotation.AnnotationService/GetGuestRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).GetGuestRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_GetUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).GetUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/annotation.AnnotationService/GetUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).GetUserRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnnotationService_GetAdminRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotationServiceServer).GetAdminRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/annotation.AnnotationService/GetAdminRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotationServiceServer).GetAdminRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AnnotationService_ServiceDesc is the grpc.ServiceDesc for AnnotationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnotationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "annotation.AnnotationService",
	HandlerType: (*AnnotationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGuestRpc",
			Handler:    _AnnotationService_GetGuestRpc_Handler,
		},
		{
			MethodName: "GetUserRpc",
			Handler:    _AnnotationService_GetUserRpc_Handler,
		},
		{
			MethodName: "GetAdminRpc",
			Handler:    _AnnotationService_GetAdminRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/annotation.proto",
}
