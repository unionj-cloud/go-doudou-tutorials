/**
* Generated by go-doudou v2.1.1.
* You can edit it as your need.
 */
package client

import (
	"context"
	"testgggorm/dto"
	"time"

	"github.com/go-resty/resty/v2"
	"github.com/pkg/errors"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/rs/zerolog"
	"github.com/slok/goresilience"
	"github.com/slok/goresilience/circuitbreaker"
	rerrors "github.com/slok/goresilience/errors"
	"github.com/slok/goresilience/metrics"
	"github.com/slok/goresilience/retry"
	"github.com/slok/goresilience/timeout"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/zlogger"
)

type TestgggormClientProxy struct {
	client *TestgggormClient
	logger zerolog.Logger
	runner goresilience.Runner
}

func (receiver *TestgggormClientProxy) PostTInvalidToken(ctx context.Context, _headers map[string]string, body dto.TInvalidToken, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTInvalidToken(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTInvalidToken fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTInvalidToken fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTInvalidTokens(ctx context.Context, _headers map[string]string, body []dto.TInvalidToken, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTInvalidTokens(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTInvalidTokens fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTInvalidTokens fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTInvalidToken_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TInvalidToken, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTInvalidToken_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTInvalidToken_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTInvalidToken_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTInvalidToken(ctx context.Context, _headers map[string]string, body dto.TInvalidToken, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTInvalidToken(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTInvalidToken fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTInvalidToken fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTInvalidToken_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTInvalidToken_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTInvalidToken_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTInvalidToken_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTInvalidTokens(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTInvalidTokens(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTInvalidTokens fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTInvalidTokens fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTJjj(ctx context.Context, _headers map[string]string, body dto.TJjj, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTJjj(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTJjj fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTJjj fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTJjjs(ctx context.Context, _headers map[string]string, body []dto.TJjj, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTJjjs(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTJjjs fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTJjjs fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTJjj_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TJjj, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTJjj_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTJjj_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTJjj_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTJjj(ctx context.Context, _headers map[string]string, body dto.TJjj, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTJjj(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTJjj fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTJjj fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTJjj_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTJjj_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTJjj_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTJjj_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTJjjs(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTJjjs(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTJjjs fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTJjjs fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTPost(ctx context.Context, _headers map[string]string, body dto.TPost, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTPost(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTPost fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTPost fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTPosts(ctx context.Context, _headers map[string]string, body []dto.TPost, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTPosts(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTPosts fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTPosts fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTPost_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TPost, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTPost_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTPost_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTPost_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTPost(ctx context.Context, _headers map[string]string, body dto.TPost, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTPost(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTPost fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTPost fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTPost_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTPost_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTPost_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTPost_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTPosts(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTPosts(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTPosts fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTPosts fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTUser(ctx context.Context, _headers map[string]string, body dto.TUser, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTUser(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTUser fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTUser fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTUsers(ctx context.Context, _headers map[string]string, body []dto.TUser, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTUsers(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTUsers fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTUsers fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TUser, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTUser_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTUser_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTUser_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTUser(ctx context.Context, _headers map[string]string, body dto.TUser, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTUser(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTUser fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTUser fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTUser_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTUser_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTUser_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTUser_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTUsers(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTUsers(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTUsers fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTUsers fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTWordCloudTask(ctx context.Context, _headers map[string]string, body dto.TWordCloudTask, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTWordCloudTask(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTWordCloudTask fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTWordCloudTask fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTWordCloudTasks(ctx context.Context, _headers map[string]string, body []dto.TWordCloudTask, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTWordCloudTasks(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTWordCloudTasks fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTWordCloudTasks fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTWordCloudTask_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TWordCloudTask, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTWordCloudTask_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTWordCloudTask_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTWordCloudTask_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTWordCloudTask(ctx context.Context, _headers map[string]string, body dto.TWordCloudTask, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTWordCloudTask(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTWordCloudTask fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTWordCloudTask fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTWordCloudTask_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTWordCloudTask_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTWordCloudTask_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTWordCloudTask_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTWordCloudTasks(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTWordCloudTasks(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTWordCloudTasks fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTWordCloudTasks fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTAuthor(ctx context.Context, _headers map[string]string, body dto.TAuthor, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTAuthor(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTAuthor fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTAuthor fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTAuthors(ctx context.Context, _headers map[string]string, body []dto.TAuthor, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTAuthors(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTAuthors fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTAuthors fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTAuthor_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TAuthor, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTAuthor_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTAuthor_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTAuthor_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTAuthor(ctx context.Context, _headers map[string]string, body dto.TAuthor, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTAuthor(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTAuthor fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTAuthor fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTAuthor_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTAuthor_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTAuthor_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTAuthor_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTAuthors(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTAuthors(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTAuthors fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTAuthors fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTClient(ctx context.Context, _headers map[string]string, body dto.TClient, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTClient(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTClient fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTClient fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTClients(ctx context.Context, _headers map[string]string, body []dto.TClient, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTClients(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTClients fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTClients fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTClient_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TClient, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTClient_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTClient_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTClient_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTClient(ctx context.Context, _headers map[string]string, body dto.TClient, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTClient(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTClient fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTClient fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTClient_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTClient_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTClient_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTClient_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTClients(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTClients(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTClients fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTClients fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTDept(ctx context.Context, _headers map[string]string, body dto.TDept, options Options) (_resp *resty.Response, data int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTDept(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTDept fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTDept fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PostTDepts(ctx context.Context, _headers map[string]string, body []dto.TDept, options Options) (_resp *resty.Response, data []int32, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.PostTDepts(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call PostTDepts fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call PostTDepts fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTDept_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, data dto.TDept, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTDept_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTDept_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTDept_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) PutTDept(ctx context.Context, _headers map[string]string, body dto.TDept, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.PutTDept(
			ctx,
			_headers,
			body,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call PutTDept fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call PutTDept fail")
	}
	return
}
func (receiver *TestgggormClientProxy) DeleteTDept_Id(ctx context.Context, _headers map[string]string, id int32, options Options) (_resp *resty.Response, re error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, re = receiver.client.DeleteTDept_Id(
			ctx,
			_headers,
			id,
			options,
		)
		if re != nil {
			return errors.Wrap(re, "call DeleteTDept_Id fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		re = errors.Wrap(_err, "call DeleteTDept_Id fail")
	}
	return
}
func (receiver *TestgggormClientProxy) GetTDepts(ctx context.Context, _headers map[string]string, parameter dto.Parameter, options Options) (_resp *resty.Response, data dto.Page, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, data, err = receiver.client.GetTDepts(
			ctx,
			_headers,
			parameter,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call GetTDepts fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call GetTDepts fail")
	}
	return
}
func (receiver *TestgggormClientProxy) TAuthorPosts(ctx context.Context, _headers map[string]string, body dto.SaveAuthorReqDTO, options Options) (_resp *resty.Response, err error) {
	if _err := receiver.runner.Run(ctx, func(ctx context.Context) error {
		_resp, err = receiver.client.TAuthorPosts(
			ctx,
			_headers,
			body,
			options,
		)
		if err != nil {
			return errors.Wrap(err, "call TAuthorPosts fail")
		}
		return nil
	}); _err != nil {
		// you can implement your fallback logic here
		if errors.Is(_err, rerrors.ErrCircuitOpen) {
			receiver.logger.Error().Err(_err).Msg("")
		}
		err = errors.Wrap(_err, "call TAuthorPosts fail")
	}
	return
}

type ProxyOption func(*TestgggormClientProxy)

func WithRunner(runner goresilience.Runner) ProxyOption {
	return func(proxy *TestgggormClientProxy) {
		proxy.runner = runner
	}
}

func WithLogger(logger zerolog.Logger) ProxyOption {
	return func(proxy *TestgggormClientProxy) {
		proxy.logger = logger
	}
}

func NewTestgggormClientProxy(client *TestgggormClient, opts ...ProxyOption) *TestgggormClientProxy {
	cp := &TestgggormClientProxy{
		client: client,
		logger: zlogger.Logger,
	}

	for _, opt := range opts {
		opt(cp)
	}

	if cp.runner == nil {
		var mid []goresilience.Middleware
		mid = append(mid, metrics.NewMiddleware("testgggorm_client", metrics.NewPrometheusRecorder(prometheus.DefaultRegisterer)))
		mid = append(mid, circuitbreaker.NewMiddleware(circuitbreaker.Config{
			ErrorPercentThresholdToOpen:        50,
			MinimumRequestToOpen:               6,
			SuccessfulRequiredOnHalfOpen:       1,
			WaitDurationInOpenState:            5 * time.Second,
			MetricsSlidingWindowBucketQuantity: 10,
			MetricsBucketDuration:              1 * time.Second,
		}),
			timeout.NewMiddleware(timeout.Config{
				Timeout: 3 * time.Minute,
			}),
			retry.NewMiddleware(retry.Config{
				Times: 3,
			}))

		cp.runner = goresilience.RunnerChain(mid...)
	}

	return cp
}
