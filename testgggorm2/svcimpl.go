// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.
// Code generated by gorm.io/gen for go-doudou. YOU CAN EDIT.

package service

import (
	"context"
	"testgggorm2/config"
	"testgggorm2/dto"
	"testgggorm2/model"
	"testgggorm2/query"

	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/database"
	paginate "github.com/unionj-cloud/go-doudou/v2/toolkit/pagination/gorm"
)

var _ Testgggorm2 = (*Testgggorm2Impl)(nil)

type Testgggorm2Impl struct {
	conf *config.Config
	pg   *paginate.Pagination
	q    *query.Query
}

func NewTestgggorm2(conf *config.Config) *Testgggorm2Impl {
	pg := paginate.New(&paginate.Config{
		FieldSelectorEnabled: true,
	})
	return &Testgggorm2Impl{
		conf: conf,
		pg:   pg,
		q:    query.Q,
	}
}

func (receiver Testgggorm2Impl) clone(q *query.Query) *Testgggorm2Impl {
	receiver.q = q
	return &receiver
}

// PostGenBanner mapped from table <banner>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenBanner(ctx context.Context, body dto.Banner) (data int32, err error) {
	m := model.Banner(body)
	u := receiver.q.Banner
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenBanners mapped from table <banner>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenBanners(ctx context.Context, body []dto.Banner) (data []int32, err error) {
	list := make([]*model.Banner, 0, len(body))
	for _, item := range body {
		m := model.Banner(item)
		list = append(list, &m)
	}
	u := receiver.q.Banner
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenBanner_Id mapped from table <banner>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenBanner_Id(ctx context.Context, id int32) (data dto.Banner, err error) {
	u := receiver.q.Banner
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Banner{}, errors.WithStack(err)
	}
	return dto.Banner(*m), nil
}

// PutGenBanner mapped from table <banner>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenBanner(ctx context.Context, body dto.Banner) (err error) {
	m := model.Banner(body)
	u := receiver.q.Banner
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenBanner_Id mapped from table <banner>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenBanner_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Banner
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenBanners mapped from table <banner>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenBanners(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Banner{})).Request(parameter).Response(&[]model.Banner{})
	data = dto.Page(paginated)
	return
}

// PostGenCart mapped from table <cart>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenCart(ctx context.Context, body dto.Cart) (data int32, err error) {
	m := model.Cart(body)
	u := receiver.q.Cart
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenCarts mapped from table <cart>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenCarts(ctx context.Context, body []dto.Cart) (data []int32, err error) {
	list := make([]*model.Cart, 0, len(body))
	for _, item := range body {
		m := model.Cart(item)
		list = append(list, &m)
	}
	u := receiver.q.Cart
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenCart_Id mapped from table <cart>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenCart_Id(ctx context.Context, id int32) (data dto.Cart, err error) {
	u := receiver.q.Cart
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Cart{}, errors.WithStack(err)
	}
	return dto.Cart(*m), nil
}

// PutGenCart mapped from table <cart>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenCart(ctx context.Context, body dto.Cart) (err error) {
	m := model.Cart(body)
	u := receiver.q.Cart
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenCart_Id mapped from table <cart>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenCart_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Cart
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenCarts mapped from table <cart>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenCarts(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Cart{})).Request(parameter).Response(&[]model.Cart{})
	data = dto.Page(paginated)
	return
}

// PostGenOrderItem mapped from table <order_item>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenOrderItem(ctx context.Context, body dto.OrderItem) (data int32, err error) {
	m := model.OrderItem(body)
	u := receiver.q.OrderItem
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenOrderItems mapped from table <order_item>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenOrderItems(ctx context.Context, body []dto.OrderItem) (data []int32, err error) {
	list := make([]*model.OrderItem, 0, len(body))
	for _, item := range body {
		m := model.OrderItem(item)
		list = append(list, &m)
	}
	u := receiver.q.OrderItem
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenOrderItem_Id mapped from table <order_item>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenOrderItem_Id(ctx context.Context, id int32) (data dto.OrderItem, err error) {
	u := receiver.q.OrderItem
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.OrderItem{}, errors.WithStack(err)
	}
	return dto.OrderItem(*m), nil
}

// PutGenOrderItem mapped from table <order_item>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenOrderItem(ctx context.Context, body dto.OrderItem) (err error) {
	m := model.OrderItem(body)
	u := receiver.q.OrderItem
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenOrderItem_Id mapped from table <order_item>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenOrderItem_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.OrderItem
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenOrderItems mapped from table <order_item>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenOrderItems(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.OrderItem{})).Request(parameter).Response(&[]model.OrderItem{})
	data = dto.Page(paginated)
	return
}

// PostGenProductCate mapped from table <product_cate>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductCate(ctx context.Context, body dto.ProductCate) (data int32, err error) {
	m := model.ProductCate(body)
	u := receiver.q.ProductCate
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenProductCates mapped from table <product_cate>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductCates(ctx context.Context, body []dto.ProductCate) (data []int32, err error) {
	list := make([]*model.ProductCate, 0, len(body))
	for _, item := range body {
		m := model.ProductCate(item)
		list = append(list, &m)
	}
	u := receiver.q.ProductCate
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenProductCate_Id mapped from table <product_cate>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductCate_Id(ctx context.Context, id int32) (data dto.ProductCate, err error) {
	u := receiver.q.ProductCate
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.ProductCate{}, errors.WithStack(err)
	}
	return dto.ProductCate(*m), nil
}

// PutGenProductCate mapped from table <product_cate>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenProductCate(ctx context.Context, body dto.ProductCate) (err error) {
	m := model.ProductCate(body)
	u := receiver.q.ProductCate
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenProductCate_Id mapped from table <product_cate>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenProductCate_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.ProductCate
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenProductCates mapped from table <product_cate>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductCates(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.ProductCate{})).Request(parameter).Response(&[]model.ProductCate{})
	data = dto.Page(paginated)
	return
}

// PostGenProductColor mapped from table <product_color>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductColor(ctx context.Context, body dto.ProductColor) (data int32, err error) {
	m := model.ProductColor(body)
	u := receiver.q.ProductColor
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenProductColors mapped from table <product_color>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductColors(ctx context.Context, body []dto.ProductColor) (data []int32, err error) {
	list := make([]*model.ProductColor, 0, len(body))
	for _, item := range body {
		m := model.ProductColor(item)
		list = append(list, &m)
	}
	u := receiver.q.ProductColor
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenProductColor_Id mapped from table <product_color>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductColor_Id(ctx context.Context, id int32) (data dto.ProductColor, err error) {
	u := receiver.q.ProductColor
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.ProductColor{}, errors.WithStack(err)
	}
	return dto.ProductColor(*m), nil
}

// PutGenProductColor mapped from table <product_color>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenProductColor(ctx context.Context, body dto.ProductColor) (err error) {
	m := model.ProductColor(body)
	u := receiver.q.ProductColor
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenProductColor_Id mapped from table <product_color>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenProductColor_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.ProductColor
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenProductColors mapped from table <product_color>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductColors(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.ProductColor{})).Request(parameter).Response(&[]model.ProductColor{})
	data = dto.Page(paginated)
	return
}

// PostGenAddress mapped from table <address>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenAddress(ctx context.Context, body dto.Address) (data int32, err error) {
	m := model.Address(body)
	u := receiver.q.Address
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenAddresss mapped from table <address>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenAddresss(ctx context.Context, body []dto.Address) (data []int32, err error) {
	list := make([]*model.Address, 0, len(body))
	for _, item := range body {
		m := model.Address(item)
		list = append(list, &m)
	}
	u := receiver.q.Address
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenAddress_Id mapped from table <address>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenAddress_Id(ctx context.Context, id int32) (data dto.Address, err error) {
	u := receiver.q.Address
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Address{}, errors.WithStack(err)
	}
	return dto.Address(*m), nil
}

// PutGenAddress mapped from table <address>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenAddress(ctx context.Context, body dto.Address) (err error) {
	m := model.Address(body)
	u := receiver.q.Address
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenAddress_Id mapped from table <address>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenAddress_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Address
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenAddresss mapped from table <address>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenAddresss(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Address{})).Request(parameter).Response(&[]model.Address{})
	data = dto.Page(paginated)
	return
}

// PostGenAdministrator mapped from table <administrator>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenAdministrator(ctx context.Context, body dto.Administrator) (data int32, err error) {
	m := model.Administrator(body)
	u := receiver.q.Administrator
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenAdministrators mapped from table <administrator>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenAdministrators(ctx context.Context, body []dto.Administrator) (data []int32, err error) {
	list := make([]*model.Administrator, 0, len(body))
	for _, item := range body {
		m := model.Administrator(item)
		list = append(list, &m)
	}
	u := receiver.q.Administrator
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenAdministrator_Id mapped from table <administrator>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenAdministrator_Id(ctx context.Context, id int32) (data dto.Administrator, err error) {
	u := receiver.q.Administrator
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Administrator{}, errors.WithStack(err)
	}
	return dto.Administrator(*m), nil
}

// PutGenAdministrator mapped from table <administrator>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenAdministrator(ctx context.Context, body dto.Administrator) (err error) {
	m := model.Administrator(body)
	u := receiver.q.Administrator
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenAdministrator_Id mapped from table <administrator>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenAdministrator_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Administrator
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenAdministrators mapped from table <administrator>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenAdministrators(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Administrator{})).Request(parameter).Response(&[]model.Administrator{})
	data = dto.Page(paginated)
	return
}

// PostGenOrder mapped from table <order>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenOrder(ctx context.Context, body dto.Order) (data int32, err error) {
	m := model.Order(body)
	u := receiver.q.Order
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenOrders mapped from table <order>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenOrders(ctx context.Context, body []dto.Order) (data []int32, err error) {
	list := make([]*model.Order, 0, len(body))
	for _, item := range body {
		m := model.Order(item)
		list = append(list, &m)
	}
	u := receiver.q.Order
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenOrder_Id mapped from table <order>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenOrder_Id(ctx context.Context, id int32) (data dto.Order, err error) {
	u := receiver.q.Order
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Order{}, errors.WithStack(err)
	}
	return dto.Order(*m), nil
}

// PutGenOrder mapped from table <order>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenOrder(ctx context.Context, body dto.Order) (err error) {
	m := model.Order(body)
	u := receiver.q.Order
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenOrder_Id mapped from table <order>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenOrder_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Order
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenOrders mapped from table <order>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenOrders(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Order{})).Request(parameter).Response(&[]model.Order{})
	data = dto.Page(paginated)
	return
}

// PostGenProductImage mapped from table <product_image>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductImage(ctx context.Context, body dto.ProductImage) (data int32, err error) {
	m := model.ProductImage(body)
	u := receiver.q.ProductImage
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenProductImages mapped from table <product_image>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductImages(ctx context.Context, body []dto.ProductImage) (data []int32, err error) {
	list := make([]*model.ProductImage, 0, len(body))
	for _, item := range body {
		m := model.ProductImage(item)
		list = append(list, &m)
	}
	u := receiver.q.ProductImage
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenProductImage_Id mapped from table <product_image>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductImage_Id(ctx context.Context, id int32) (data dto.ProductImage, err error) {
	u := receiver.q.ProductImage
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.ProductImage{}, errors.WithStack(err)
	}
	return dto.ProductImage(*m), nil
}

// PutGenProductImage mapped from table <product_image>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenProductImage(ctx context.Context, body dto.ProductImage) (err error) {
	m := model.ProductImage(body)
	u := receiver.q.ProductImage
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenProductImage_Id mapped from table <product_image>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenProductImage_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.ProductImage
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenProductImages mapped from table <product_image>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductImages(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.ProductImage{})).Request(parameter).Response(&[]model.ProductImage{})
	data = dto.Page(paginated)
	return
}

// PostGenRole mapped from table <role>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenRole(ctx context.Context, body dto.Role) (data int32, err error) {
	m := model.Role(body)
	u := receiver.q.Role
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenRoles mapped from table <role>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenRoles(ctx context.Context, body []dto.Role) (data []int32, err error) {
	list := make([]*model.Role, 0, len(body))
	for _, item := range body {
		m := model.Role(item)
		list = append(list, &m)
	}
	u := receiver.q.Role
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenRole_Id mapped from table <role>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenRole_Id(ctx context.Context, id int32) (data dto.Role, err error) {
	u := receiver.q.Role
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Role{}, errors.WithStack(err)
	}
	return dto.Role(*m), nil
}

// PutGenRole mapped from table <role>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenRole(ctx context.Context, body dto.Role) (err error) {
	m := model.Role(body)
	u := receiver.q.Role
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenRole_Id mapped from table <role>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenRole_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Role
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenRoles mapped from table <role>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenRoles(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Role{})).Request(parameter).Response(&[]model.Role{})
	data = dto.Page(paginated)
	return
}

// PostGenRoleAuth mapped from table <role_auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenRoleAuth(ctx context.Context, body dto.RoleAuth) (data int32, err error) {
	m := model.RoleAuth(body)
	u := receiver.q.RoleAuth
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenRoleAuths mapped from table <role_auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenRoleAuths(ctx context.Context, body []dto.RoleAuth) (data []int32, err error) {
	list := make([]*model.RoleAuth, 0, len(body))
	for _, item := range body {
		m := model.RoleAuth(item)
		list = append(list, &m)
	}
	u := receiver.q.RoleAuth
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenRoleAuth_Id mapped from table <role_auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenRoleAuth_Id(ctx context.Context, id int32) (data dto.RoleAuth, err error) {
	u := receiver.q.RoleAuth
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.RoleAuth{}, errors.WithStack(err)
	}
	return dto.RoleAuth(*m), nil
}

// PutGenRoleAuth mapped from table <role_auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenRoleAuth(ctx context.Context, body dto.RoleAuth) (err error) {
	m := model.RoleAuth(body)
	u := receiver.q.RoleAuth
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenRoleAuth_Id mapped from table <role_auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenRoleAuth_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.RoleAuth
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenRoleAuths mapped from table <role_auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenRoleAuths(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.RoleAuth{})).Request(parameter).Response(&[]model.RoleAuth{})
	data = dto.Page(paginated)
	return
}

// PostGenSetting mapped from table <setting>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenSetting(ctx context.Context, body dto.Setting) (data int32, err error) {
	m := model.Setting(body)
	u := receiver.q.Setting
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenSettings mapped from table <setting>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenSettings(ctx context.Context, body []dto.Setting) (data []int32, err error) {
	list := make([]*model.Setting, 0, len(body))
	for _, item := range body {
		m := model.Setting(item)
		list = append(list, &m)
	}
	u := receiver.q.Setting
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenSetting_Id mapped from table <setting>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenSetting_Id(ctx context.Context, id int32) (data dto.Setting, err error) {
	u := receiver.q.Setting
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Setting{}, errors.WithStack(err)
	}
	return dto.Setting(*m), nil
}

// PutGenSetting mapped from table <setting>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenSetting(ctx context.Context, body dto.Setting) (err error) {
	m := model.Setting(body)
	u := receiver.q.Setting
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenSetting_Id mapped from table <setting>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenSetting_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Setting
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenSettings mapped from table <setting>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenSettings(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Setting{})).Request(parameter).Response(&[]model.Setting{})
	data = dto.Page(paginated)
	return
}

// PostGenMenu mapped from table <menu>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenMenu(ctx context.Context, body dto.Menu) (data int32, err error) {
	m := model.Menu(body)
	u := receiver.q.Menu
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenMenus mapped from table <menu>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenMenus(ctx context.Context, body []dto.Menu) (data []int32, err error) {
	list := make([]*model.Menu, 0, len(body))
	for _, item := range body {
		m := model.Menu(item)
		list = append(list, &m)
	}
	u := receiver.q.Menu
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenMenu_Id mapped from table <menu>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenMenu_Id(ctx context.Context, id int32) (data dto.Menu, err error) {
	u := receiver.q.Menu
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Menu{}, errors.WithStack(err)
	}
	return dto.Menu(*m), nil
}

// PutGenMenu mapped from table <menu>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenMenu(ctx context.Context, body dto.Menu) (err error) {
	m := model.Menu(body)
	u := receiver.q.Menu
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenMenu_Id mapped from table <menu>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenMenu_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Menu
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenMenus mapped from table <menu>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenMenus(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Menu{})).Request(parameter).Response(&[]model.Menu{})
	data = dto.Page(paginated)
	return
}

// PostGenProduct mapped from table <product>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProduct(ctx context.Context, body dto.Product) (data int32, err error) {
	m := model.Product(body)
	u := receiver.q.Product
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenProducts mapped from table <product>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProducts(ctx context.Context, body []dto.Product) (data []int32, err error) {
	list := make([]*model.Product, 0, len(body))
	for _, item := range body {
		m := model.Product(item)
		list = append(list, &m)
	}
	u := receiver.q.Product
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenProduct_Id mapped from table <product>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProduct_Id(ctx context.Context, id int32) (data dto.Product, err error) {
	u := receiver.q.Product
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Product{}, errors.WithStack(err)
	}
	return dto.Product(*m), nil
}

// PutGenProduct mapped from table <product>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenProduct(ctx context.Context, body dto.Product) (err error) {
	m := model.Product(body)
	u := receiver.q.Product
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenProduct_Id mapped from table <product>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenProduct_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Product
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenProducts mapped from table <product>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProducts(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Product{})).Request(parameter).Response(&[]model.Product{})
	data = dto.Page(paginated)
	return
}

// PostGenProductAttr mapped from table <product_attr>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductAttr(ctx context.Context, body dto.ProductAttr) (data int32, err error) {
	m := model.ProductAttr(body)
	u := receiver.q.ProductAttr
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenProductAttrs mapped from table <product_attr>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductAttrs(ctx context.Context, body []dto.ProductAttr) (data []int32, err error) {
	list := make([]*model.ProductAttr, 0, len(body))
	for _, item := range body {
		m := model.ProductAttr(item)
		list = append(list, &m)
	}
	u := receiver.q.ProductAttr
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenProductAttr_Id mapped from table <product_attr>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductAttr_Id(ctx context.Context, id int32) (data dto.ProductAttr, err error) {
	u := receiver.q.ProductAttr
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.ProductAttr{}, errors.WithStack(err)
	}
	return dto.ProductAttr(*m), nil
}

// PutGenProductAttr mapped from table <product_attr>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenProductAttr(ctx context.Context, body dto.ProductAttr) (err error) {
	m := model.ProductAttr(body)
	u := receiver.q.ProductAttr
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenProductAttr_Id mapped from table <product_attr>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenProductAttr_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.ProductAttr
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenProductAttrs mapped from table <product_attr>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductAttrs(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.ProductAttr{})).Request(parameter).Response(&[]model.ProductAttr{})
	data = dto.Page(paginated)
	return
}

// PostGenSchemaTest mapped from table <schema_test>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenSchemaTest(ctx context.Context, body dto.SchemaTest) (data int32, err error) {
	m := model.SchemaTest(body)
	u := receiver.q.SchemaTest
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenSchemaTests mapped from table <schema_test>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenSchemaTests(ctx context.Context, body []dto.SchemaTest) (data []int32, err error) {
	list := make([]*model.SchemaTest, 0, len(body))
	for _, item := range body {
		m := model.SchemaTest(item)
		list = append(list, &m)
	}
	u := receiver.q.SchemaTest
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenSchemaTest_Id mapped from table <schema_test>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenSchemaTest_Id(ctx context.Context, id int32) (data dto.SchemaTest, err error) {
	u := receiver.q.SchemaTest
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.SchemaTest{}, errors.WithStack(err)
	}
	return dto.SchemaTest(*m), nil
}

// PutGenSchemaTest mapped from table <schema_test>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenSchemaTest(ctx context.Context, body dto.SchemaTest) (err error) {
	m := model.SchemaTest(body)
	u := receiver.q.SchemaTest
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenSchemaTest_Id mapped from table <schema_test>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenSchemaTest_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.SchemaTest
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenSchemaTests mapped from table <schema_test>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenSchemaTests(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.SchemaTest{})).Request(parameter).Response(&[]model.SchemaTest{})
	data = dto.Page(paginated)
	return
}

// PostGenUser mapped from table <user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenUser(ctx context.Context, body dto.User) (data int32, err error) {
	m := model.User(body)
	u := receiver.q.User
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenUsers mapped from table <user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenUsers(ctx context.Context, body []dto.User) (data []int32, err error) {
	list := make([]*model.User, 0, len(body))
	for _, item := range body {
		m := model.User(item)
		list = append(list, &m)
	}
	u := receiver.q.User
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenUser_Id mapped from table <user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenUser_Id(ctx context.Context, id int32) (data dto.User, err error) {
	u := receiver.q.User
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.User{}, errors.WithStack(err)
	}
	return dto.User(*m), nil
}

// PutGenUser mapped from table <user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenUser(ctx context.Context, body dto.User) (err error) {
	m := model.User(body)
	u := receiver.q.User
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenUser_Id mapped from table <user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenUser_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.User
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenUsers mapped from table <user>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenUsers(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.User{})).Request(parameter).Response(&[]model.User{})
	data = dto.Page(paginated)
	return
}

// PostGenUserSm mapped from table <user_sms>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenUserSm(ctx context.Context, body dto.UserSm) (data int32, err error) {
	m := model.UserSm(body)
	u := receiver.q.UserSm
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenUserSms mapped from table <user_sms>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenUserSms(ctx context.Context, body []dto.UserSm) (data []int32, err error) {
	list := make([]*model.UserSm, 0, len(body))
	for _, item := range body {
		m := model.UserSm(item)
		list = append(list, &m)
	}
	u := receiver.q.UserSm
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenUserSm_Id mapped from table <user_sms>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenUserSm_Id(ctx context.Context, id int32) (data dto.UserSm, err error) {
	u := receiver.q.UserSm
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.UserSm{}, errors.WithStack(err)
	}
	return dto.UserSm(*m), nil
}

// PutGenUserSm mapped from table <user_sms>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenUserSm(ctx context.Context, body dto.UserSm) (err error) {
	m := model.UserSm(body)
	u := receiver.q.UserSm
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenUserSm_Id mapped from table <user_sms>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenUserSm_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.UserSm
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenUserSms mapped from table <user_sms>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenUserSms(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.UserSm{})).Request(parameter).Response(&[]model.UserSm{})
	data = dto.Page(paginated)
	return
}

// PostGenAuth mapped from table <auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenAuth(ctx context.Context, body dto.Auth) (data int32, err error) {
	m := model.Auth(body)
	u := receiver.q.Auth
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenAuths mapped from table <auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenAuths(ctx context.Context, body []dto.Auth) (data []int32, err error) {
	list := make([]*model.Auth, 0, len(body))
	for _, item := range body {
		m := model.Auth(item)
		list = append(list, &m)
	}
	u := receiver.q.Auth
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenAuth_Id mapped from table <auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenAuth_Id(ctx context.Context, id int32) (data dto.Auth, err error) {
	u := receiver.q.Auth
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.Auth{}, errors.WithStack(err)
	}
	return dto.Auth(*m), nil
}

// PutGenAuth mapped from table <auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenAuth(ctx context.Context, body dto.Auth) (err error) {
	m := model.Auth(body)
	u := receiver.q.Auth
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenAuth_Id mapped from table <auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenAuth_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.Auth
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenAuths mapped from table <auth>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenAuths(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.Auth{})).Request(parameter).Response(&[]model.Auth{})
	data = dto.Page(paginated)
	return
}

// PostGenProductType mapped from table <product_type>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductType(ctx context.Context, body dto.ProductType) (data int32, err error) {
	m := model.ProductType(body)
	u := receiver.q.ProductType
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenProductTypes mapped from table <product_type>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductTypes(ctx context.Context, body []dto.ProductType) (data []int32, err error) {
	list := make([]*model.ProductType, 0, len(body))
	for _, item := range body {
		m := model.ProductType(item)
		list = append(list, &m)
	}
	u := receiver.q.ProductType
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenProductType_Id mapped from table <product_type>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductType_Id(ctx context.Context, id int32) (data dto.ProductType, err error) {
	u := receiver.q.ProductType
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.ProductType{}, errors.WithStack(err)
	}
	return dto.ProductType(*m), nil
}

// PutGenProductType mapped from table <product_type>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenProductType(ctx context.Context, body dto.ProductType) (err error) {
	m := model.ProductType(body)
	u := receiver.q.ProductType
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenProductType_Id mapped from table <product_type>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenProductType_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.ProductType
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenProductTypes mapped from table <product_type>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductTypes(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.ProductType{})).Request(parameter).Response(&[]model.ProductType{})
	data = dto.Page(paginated)
	return
}

// PostGenProductTypeAttribute mapped from table <product_type_attribute>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductTypeAttribute(ctx context.Context, body dto.ProductTypeAttribute) (data int32, err error) {
	m := model.ProductTypeAttribute(body)
	u := receiver.q.ProductTypeAttribute
	err = errors.WithStack(u.WithContext(ctx).Create(&m))
	data = m.ID
	return
}

// PostGenProductTypeAttributes mapped from table <product_type_attribute>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PostGenProductTypeAttributes(ctx context.Context, body []dto.ProductTypeAttribute) (data []int32, err error) {
	list := make([]*model.ProductTypeAttribute, 0, len(body))
	for _, item := range body {
		m := model.ProductTypeAttribute(item)
		list = append(list, &m)
	}
	u := receiver.q.ProductTypeAttribute
	if err = errors.WithStack(u.WithContext(ctx).Create(list...)); err != nil {
		return
	}
	data = make([]int32, 0, len(list))
	for _, item := range list {
		data = append(data, item.ID)
	}
	return
}

// GetGenProductTypeAttribute_Id mapped from table <product_type_attribute>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductTypeAttribute_Id(ctx context.Context, id int32) (data dto.ProductTypeAttribute, err error) {
	u := receiver.q.ProductTypeAttribute
	m, err := u.WithContext(ctx).Where(u.ID.Eq(id)).First()
	if err != nil {
		return dto.ProductTypeAttribute{}, errors.WithStack(err)
	}
	return dto.ProductTypeAttribute(*m), nil
}

// PutGenProductTypeAttribute mapped from table <product_type_attribute>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) PutGenProductTypeAttribute(ctx context.Context, body dto.ProductTypeAttribute) (err error) {
	m := model.ProductTypeAttribute(body)
	u := receiver.q.ProductTypeAttribute
	_, err = u.WithContext(ctx).Where(u.ID.Eq(body.ID)).Updates(m)
	return errors.WithStack(err)
}

// DeleteGenProductTypeAttribute_Id mapped from table <product_type_attribute>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) DeleteGenProductTypeAttribute_Id(ctx context.Context, id int32) (err error) {
	u := receiver.q.ProductTypeAttribute
	_, err = u.WithContext(ctx).Where(u.ID.Eq(id)).Delete()
	return errors.WithStack(err)
}

// GetGenProductTypeAttributes mapped from table <product_type_attribute>
// Code generated by gorm.io/gen for go-doudou. DO NOT EDIT.
func (receiver *Testgggorm2Impl) GetGenProductTypeAttributes(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	paginated := receiver.pg.With(database.Db.Model(&model.ProductTypeAttribute{})).Request(parameter).Response(&[]model.ProductTypeAttribute{})
	data = dto.Page(paginated)
	return
}
