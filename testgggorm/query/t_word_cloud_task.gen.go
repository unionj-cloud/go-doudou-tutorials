// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen"
	"github.com/unionj-cloud/go-doudou/v2/toolkit/gormgen/field"

	"gorm.io/plugin/dbresolver"

	"testgggorm/model"
)

func newTWordCloudTask(db *gorm.DB, opts ...gormgen.DOOption) tWordCloudTask {
	_tWordCloudTask := tWordCloudTask{}

	_tWordCloudTask.tWordCloudTaskDo.UseDB(db, opts...)
	_tWordCloudTask.tWordCloudTaskDo.UseModel(&model.TWordCloudTask{})

	tableName := _tWordCloudTask.tWordCloudTaskDo.TableName()
	_tWordCloudTask.ALL = field.NewAsterisk(tableName)
	_tWordCloudTask.ID = field.NewInt32(tableName, "id")
	_tWordCloudTask.SrcURL = field.NewString(tableName, "src_url")
	_tWordCloudTask.ImgURL = field.NewString(tableName, "img_url")
	_tWordCloudTask.Lang = field.NewString(tableName, "lang")
	_tWordCloudTask.Top = field.NewInt32(tableName, "top")
	_tWordCloudTask.Status = field.NewInt32(tableName, "status")
	_tWordCloudTask.Error = field.NewString(tableName, "error")
	_tWordCloudTask.UserID = field.NewInt32(tableName, "user_id")
	_tWordCloudTask.CreateAt = field.NewTime(tableName, "create_at")
	_tWordCloudTask.UpdateAt = field.NewTime(tableName, "update_at")
	_tWordCloudTask.DeleteAt = field.NewTime(tableName, "delete_at")

	_tWordCloudTask.fillFieldMap()

	return _tWordCloudTask
}

type tWordCloudTask struct {
	tWordCloudTaskDo tWordCloudTaskDo

	ALL      field.Asterisk
	ID       field.Int32
	SrcURL   field.String // source file url 原文件链接
	ImgURL   field.String // word cloud image url 词云图链接
	Lang     field.String // text language 文本语种, zh中文, en英文
	Top      field.Int32  // take top frequent words into word cloud image 取词频前top的词 default is 0, mean no limit 默认值为0，表示不限制
	Status   field.Int32  // task status 任务状态, 0 waiting 未开始, 1 processing 进行中, 2 success 成功, 3 fail 失败
	Error    field.String // error message 错误信息
	UserID   field.Int32
	CreateAt field.Time
	UpdateAt field.Time
	DeleteAt field.Time

	fieldMap map[string]field.Expr
}

func (t tWordCloudTask) Table(newTableName string) *tWordCloudTask {
	t.tWordCloudTaskDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tWordCloudTask) As(alias string) *tWordCloudTask {
	t.tWordCloudTaskDo.DO = *(t.tWordCloudTaskDo.As(alias).(*gormgen.DO))
	return t.updateTableName(alias)
}

func (t *tWordCloudTask) updateTableName(table string) *tWordCloudTask {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.SrcURL = field.NewString(table, "src_url")
	t.ImgURL = field.NewString(table, "img_url")
	t.Lang = field.NewString(table, "lang")
	t.Top = field.NewInt32(table, "top")
	t.Status = field.NewInt32(table, "status")
	t.Error = field.NewString(table, "error")
	t.UserID = field.NewInt32(table, "user_id")
	t.CreateAt = field.NewTime(table, "create_at")
	t.UpdateAt = field.NewTime(table, "update_at")
	t.DeleteAt = field.NewTime(table, "delete_at")

	t.fillFieldMap()

	return t
}

func (t *tWordCloudTask) WithContext(ctx context.Context) ITWordCloudTaskDo {
	return t.tWordCloudTaskDo.WithContext(ctx)
}

func (t tWordCloudTask) TableName() string { return t.tWordCloudTaskDo.TableName() }

func (t tWordCloudTask) Alias() string { return t.tWordCloudTaskDo.Alias() }

func (t tWordCloudTask) Columns(cols ...field.Expr) gormgen.Columns {
	return t.tWordCloudTaskDo.Columns(cols...)
}

func (t *tWordCloudTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tWordCloudTask) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.ID
	t.fieldMap["src_url"] = t.SrcURL
	t.fieldMap["img_url"] = t.ImgURL
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["top"] = t.Top
	t.fieldMap["status"] = t.Status
	t.fieldMap["error"] = t.Error
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["create_at"] = t.CreateAt
	t.fieldMap["update_at"] = t.UpdateAt
	t.fieldMap["delete_at"] = t.DeleteAt
}

func (t tWordCloudTask) clone(db *gorm.DB) tWordCloudTask {
	t.tWordCloudTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tWordCloudTask) replaceDB(db *gorm.DB) tWordCloudTask {
	t.tWordCloudTaskDo.ReplaceDB(db)
	return t
}

type tWordCloudTaskDo struct{ gormgen.DO }

type ITWordCloudTaskDo interface {
	gormgen.SubQuery
	Debug() ITWordCloudTaskDo
	WithContext(ctx context.Context) ITWordCloudTaskDo
	WithResult(fc func(tx gormgen.Dao)) gormgen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITWordCloudTaskDo
	WriteDB() ITWordCloudTaskDo
	As(alias string) gormgen.Dao
	Session(config *gorm.Session) ITWordCloudTaskDo
	Columns(cols ...field.Expr) gormgen.Columns
	Clauses(conds ...clause.Expression) ITWordCloudTaskDo
	Not(conds ...gormgen.Condition) ITWordCloudTaskDo
	Or(conds ...gormgen.Condition) ITWordCloudTaskDo
	Select(conds ...field.Expr) ITWordCloudTaskDo
	Where(conds ...gormgen.Condition) ITWordCloudTaskDo
	Order(conds ...field.Expr) ITWordCloudTaskDo
	Distinct(cols ...field.Expr) ITWordCloudTaskDo
	Omit(cols ...field.Expr) ITWordCloudTaskDo
	Join(table schema.Tabler, on ...field.Expr) ITWordCloudTaskDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITWordCloudTaskDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITWordCloudTaskDo
	Group(cols ...field.Expr) ITWordCloudTaskDo
	Having(conds ...gormgen.Condition) ITWordCloudTaskDo
	Limit(limit int) ITWordCloudTaskDo
	Offset(offset int) ITWordCloudTaskDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITWordCloudTaskDo
	Unscoped() ITWordCloudTaskDo
	Create(values ...*model.TWordCloudTask) error
	CreateInBatches(values []*model.TWordCloudTask, batchSize int) error
	Save(values ...*model.TWordCloudTask) error
	First() (*model.TWordCloudTask, error)
	Take() (*model.TWordCloudTask, error)
	Last() (*model.TWordCloudTask, error)
	Find() ([]*model.TWordCloudTask, error)
	FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TWordCloudTask, err error)
	FindInBatches(result *[]*model.TWordCloudTask, batchSize int, fc func(tx gormgen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TWordCloudTask) (info gormgen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	Updates(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gormgen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gormgen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gormgen.ResultInfo, err error)
	UpdateFrom(q gormgen.SubQuery) gormgen.Dao
	Attrs(attrs ...field.AssignExpr) ITWordCloudTaskDo
	Assign(attrs ...field.AssignExpr) ITWordCloudTaskDo
	Joins(fields ...field.RelationField) ITWordCloudTaskDo
	Preload(fields ...field.RelationField) ITWordCloudTaskDo
	FirstOrInit() (*model.TWordCloudTask, error)
	FirstOrCreate() (*model.TWordCloudTask, error)
	FindByPage(offset int, limit int) (result []*model.TWordCloudTask, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITWordCloudTaskDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tWordCloudTaskDo) Debug() ITWordCloudTaskDo {
	return t.withDO(t.DO.Debug())
}

func (t tWordCloudTaskDo) WithContext(ctx context.Context) ITWordCloudTaskDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tWordCloudTaskDo) ReadDB() ITWordCloudTaskDo {
	return t.Clauses(dbresolver.Read)
}

func (t tWordCloudTaskDo) WriteDB() ITWordCloudTaskDo {
	return t.Clauses(dbresolver.Write)
}

func (t tWordCloudTaskDo) Session(config *gorm.Session) ITWordCloudTaskDo {
	return t.withDO(t.DO.Session(config))
}

func (t tWordCloudTaskDo) Clauses(conds ...clause.Expression) ITWordCloudTaskDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tWordCloudTaskDo) Returning(value interface{}, columns ...string) ITWordCloudTaskDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tWordCloudTaskDo) Not(conds ...gormgen.Condition) ITWordCloudTaskDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tWordCloudTaskDo) Or(conds ...gormgen.Condition) ITWordCloudTaskDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tWordCloudTaskDo) Select(conds ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tWordCloudTaskDo) Where(conds ...gormgen.Condition) ITWordCloudTaskDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tWordCloudTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITWordCloudTaskDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tWordCloudTaskDo) Order(conds ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tWordCloudTaskDo) Distinct(cols ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tWordCloudTaskDo) Omit(cols ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tWordCloudTaskDo) Join(table schema.Tabler, on ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tWordCloudTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tWordCloudTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tWordCloudTaskDo) Group(cols ...field.Expr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tWordCloudTaskDo) Having(conds ...gormgen.Condition) ITWordCloudTaskDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tWordCloudTaskDo) Limit(limit int) ITWordCloudTaskDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tWordCloudTaskDo) Offset(offset int) ITWordCloudTaskDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tWordCloudTaskDo) Scopes(funcs ...func(gormgen.Dao) gormgen.Dao) ITWordCloudTaskDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tWordCloudTaskDo) Unscoped() ITWordCloudTaskDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tWordCloudTaskDo) Create(values ...*model.TWordCloudTask) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tWordCloudTaskDo) CreateInBatches(values []*model.TWordCloudTask, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tWordCloudTaskDo) Save(values ...*model.TWordCloudTask) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tWordCloudTaskDo) First() (*model.TWordCloudTask, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TWordCloudTask), nil
	}
}

func (t tWordCloudTaskDo) Take() (*model.TWordCloudTask, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TWordCloudTask), nil
	}
}

func (t tWordCloudTaskDo) Last() (*model.TWordCloudTask, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TWordCloudTask), nil
	}
}

func (t tWordCloudTaskDo) Find() ([]*model.TWordCloudTask, error) {
	result, err := t.DO.Find()
	return result.([]*model.TWordCloudTask), err
}

func (t tWordCloudTaskDo) FindInBatch(batchSize int, fc func(tx gormgen.Dao, batch int) error) (results []*model.TWordCloudTask, err error) {
	buf := make([]*model.TWordCloudTask, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gormgen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tWordCloudTaskDo) FindInBatches(result *[]*model.TWordCloudTask, batchSize int, fc func(tx gormgen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tWordCloudTaskDo) Attrs(attrs ...field.AssignExpr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tWordCloudTaskDo) Assign(attrs ...field.AssignExpr) ITWordCloudTaskDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tWordCloudTaskDo) Joins(fields ...field.RelationField) ITWordCloudTaskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tWordCloudTaskDo) Preload(fields ...field.RelationField) ITWordCloudTaskDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tWordCloudTaskDo) FirstOrInit() (*model.TWordCloudTask, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TWordCloudTask), nil
	}
}

func (t tWordCloudTaskDo) FirstOrCreate() (*model.TWordCloudTask, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TWordCloudTask), nil
	}
}

func (t tWordCloudTaskDo) FindByPage(offset int, limit int) (result []*model.TWordCloudTask, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tWordCloudTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tWordCloudTaskDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tWordCloudTaskDo) Delete(models ...*model.TWordCloudTask) (result gormgen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tWordCloudTaskDo) withDO(do gormgen.Dao) *tWordCloudTaskDo {
	t.DO = *do.(*gormgen.DO)
	return t
}
