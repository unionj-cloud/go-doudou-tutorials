/**
* Generated by go-doudou v2.1.4.
* You can edit it as your need.
 */
package service

import (
	"context"

	"github.com/brianvoe/gofakeit/v6"
	"github.com/wubin1989/microcomponent/component-b/config"
	"github.com/wubin1989/microcomponent/component-b/dto"
	"google.golang.org/protobuf/types/known/emptypb"

	pb "github.com/wubin1989/microcomponent/component-b/transport/grpc"
)

var _ ComponentB = (*ComponentBImpl)(nil)

var _ pb.ComponentBServiceServer = (*ComponentBImpl)(nil)

type ComponentBImpl struct {
	pb.UnimplementedComponentBServiceServer

	conf *config.Config
}

func (receiver *ComponentBImpl) PostUser(ctx context.Context, user dto.GddUser) (data int32, err error) {
	var _result struct {
		Data int32
	}
	_ = gofakeit.Struct(&_result)
	return _result.Data, nil
}
func (receiver *ComponentBImpl) GetUser_Id(ctx context.Context, id int32) (data dto.GddUser, err error) {
	var _result struct {
		Data dto.GddUser
	}
	_ = gofakeit.Struct(&_result)
	return _result.Data, nil
}
func (receiver *ComponentBImpl) PutUser(ctx context.Context, user dto.GddUser) (re error) {
	var _result struct {
	}
	_ = gofakeit.Struct(&_result)
	return nil
}
func (receiver *ComponentBImpl) DeleteUser_Id(ctx context.Context, id int32) (re error) {
	var _result struct {
	}
	_ = gofakeit.Struct(&_result)
	return nil
}
func (receiver *ComponentBImpl) GetUsers(ctx context.Context, parameter dto.Parameter) (data dto.Page, err error) {
	var _result struct {
		Data dto.Page
	}
	_ = gofakeit.Struct(&_result)
	return _result.Data, nil
}

func NewComponentB(conf *config.Config) *ComponentBImpl {
	return &ComponentBImpl{
		conf: conf,
	}
}

func (receiver *ComponentBImpl) PostUserRpc(ctx context.Context, request *pb.GddUser) (*pb.PostUserRpcResponse, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentBImpl) GetUserIdRpc(ctx context.Context, request *pb.GetUserIdRpcRequest) (*pb.GddUser, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentBImpl) PutUserRpc(ctx context.Context, request *pb.GddUser) (*emptypb.Empty, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentBImpl) DeleteUserIdRpc(ctx context.Context, request *pb.DeleteUserIdRpcRequest) (*emptypb.Empty, error) {
	//TODO implement me
	panic("implement me")
}
func (receiver *ComponentBImpl) GetUsersRpc(ctx context.Context, request *pb.Parameter) (*pb.Page, error) {
	//TODO implement me
	panic("implement me")
}
