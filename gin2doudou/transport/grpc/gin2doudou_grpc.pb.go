// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Gin2DoudouServiceClient is the client API for Gin2DoudouService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Gin2DoudouServiceClient interface {
	// ApiV1Menus 创建数据
	ApiV1MenusRpc(ctx context.Context, in *SchemaMenu, opts ...grpc.CallOption) (*SchemaIDResult, error)
	// ApiV1PubLogin 用户登录
	ApiV1PubLoginRpc(ctx context.Context, in *SchemaLoginParam, opts ...grpc.CallOption) (*SchemaLoginTokenInfo, error)
	// ApiV1PubLoginExit 用户登出
	ApiV1PubLoginExitRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaStatusResult, error)
	// ApiV1PubRefreshtoken 刷新令牌
	ApiV1PubRefreshtokenRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaLoginTokenInfo, error)
	// ApiV1Roles 创建数据
	ApiV1RolesRpc(ctx context.Context, in *SchemaRole, opts ...grpc.CallOption) (*SchemaIDResult, error)
	// ApiV1Users 创建数据
	ApiV1UsersRpc(ctx context.Context, in *SchemaUser, opts ...grpc.CallOption) (*SchemaIDResult, error)
	// DeleteApiV1Menus_Id 删除数据
	DeleteApiV1MenusIdRpc(ctx context.Context, in *DeleteApiV1MenusIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error)
	// DeleteApiV1Roles_Id 删除数据
	DeleteApiV1RolesIdRpc(ctx context.Context, in *DeleteApiV1RolesIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error)
	// DeleteApiV1Users_Id 删除数据
	DeleteApiV1UsersIdRpc(ctx context.Context, in *DeleteApiV1UsersIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error)
	// GetApiV1Menus 查询数据
	GetApiV1MenusRpc(ctx context.Context, in *GetApiV1MenusRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	// GetApiV1Menus_Id 查询指定数据
	GetApiV1MenusIdRpc(ctx context.Context, in *GetApiV1MenusIdRpcRequest, opts ...grpc.CallOption) (*SchemaMenu, error)
	// GetApiV1Menustree 查询菜单树
	GetApiV1MenustreeRpc(ctx context.Context, in *GetApiV1MenustreeRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	// GetApiV1PubCurrentMenutree 查询当前用户菜单树
	GetApiV1PubCurrentMenutreeRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*anypb.Any, error)
	// GetApiV1PubCurrentUser 获取当前用户信息
	GetApiV1PubCurrentUserRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaUserLoginInfo, error)
	// GetApiV1PubLoginCaptcha 响应图形验证码
	GetApiV1PubLoginCaptchaRpc(ctx context.Context, in *GetApiV1PubLoginCaptchaRpcRequest, opts ...grpc.CallOption) (*GetApiV1PubLoginCaptchaRpcResponse, error)
	// GetApiV1PubLoginCaptchaid 获取验证码信息
	GetApiV1PubLoginCaptchaidRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaLoginCaptcha, error)
	// GetApiV1Roles 查询数据
	GetApiV1RolesRpc(ctx context.Context, in *GetApiV1RolesRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	// GetApiV1Roles_Id 查询指定数据
	GetApiV1RolesIdRpc(ctx context.Context, in *GetApiV1RolesIdRpcRequest, opts ...grpc.CallOption) (*SchemaRole, error)
	// GetApiV1Rolesselect 查询选择数据
	GetApiV1RolesselectRpc(ctx context.Context, in *GetApiV1RolesselectRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	// GetApiV1Users 查询数据
	GetApiV1UsersRpc(ctx context.Context, in *GetApiV1UsersRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	// GetApiV1Users_Id 查询指定数据
	GetApiV1UsersIdRpc(ctx context.Context, in *GetApiV1UsersIdRpcRequest, opts ...grpc.CallOption) (*SchemaUser, error)
	// PutApiV1Menus_Id 更新数据
	PutApiV1MenusIdRpc(ctx context.Context, in *PutApiV1MenusIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error)
	// PutApiV1PubCurrentPassword 更新个人密码
	PutApiV1PubCurrentPasswordRpc(ctx context.Context, in *SchemaUpdatePasswordParam, opts ...grpc.CallOption) (*SchemaStatusResult, error)
	// PutApiV1Roles_Id 更新数据
	PutApiV1RolesIdRpc(ctx context.Context, in *PutApiV1RolesIdRpcRequest, opts ...grpc.CallOption) (*SchemaRole, error)
	// PutApiV1Users_Id 更新数据
	PutApiV1UsersIdRpc(ctx context.Context, in *PutApiV1UsersIdRpcRequest, opts ...grpc.CallOption) (*SchemaUser, error)
}

type gin2DoudouServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGin2DoudouServiceClient(cc grpc.ClientConnInterface) Gin2DoudouServiceClient {
	return &gin2DoudouServiceClient{cc}
}

func (c *gin2DoudouServiceClient) ApiV1MenusRpc(ctx context.Context, in *SchemaMenu, opts ...grpc.CallOption) (*SchemaIDResult, error) {
	out := new(SchemaIDResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/ApiV1MenusRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) ApiV1PubLoginRpc(ctx context.Context, in *SchemaLoginParam, opts ...grpc.CallOption) (*SchemaLoginTokenInfo, error) {
	out := new(SchemaLoginTokenInfo)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/ApiV1PubLoginRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) ApiV1PubLoginExitRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaStatusResult, error) {
	out := new(SchemaStatusResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/ApiV1PubLoginExitRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) ApiV1PubRefreshtokenRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaLoginTokenInfo, error) {
	out := new(SchemaLoginTokenInfo)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/ApiV1PubRefreshtokenRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) ApiV1RolesRpc(ctx context.Context, in *SchemaRole, opts ...grpc.CallOption) (*SchemaIDResult, error) {
	out := new(SchemaIDResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/ApiV1RolesRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) ApiV1UsersRpc(ctx context.Context, in *SchemaUser, opts ...grpc.CallOption) (*SchemaIDResult, error) {
	out := new(SchemaIDResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/ApiV1UsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) DeleteApiV1MenusIdRpc(ctx context.Context, in *DeleteApiV1MenusIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error) {
	out := new(SchemaStatusResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/DeleteApiV1MenusIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) DeleteApiV1RolesIdRpc(ctx context.Context, in *DeleteApiV1RolesIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error) {
	out := new(SchemaStatusResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/DeleteApiV1RolesIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) DeleteApiV1UsersIdRpc(ctx context.Context, in *DeleteApiV1UsersIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error) {
	out := new(SchemaStatusResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/DeleteApiV1UsersIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1MenusRpc(ctx context.Context, in *GetApiV1MenusRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1MenusRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1MenusIdRpc(ctx context.Context, in *GetApiV1MenusIdRpcRequest, opts ...grpc.CallOption) (*SchemaMenu, error) {
	out := new(SchemaMenu)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1MenusIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1MenustreeRpc(ctx context.Context, in *GetApiV1MenustreeRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1MenustreeRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1PubCurrentMenutreeRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1PubCurrentMenutreeRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1PubCurrentUserRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaUserLoginInfo, error) {
	out := new(SchemaUserLoginInfo)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1PubCurrentUserRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1PubLoginCaptchaRpc(ctx context.Context, in *GetApiV1PubLoginCaptchaRpcRequest, opts ...grpc.CallOption) (*GetApiV1PubLoginCaptchaRpcResponse, error) {
	out := new(GetApiV1PubLoginCaptchaRpcResponse)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1PubLoginCaptchaRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1PubLoginCaptchaidRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SchemaLoginCaptcha, error) {
	out := new(SchemaLoginCaptcha)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1PubLoginCaptchaidRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1RolesRpc(ctx context.Context, in *GetApiV1RolesRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1RolesRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1RolesIdRpc(ctx context.Context, in *GetApiV1RolesIdRpcRequest, opts ...grpc.CallOption) (*SchemaRole, error) {
	out := new(SchemaRole)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1RolesIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1RolesselectRpc(ctx context.Context, in *GetApiV1RolesselectRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1RolesselectRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1UsersRpc(ctx context.Context, in *GetApiV1UsersRpcRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1UsersRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) GetApiV1UsersIdRpc(ctx context.Context, in *GetApiV1UsersIdRpcRequest, opts ...grpc.CallOption) (*SchemaUser, error) {
	out := new(SchemaUser)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/GetApiV1UsersIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) PutApiV1MenusIdRpc(ctx context.Context, in *PutApiV1MenusIdRpcRequest, opts ...grpc.CallOption) (*SchemaStatusResult, error) {
	out := new(SchemaStatusResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/PutApiV1MenusIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) PutApiV1PubCurrentPasswordRpc(ctx context.Context, in *SchemaUpdatePasswordParam, opts ...grpc.CallOption) (*SchemaStatusResult, error) {
	out := new(SchemaStatusResult)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/PutApiV1PubCurrentPasswordRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) PutApiV1RolesIdRpc(ctx context.Context, in *PutApiV1RolesIdRpcRequest, opts ...grpc.CallOption) (*SchemaRole, error) {
	out := new(SchemaRole)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/PutApiV1RolesIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gin2DoudouServiceClient) PutApiV1UsersIdRpc(ctx context.Context, in *PutApiV1UsersIdRpcRequest, opts ...grpc.CallOption) (*SchemaUser, error) {
	out := new(SchemaUser)
	err := c.cc.Invoke(ctx, "/gin_2_doudou.Gin2DoudouService/PutApiV1UsersIdRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Gin2DoudouServiceServer is the server API for Gin2DoudouService service.
// All implementations must embed UnimplementedGin2DoudouServiceServer
// for forward compatibility
type Gin2DoudouServiceServer interface {
	// ApiV1Menus 创建数据
	ApiV1MenusRpc(context.Context, *SchemaMenu) (*SchemaIDResult, error)
	// ApiV1PubLogin 用户登录
	ApiV1PubLoginRpc(context.Context, *SchemaLoginParam) (*SchemaLoginTokenInfo, error)
	// ApiV1PubLoginExit 用户登出
	ApiV1PubLoginExitRpc(context.Context, *emptypb.Empty) (*SchemaStatusResult, error)
	// ApiV1PubRefreshtoken 刷新令牌
	ApiV1PubRefreshtokenRpc(context.Context, *emptypb.Empty) (*SchemaLoginTokenInfo, error)
	// ApiV1Roles 创建数据
	ApiV1RolesRpc(context.Context, *SchemaRole) (*SchemaIDResult, error)
	// ApiV1Users 创建数据
	ApiV1UsersRpc(context.Context, *SchemaUser) (*SchemaIDResult, error)
	// DeleteApiV1Menus_Id 删除数据
	DeleteApiV1MenusIdRpc(context.Context, *DeleteApiV1MenusIdRpcRequest) (*SchemaStatusResult, error)
	// DeleteApiV1Roles_Id 删除数据
	DeleteApiV1RolesIdRpc(context.Context, *DeleteApiV1RolesIdRpcRequest) (*SchemaStatusResult, error)
	// DeleteApiV1Users_Id 删除数据
	DeleteApiV1UsersIdRpc(context.Context, *DeleteApiV1UsersIdRpcRequest) (*SchemaStatusResult, error)
	// GetApiV1Menus 查询数据
	GetApiV1MenusRpc(context.Context, *GetApiV1MenusRpcRequest) (*anypb.Any, error)
	// GetApiV1Menus_Id 查询指定数据
	GetApiV1MenusIdRpc(context.Context, *GetApiV1MenusIdRpcRequest) (*SchemaMenu, error)
	// GetApiV1Menustree 查询菜单树
	GetApiV1MenustreeRpc(context.Context, *GetApiV1MenustreeRpcRequest) (*anypb.Any, error)
	// GetApiV1PubCurrentMenutree 查询当前用户菜单树
	GetApiV1PubCurrentMenutreeRpc(context.Context, *emptypb.Empty) (*anypb.Any, error)
	// GetApiV1PubCurrentUser 获取当前用户信息
	GetApiV1PubCurrentUserRpc(context.Context, *emptypb.Empty) (*SchemaUserLoginInfo, error)
	// GetApiV1PubLoginCaptcha 响应图形验证码
	GetApiV1PubLoginCaptchaRpc(context.Context, *GetApiV1PubLoginCaptchaRpcRequest) (*GetApiV1PubLoginCaptchaRpcResponse, error)
	// GetApiV1PubLoginCaptchaid 获取验证码信息
	GetApiV1PubLoginCaptchaidRpc(context.Context, *emptypb.Empty) (*SchemaLoginCaptcha, error)
	// GetApiV1Roles 查询数据
	GetApiV1RolesRpc(context.Context, *GetApiV1RolesRpcRequest) (*anypb.Any, error)
	// GetApiV1Roles_Id 查询指定数据
	GetApiV1RolesIdRpc(context.Context, *GetApiV1RolesIdRpcRequest) (*SchemaRole, error)
	// GetApiV1Rolesselect 查询选择数据
	GetApiV1RolesselectRpc(context.Context, *GetApiV1RolesselectRpcRequest) (*anypb.Any, error)
	// GetApiV1Users 查询数据
	GetApiV1UsersRpc(context.Context, *GetApiV1UsersRpcRequest) (*anypb.Any, error)
	// GetApiV1Users_Id 查询指定数据
	GetApiV1UsersIdRpc(context.Context, *GetApiV1UsersIdRpcRequest) (*SchemaUser, error)
	// PutApiV1Menus_Id 更新数据
	PutApiV1MenusIdRpc(context.Context, *PutApiV1MenusIdRpcRequest) (*SchemaStatusResult, error)
	// PutApiV1PubCurrentPassword 更新个人密码
	PutApiV1PubCurrentPasswordRpc(context.Context, *SchemaUpdatePasswordParam) (*SchemaStatusResult, error)
	// PutApiV1Roles_Id 更新数据
	PutApiV1RolesIdRpc(context.Context, *PutApiV1RolesIdRpcRequest) (*SchemaRole, error)
	// PutApiV1Users_Id 更新数据
	PutApiV1UsersIdRpc(context.Context, *PutApiV1UsersIdRpcRequest) (*SchemaUser, error)
	mustEmbedUnimplementedGin2DoudouServiceServer()
}

// UnimplementedGin2DoudouServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGin2DoudouServiceServer struct {
}

func (UnimplementedGin2DoudouServiceServer) ApiV1MenusRpc(context.Context, *SchemaMenu) (*SchemaIDResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1MenusRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) ApiV1PubLoginRpc(context.Context, *SchemaLoginParam) (*SchemaLoginTokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1PubLoginRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) ApiV1PubLoginExitRpc(context.Context, *emptypb.Empty) (*SchemaStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1PubLoginExitRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) ApiV1PubRefreshtokenRpc(context.Context, *emptypb.Empty) (*SchemaLoginTokenInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1PubRefreshtokenRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) ApiV1RolesRpc(context.Context, *SchemaRole) (*SchemaIDResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1RolesRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) ApiV1UsersRpc(context.Context, *SchemaUser) (*SchemaIDResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApiV1UsersRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) DeleteApiV1MenusIdRpc(context.Context, *DeleteApiV1MenusIdRpcRequest) (*SchemaStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiV1MenusIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) DeleteApiV1RolesIdRpc(context.Context, *DeleteApiV1RolesIdRpcRequest) (*SchemaStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiV1RolesIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) DeleteApiV1UsersIdRpc(context.Context, *DeleteApiV1UsersIdRpcRequest) (*SchemaStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiV1UsersIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1MenusRpc(context.Context, *GetApiV1MenusRpcRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1MenusRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1MenusIdRpc(context.Context, *GetApiV1MenusIdRpcRequest) (*SchemaMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1MenusIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1MenustreeRpc(context.Context, *GetApiV1MenustreeRpcRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1MenustreeRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1PubCurrentMenutreeRpc(context.Context, *emptypb.Empty) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1PubCurrentMenutreeRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1PubCurrentUserRpc(context.Context, *emptypb.Empty) (*SchemaUserLoginInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1PubCurrentUserRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1PubLoginCaptchaRpc(context.Context, *GetApiV1PubLoginCaptchaRpcRequest) (*GetApiV1PubLoginCaptchaRpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1PubLoginCaptchaRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1PubLoginCaptchaidRpc(context.Context, *emptypb.Empty) (*SchemaLoginCaptcha, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1PubLoginCaptchaidRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1RolesRpc(context.Context, *GetApiV1RolesRpcRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1RolesRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1RolesIdRpc(context.Context, *GetApiV1RolesIdRpcRequest) (*SchemaRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1RolesIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1RolesselectRpc(context.Context, *GetApiV1RolesselectRpcRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1RolesselectRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1UsersRpc(context.Context, *GetApiV1UsersRpcRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1UsersRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) GetApiV1UsersIdRpc(context.Context, *GetApiV1UsersIdRpcRequest) (*SchemaUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiV1UsersIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) PutApiV1MenusIdRpc(context.Context, *PutApiV1MenusIdRpcRequest) (*SchemaStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutApiV1MenusIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) PutApiV1PubCurrentPasswordRpc(context.Context, *SchemaUpdatePasswordParam) (*SchemaStatusResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutApiV1PubCurrentPasswordRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) PutApiV1RolesIdRpc(context.Context, *PutApiV1RolesIdRpcRequest) (*SchemaRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutApiV1RolesIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) PutApiV1UsersIdRpc(context.Context, *PutApiV1UsersIdRpcRequest) (*SchemaUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutApiV1UsersIdRpc not implemented")
}
func (UnimplementedGin2DoudouServiceServer) mustEmbedUnimplementedGin2DoudouServiceServer() {}

// UnsafeGin2DoudouServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Gin2DoudouServiceServer will
// result in compilation errors.
type UnsafeGin2DoudouServiceServer interface {
	mustEmbedUnimplementedGin2DoudouServiceServer()
}

func RegisterGin2DoudouServiceServer(s grpc.ServiceRegistrar, srv Gin2DoudouServiceServer) {
	s.RegisterService(&Gin2DoudouService_ServiceDesc, srv)
}

func _Gin2DoudouService_ApiV1MenusRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaMenu)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).ApiV1MenusRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/ApiV1MenusRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).ApiV1MenusRpc(ctx, req.(*SchemaMenu))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_ApiV1PubLoginRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaLoginParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).ApiV1PubLoginRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/ApiV1PubLoginRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).ApiV1PubLoginRpc(ctx, req.(*SchemaLoginParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_ApiV1PubLoginExitRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).ApiV1PubLoginExitRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/ApiV1PubLoginExitRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).ApiV1PubLoginExitRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_ApiV1PubRefreshtokenRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).ApiV1PubRefreshtokenRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/ApiV1PubRefreshtokenRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).ApiV1PubRefreshtokenRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_ApiV1RolesRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).ApiV1RolesRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/ApiV1RolesRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).ApiV1RolesRpc(ctx, req.(*SchemaRole))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_ApiV1UsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).ApiV1UsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/ApiV1UsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).ApiV1UsersRpc(ctx, req.(*SchemaUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_DeleteApiV1MenusIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiV1MenusIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).DeleteApiV1MenusIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/DeleteApiV1MenusIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).DeleteApiV1MenusIdRpc(ctx, req.(*DeleteApiV1MenusIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_DeleteApiV1RolesIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiV1RolesIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).DeleteApiV1RolesIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/DeleteApiV1RolesIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).DeleteApiV1RolesIdRpc(ctx, req.(*DeleteApiV1RolesIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_DeleteApiV1UsersIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApiV1UsersIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).DeleteApiV1UsersIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/DeleteApiV1UsersIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).DeleteApiV1UsersIdRpc(ctx, req.(*DeleteApiV1UsersIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1MenusRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1MenusRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1MenusRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1MenusRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1MenusRpc(ctx, req.(*GetApiV1MenusRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1MenusIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1MenusIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1MenusIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1MenusIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1MenusIdRpc(ctx, req.(*GetApiV1MenusIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1MenustreeRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1MenustreeRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1MenustreeRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1MenustreeRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1MenustreeRpc(ctx, req.(*GetApiV1MenustreeRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1PubCurrentMenutreeRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubCurrentMenutreeRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1PubCurrentMenutreeRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubCurrentMenutreeRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1PubCurrentUserRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubCurrentUserRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1PubCurrentUserRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubCurrentUserRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1PubLoginCaptchaRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1PubLoginCaptchaRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubLoginCaptchaRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1PubLoginCaptchaRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubLoginCaptchaRpc(ctx, req.(*GetApiV1PubLoginCaptchaRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1PubLoginCaptchaidRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubLoginCaptchaidRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1PubLoginCaptchaidRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1PubLoginCaptchaidRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1RolesRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1RolesRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1RolesRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1RolesRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1RolesRpc(ctx, req.(*GetApiV1RolesRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1RolesIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1RolesIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1RolesIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1RolesIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1RolesIdRpc(ctx, req.(*GetApiV1RolesIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1RolesselectRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1RolesselectRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1RolesselectRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1RolesselectRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1RolesselectRpc(ctx, req.(*GetApiV1RolesselectRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1UsersRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1UsersRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1UsersRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1UsersRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1UsersRpc(ctx, req.(*GetApiV1UsersRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_GetApiV1UsersIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApiV1UsersIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).GetApiV1UsersIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/GetApiV1UsersIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).GetApiV1UsersIdRpc(ctx, req.(*GetApiV1UsersIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_PutApiV1MenusIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutApiV1MenusIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).PutApiV1MenusIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/PutApiV1MenusIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).PutApiV1MenusIdRpc(ctx, req.(*PutApiV1MenusIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_PutApiV1PubCurrentPasswordRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaUpdatePasswordParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).PutApiV1PubCurrentPasswordRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/PutApiV1PubCurrentPasswordRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).PutApiV1PubCurrentPasswordRpc(ctx, req.(*SchemaUpdatePasswordParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_PutApiV1RolesIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutApiV1RolesIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).PutApiV1RolesIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/PutApiV1RolesIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).PutApiV1RolesIdRpc(ctx, req.(*PutApiV1RolesIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gin2DoudouService_PutApiV1UsersIdRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutApiV1UsersIdRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Gin2DoudouServiceServer).PutApiV1UsersIdRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gin_2_doudou.Gin2DoudouService/PutApiV1UsersIdRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Gin2DoudouServiceServer).PutApiV1UsersIdRpc(ctx, req.(*PutApiV1UsersIdRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gin2DoudouService_ServiceDesc is the grpc.ServiceDesc for Gin2DoudouService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gin2DoudouService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gin_2_doudou.Gin2DoudouService",
	HandlerType: (*Gin2DoudouServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApiV1MenusRpc",
			Handler:    _Gin2DoudouService_ApiV1MenusRpc_Handler,
		},
		{
			MethodName: "ApiV1PubLoginRpc",
			Handler:    _Gin2DoudouService_ApiV1PubLoginRpc_Handler,
		},
		{
			MethodName: "ApiV1PubLoginExitRpc",
			Handler:    _Gin2DoudouService_ApiV1PubLoginExitRpc_Handler,
		},
		{
			MethodName: "ApiV1PubRefreshtokenRpc",
			Handler:    _Gin2DoudouService_ApiV1PubRefreshtokenRpc_Handler,
		},
		{
			MethodName: "ApiV1RolesRpc",
			Handler:    _Gin2DoudouService_ApiV1RolesRpc_Handler,
		},
		{
			MethodName: "ApiV1UsersRpc",
			Handler:    _Gin2DoudouService_ApiV1UsersRpc_Handler,
		},
		{
			MethodName: "DeleteApiV1MenusIdRpc",
			Handler:    _Gin2DoudouService_DeleteApiV1MenusIdRpc_Handler,
		},
		{
			MethodName: "DeleteApiV1RolesIdRpc",
			Handler:    _Gin2DoudouService_DeleteApiV1RolesIdRpc_Handler,
		},
		{
			MethodName: "DeleteApiV1UsersIdRpc",
			Handler:    _Gin2DoudouService_DeleteApiV1UsersIdRpc_Handler,
		},
		{
			MethodName: "GetApiV1MenusRpc",
			Handler:    _Gin2DoudouService_GetApiV1MenusRpc_Handler,
		},
		{
			MethodName: "GetApiV1MenusIdRpc",
			Handler:    _Gin2DoudouService_GetApiV1MenusIdRpc_Handler,
		},
		{
			MethodName: "GetApiV1MenustreeRpc",
			Handler:    _Gin2DoudouService_GetApiV1MenustreeRpc_Handler,
		},
		{
			MethodName: "GetApiV1PubCurrentMenutreeRpc",
			Handler:    _Gin2DoudouService_GetApiV1PubCurrentMenutreeRpc_Handler,
		},
		{
			MethodName: "GetApiV1PubCurrentUserRpc",
			Handler:    _Gin2DoudouService_GetApiV1PubCurrentUserRpc_Handler,
		},
		{
			MethodName: "GetApiV1PubLoginCaptchaRpc",
			Handler:    _Gin2DoudouService_GetApiV1PubLoginCaptchaRpc_Handler,
		},
		{
			MethodName: "GetApiV1PubLoginCaptchaidRpc",
			Handler:    _Gin2DoudouService_GetApiV1PubLoginCaptchaidRpc_Handler,
		},
		{
			MethodName: "GetApiV1RolesRpc",
			Handler:    _Gin2DoudouService_GetApiV1RolesRpc_Handler,
		},
		{
			MethodName: "GetApiV1RolesIdRpc",
			Handler:    _Gin2DoudouService_GetApiV1RolesIdRpc_Handler,
		},
		{
			MethodName: "GetApiV1RolesselectRpc",
			Handler:    _Gin2DoudouService_GetApiV1RolesselectRpc_Handler,
		},
		{
			MethodName: "GetApiV1UsersRpc",
			Handler:    _Gin2DoudouService_GetApiV1UsersRpc_Handler,
		},
		{
			MethodName: "GetApiV1UsersIdRpc",
			Handler:    _Gin2DoudouService_GetApiV1UsersIdRpc_Handler,
		},
		{
			MethodName: "PutApiV1MenusIdRpc",
			Handler:    _Gin2DoudouService_PutApiV1MenusIdRpc_Handler,
		},
		{
			MethodName: "PutApiV1PubCurrentPasswordRpc",
			Handler:    _Gin2DoudouService_PutApiV1PubCurrentPasswordRpc_Handler,
		},
		{
			MethodName: "PutApiV1RolesIdRpc",
			Handler:    _Gin2DoudouService_PutApiV1RolesIdRpc_Handler,
		},
		{
			MethodName: "PutApiV1UsersIdRpc",
			Handler:    _Gin2DoudouService_PutApiV1UsersIdRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/gin2doudou.proto",
}
