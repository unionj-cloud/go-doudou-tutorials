/**
* Generated by go-doudou v2.0.5.
* Don't edit!
 */
package client

import (
	"context"
	"gin2doudou/dto"

	"github.com/go-resty/resty/v2"
)

type Options struct {
	GzipReqBody bool
}

type IGin2DoudouClient interface {
	ApiV1Menus(ctx context.Context, _headers map[string]string, bodyJSON dto.SchemaMenu, options Options) (_resp *resty.Response, ret dto.SchemaIDResult, err error)
	ApiV1PubLogin(ctx context.Context, _headers map[string]string, bodyJSON dto.SchemaLoginParam, options Options) (_resp *resty.Response, ret dto.SchemaLoginTokenInfo, err error)
	ApiV1PubLoginExit(ctx context.Context, _headers map[string]string, options Options) (_resp *resty.Response, ret dto.SchemaStatusResult, err error)
	ApiV1PubRefreshtoken(ctx context.Context, _headers map[string]string, options Options) (_resp *resty.Response, ret dto.SchemaLoginTokenInfo, err error)
	ApiV1Roles(ctx context.Context, _headers map[string]string, bodyJSON dto.SchemaRole, options Options) (_resp *resty.Response, ret dto.SchemaIDResult, err error)
	ApiV1Users(ctx context.Context, _headers map[string]string, bodyJSON dto.SchemaUser, options Options) (_resp *resty.Response, ret dto.SchemaIDResult, err error)
	DeleteApiV1Menus_Id(ctx context.Context, _headers map[string]string, id int, options Options) (_resp *resty.Response, ret dto.SchemaStatusResult, err error)
	DeleteApiV1Roles_Id(ctx context.Context, _headers map[string]string, id int, options Options) (_resp *resty.Response, ret dto.SchemaStatusResult, err error)
	DeleteApiV1Users_Id(ctx context.Context, _headers map[string]string, id int, options Options) (_resp *resty.Response, ret dto.SchemaStatusResult, err error)
	GetApiV1Menus(ctx context.Context, _headers map[string]string, current int, pageSize int, queryValue *string, status *int, isShow *int, parentID *int, options Options) (_resp *resty.Response, ret interface{}, err error)
	GetApiV1Menus_Id(ctx context.Context, _headers map[string]string, id int, options Options) (_resp *resty.Response, ret dto.SchemaMenu, err error)
	GetApiV1Menustree(ctx context.Context, _headers map[string]string, status *int, parentID *int, options Options) (_resp *resty.Response, ret interface{}, err error)
	GetApiV1PubCurrentMenutree(ctx context.Context, _headers map[string]string, options Options) (_resp *resty.Response, ret interface{}, err error)
	GetApiV1PubCurrentUser(ctx context.Context, _headers map[string]string, options Options) (_resp *resty.Response, ret dto.SchemaUserLoginInfo, err error)
	GetApiV1PubLoginCaptcha(ctx context.Context, _headers map[string]string, id string, reload *string, options Options) (_resp *resty.Response, ret string, err error)
	GetApiV1PubLoginCaptchaid(ctx context.Context, _headers map[string]string, options Options) (_resp *resty.Response, ret dto.SchemaLoginCaptcha, err error)
	GetApiV1Roles(ctx context.Context, _headers map[string]string, current int, pageSize int, queryValue *string, status *int, options Options) (_resp *resty.Response, ret interface{}, err error)
	GetApiV1Roles_Id(ctx context.Context, _headers map[string]string, id int, options Options) (_resp *resty.Response, ret dto.SchemaRole, err error)
	GetApiV1Rolesselect(ctx context.Context, _headers map[string]string, queryValue *string, status *int, options Options) (_resp *resty.Response, ret interface{}, err error)
	GetApiV1Users(ctx context.Context, _headers map[string]string, current int, pageSize int, queryValue *string, roleIDs *string, status *int, options Options) (_resp *resty.Response, ret interface{}, err error)
	GetApiV1Users_Id(ctx context.Context, _headers map[string]string, id int, options Options) (_resp *resty.Response, ret dto.SchemaUser, err error)
	PutApiV1Menus_Id(ctx context.Context, _headers map[string]string, id int, bodyJSON dto.SchemaMenu, options Options) (_resp *resty.Response, ret dto.SchemaStatusResult, err error)
	PutApiV1PubCurrentPassword(ctx context.Context, _headers map[string]string, bodyJSON dto.SchemaUpdatePasswordParam, options Options) (_resp *resty.Response, ret dto.SchemaStatusResult, err error)
	PutApiV1Roles_Id(ctx context.Context, _headers map[string]string, id int, bodyJSON dto.SchemaRole, options Options) (_resp *resty.Response, ret dto.SchemaRole, err error)
	PutApiV1Users_Id(ctx context.Context, _headers map[string]string, id int, bodyJSON dto.SchemaUser, options Options) (_resp *resty.Response, ret dto.SchemaUser, err error)
}
