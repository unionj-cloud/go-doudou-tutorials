/**
* Generated by go-doudou v2.1.8.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	"net/http"
	pb "testhttp2grpc/transport/grpc"

	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"google.golang.org/protobuf/types/known/emptypb"
)

type Testhttp2GrpcHttp2Grpc struct {
	testhttp2Grpc pb.Testhttp2GrpcServiceServer
}

func (receiver *Testhttp2GrpcHttp2Grpc) PutUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		user = new(pb.GddUser)
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(user); _err != nil {
		rest.PanicBadRequestErr(_err)
	}
	if _err := rest.ValidateStruct(user); _err != nil {
		rest.PanicBadRequestErr(_err)
	}
	_, re = receiver.testhttp2Grpc.PutUserRpc(
		ctx,
		user,
	)
	if re != nil {
		panic(re)
	}
	if _err := json.NewEncoder(_writer).Encode(struct{}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testhttp2GrpcHttp2Grpc) GetUsers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx       context.Context
		parameter = new(pb.Parameter)
		data      = new(pb.Page)
		err       error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.PanicBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(parameter, _req.Form); _err != nil {
		rest.PanicBadRequestErr(_err)
	}
	if _err := rest.ValidateStruct(parameter); _err != nil {
		rest.PanicBadRequestErr(_err)
	}
	data, err = receiver.testhttp2Grpc.GetUsersRpc(
		ctx,
		parameter,
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(data); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *Testhttp2GrpcHttp2Grpc) GetDict(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		data = new(pb.DictResp)
		err  error
	)
	ctx = _req.Context()
	data, err = receiver.testhttp2Grpc.GetDictRpc(
		ctx,
		new(emptypb.Empty),
	)
	if err != nil {
		panic(err)
	}
	if _err := json.NewEncoder(_writer).Encode(data); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewTesthttp2GrpcHttp2Grpc(testhttp2Grpc pb.Testhttp2GrpcServiceServer) Testhttp2GrpcHandler {
	return &Testhttp2GrpcHttp2Grpc{
		testhttp2Grpc,
	}
}
