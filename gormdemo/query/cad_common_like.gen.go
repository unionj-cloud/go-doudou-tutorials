// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormdemo/model"
)

func newCadCommonLike(db *gorm.DB, opts ...gen.DOOption) cadCommonLike {
	_cadCommonLike := cadCommonLike{}

	_cadCommonLike.cadCommonLikeDo.UseDB(db, opts...)
	_cadCommonLike.cadCommonLikeDo.UseModel(&model.CadCommonLike{})

	tableName := _cadCommonLike.cadCommonLikeDo.TableName()
	_cadCommonLike.ALL = field.NewAsterisk(tableName)
	_cadCommonLike.ID = field.NewString(tableName, "id")
	_cadCommonLike.RelateBusinessTable = field.NewString(tableName, "relate_business_table")
	_cadCommonLike.RelateBusinessID = field.NewString(tableName, "relate_business_id")
	_cadCommonLike.CreateTime = field.NewTime(tableName, "create_time")
	_cadCommonLike.CreateBy = field.NewString(tableName, "create_by")
	_cadCommonLike.SysOrgCode = field.NewString(tableName, "sys_org_code")

	_cadCommonLike.fillFieldMap()

	return _cadCommonLike
}

type cadCommonLike struct {
	cadCommonLikeDo cadCommonLikeDo

	ALL                 field.Asterisk
	ID                  field.String
	RelateBusinessTable field.String
	RelateBusinessID    field.String
	CreateTime          field.Time
	CreateBy            field.String
	SysOrgCode          field.String

	fieldMap map[string]field.Expr
}

func (c cadCommonLike) Table(newTableName string) *cadCommonLike {
	c.cadCommonLikeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cadCommonLike) As(alias string) *cadCommonLike {
	c.cadCommonLikeDo.DO = *(c.cadCommonLikeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cadCommonLike) updateTableName(table string) *cadCommonLike {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.RelateBusinessTable = field.NewString(table, "relate_business_table")
	c.RelateBusinessID = field.NewString(table, "relate_business_id")
	c.CreateTime = field.NewTime(table, "create_time")
	c.CreateBy = field.NewString(table, "create_by")
	c.SysOrgCode = field.NewString(table, "sys_org_code")

	c.fillFieldMap()

	return c
}

func (c *cadCommonLike) WithContext(ctx context.Context) ICadCommonLikeDo {
	return c.cadCommonLikeDo.WithContext(ctx)
}

func (c cadCommonLike) TableName() string { return c.cadCommonLikeDo.TableName() }

func (c cadCommonLike) Alias() string { return c.cadCommonLikeDo.Alias() }

func (c cadCommonLike) Columns(cols ...field.Expr) gen.Columns {
	return c.cadCommonLikeDo.Columns(cols...)
}

func (c *cadCommonLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cadCommonLike) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["relate_business_table"] = c.RelateBusinessTable
	c.fieldMap["relate_business_id"] = c.RelateBusinessID
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["create_by"] = c.CreateBy
	c.fieldMap["sys_org_code"] = c.SysOrgCode
}

func (c cadCommonLike) clone(db *gorm.DB) cadCommonLike {
	c.cadCommonLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cadCommonLike) replaceDB(db *gorm.DB) cadCommonLike {
	c.cadCommonLikeDo.ReplaceDB(db)
	return c
}

type cadCommonLikeDo struct{ gen.DO }

type ICadCommonLikeDo interface {
	gen.SubQuery
	Debug() ICadCommonLikeDo
	WithContext(ctx context.Context) ICadCommonLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICadCommonLikeDo
	WriteDB() ICadCommonLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICadCommonLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICadCommonLikeDo
	Not(conds ...gen.Condition) ICadCommonLikeDo
	Or(conds ...gen.Condition) ICadCommonLikeDo
	Select(conds ...field.Expr) ICadCommonLikeDo
	Where(conds ...gen.Condition) ICadCommonLikeDo
	Order(conds ...field.Expr) ICadCommonLikeDo
	Distinct(cols ...field.Expr) ICadCommonLikeDo
	Omit(cols ...field.Expr) ICadCommonLikeDo
	Join(table schema.Tabler, on ...field.Expr) ICadCommonLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonLikeDo
	Group(cols ...field.Expr) ICadCommonLikeDo
	Having(conds ...gen.Condition) ICadCommonLikeDo
	Limit(limit int) ICadCommonLikeDo
	Offset(offset int) ICadCommonLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonLikeDo
	Unscoped() ICadCommonLikeDo
	Create(values ...*model.CadCommonLike) error
	CreateInBatches(values []*model.CadCommonLike, batchSize int) error
	Save(values ...*model.CadCommonLike) error
	First() (*model.CadCommonLike, error)
	Take() (*model.CadCommonLike, error)
	Last() (*model.CadCommonLike, error)
	Find() ([]*model.CadCommonLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonLike, err error)
	FindInBatches(result *[]*model.CadCommonLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CadCommonLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICadCommonLikeDo
	Assign(attrs ...field.AssignExpr) ICadCommonLikeDo
	Joins(fields ...field.RelationField) ICadCommonLikeDo
	Preload(fields ...field.RelationField) ICadCommonLikeDo
	FirstOrInit() (*model.CadCommonLike, error)
	FirstOrCreate() (*model.CadCommonLike, error)
	FindByPage(offset int, limit int) (result []*model.CadCommonLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICadCommonLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cadCommonLikeDo) Debug() ICadCommonLikeDo {
	return c.withDO(c.DO.Debug())
}

func (c cadCommonLikeDo) WithContext(ctx context.Context) ICadCommonLikeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cadCommonLikeDo) ReadDB() ICadCommonLikeDo {
	return c.Clauses(dbresolver.Read)
}

func (c cadCommonLikeDo) WriteDB() ICadCommonLikeDo {
	return c.Clauses(dbresolver.Write)
}

func (c cadCommonLikeDo) Session(config *gorm.Session) ICadCommonLikeDo {
	return c.withDO(c.DO.Session(config))
}

func (c cadCommonLikeDo) Clauses(conds ...clause.Expression) ICadCommonLikeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cadCommonLikeDo) Returning(value interface{}, columns ...string) ICadCommonLikeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cadCommonLikeDo) Not(conds ...gen.Condition) ICadCommonLikeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cadCommonLikeDo) Or(conds ...gen.Condition) ICadCommonLikeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cadCommonLikeDo) Select(conds ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cadCommonLikeDo) Where(conds ...gen.Condition) ICadCommonLikeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cadCommonLikeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ICadCommonLikeDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cadCommonLikeDo) Order(conds ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cadCommonLikeDo) Distinct(cols ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cadCommonLikeDo) Omit(cols ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cadCommonLikeDo) Join(table schema.Tabler, on ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cadCommonLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cadCommonLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cadCommonLikeDo) Group(cols ...field.Expr) ICadCommonLikeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cadCommonLikeDo) Having(conds ...gen.Condition) ICadCommonLikeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cadCommonLikeDo) Limit(limit int) ICadCommonLikeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cadCommonLikeDo) Offset(offset int) ICadCommonLikeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cadCommonLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICadCommonLikeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cadCommonLikeDo) Unscoped() ICadCommonLikeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cadCommonLikeDo) Create(values ...*model.CadCommonLike) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cadCommonLikeDo) CreateInBatches(values []*model.CadCommonLike, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cadCommonLikeDo) Save(values ...*model.CadCommonLike) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cadCommonLikeDo) First() (*model.CadCommonLike, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonLike), nil
	}
}

func (c cadCommonLikeDo) Take() (*model.CadCommonLike, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonLike), nil
	}
}

func (c cadCommonLikeDo) Last() (*model.CadCommonLike, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonLike), nil
	}
}

func (c cadCommonLikeDo) Find() ([]*model.CadCommonLike, error) {
	result, err := c.DO.Find()
	return result.([]*model.CadCommonLike), err
}

func (c cadCommonLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CadCommonLike, err error) {
	buf := make([]*model.CadCommonLike, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cadCommonLikeDo) FindInBatches(result *[]*model.CadCommonLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cadCommonLikeDo) Attrs(attrs ...field.AssignExpr) ICadCommonLikeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cadCommonLikeDo) Assign(attrs ...field.AssignExpr) ICadCommonLikeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cadCommonLikeDo) Joins(fields ...field.RelationField) ICadCommonLikeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cadCommonLikeDo) Preload(fields ...field.RelationField) ICadCommonLikeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cadCommonLikeDo) FirstOrInit() (*model.CadCommonLike, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonLike), nil
	}
}

func (c cadCommonLikeDo) FirstOrCreate() (*model.CadCommonLike, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CadCommonLike), nil
	}
}

func (c cadCommonLikeDo) FindByPage(offset int, limit int) (result []*model.CadCommonLike, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cadCommonLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cadCommonLikeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cadCommonLikeDo) Delete(models ...*model.CadCommonLike) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cadCommonLikeDo) withDO(do gen.Dao) *cadCommonLikeDo {
	c.DO = *do.(*gen.DO)
	return c
}
